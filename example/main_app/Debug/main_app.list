
main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b84  080401a0  080401a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userSection  00000000  00000000  00000000  00020068  2**0
                  CONTENTS
  3 .rodata       000000c8  08042d24  08042d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08042dec  08042dec  00020068  2**0
                  CONTENTS
  5 .ARM          00000008  08042dec  08042dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08042df4  08042df4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08042df4  08042df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08042df8  08042df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000068  20000000  08042dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000038  20000068  08042e64  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  08042e64  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004457  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010cf  00000000  00000000  000244ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  000255c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000580  00000000  00000000  00025be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000120e7  00000000  00000000  00026168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a7a  00000000  00000000  0003824f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00063097  00000000  00000000  0003ccc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0009fd60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002024  00000000  00000000  0009fdb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401a0 <__do_global_dtors_aux>:
 80401a0:	b510      	push	{r4, lr}
 80401a2:	4c05      	ldr	r4, [pc, #20]	; (80401b8 <__do_global_dtors_aux+0x18>)
 80401a4:	7823      	ldrb	r3, [r4, #0]
 80401a6:	b933      	cbnz	r3, 80401b6 <__do_global_dtors_aux+0x16>
 80401a8:	4b04      	ldr	r3, [pc, #16]	; (80401bc <__do_global_dtors_aux+0x1c>)
 80401aa:	b113      	cbz	r3, 80401b2 <__do_global_dtors_aux+0x12>
 80401ac:	4804      	ldr	r0, [pc, #16]	; (80401c0 <__do_global_dtors_aux+0x20>)
 80401ae:	f3af 8000 	nop.w
 80401b2:	2301      	movs	r3, #1
 80401b4:	7023      	strb	r3, [r4, #0]
 80401b6:	bd10      	pop	{r4, pc}
 80401b8:	20000068 	.word	0x20000068
 80401bc:	00000000 	.word	0x00000000
 80401c0:	08042d0c 	.word	0x08042d0c

080401c4 <frame_dummy>:
 80401c4:	b508      	push	{r3, lr}
 80401c6:	4b03      	ldr	r3, [pc, #12]	; (80401d4 <frame_dummy+0x10>)
 80401c8:	b11b      	cbz	r3, 80401d2 <frame_dummy+0xe>
 80401ca:	4903      	ldr	r1, [pc, #12]	; (80401d8 <frame_dummy+0x14>)
 80401cc:	4803      	ldr	r0, [pc, #12]	; (80401dc <frame_dummy+0x18>)
 80401ce:	f3af 8000 	nop.w
 80401d2:	bd08      	pop	{r3, pc}
 80401d4:	00000000 	.word	0x00000000
 80401d8:	2000006c 	.word	0x2000006c
 80401dc:	08042d0c 	.word	0x08042d0c

080401e0 <memchr>:
 80401e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80401e4:	2a10      	cmp	r2, #16
 80401e6:	db2b      	blt.n	8040240 <memchr+0x60>
 80401e8:	f010 0f07 	tst.w	r0, #7
 80401ec:	d008      	beq.n	8040200 <memchr+0x20>
 80401ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80401f2:	3a01      	subs	r2, #1
 80401f4:	428b      	cmp	r3, r1
 80401f6:	d02d      	beq.n	8040254 <memchr+0x74>
 80401f8:	f010 0f07 	tst.w	r0, #7
 80401fc:	b342      	cbz	r2, 8040250 <memchr+0x70>
 80401fe:	d1f6      	bne.n	80401ee <memchr+0xe>
 8040200:	b4f0      	push	{r4, r5, r6, r7}
 8040202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804020a:	f022 0407 	bic.w	r4, r2, #7
 804020e:	f07f 0700 	mvns.w	r7, #0
 8040212:	2300      	movs	r3, #0
 8040214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040218:	3c08      	subs	r4, #8
 804021a:	ea85 0501 	eor.w	r5, r5, r1
 804021e:	ea86 0601 	eor.w	r6, r6, r1
 8040222:	fa85 f547 	uadd8	r5, r5, r7
 8040226:	faa3 f587 	sel	r5, r3, r7
 804022a:	fa86 f647 	uadd8	r6, r6, r7
 804022e:	faa5 f687 	sel	r6, r5, r7
 8040232:	b98e      	cbnz	r6, 8040258 <memchr+0x78>
 8040234:	d1ee      	bne.n	8040214 <memchr+0x34>
 8040236:	bcf0      	pop	{r4, r5, r6, r7}
 8040238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804023c:	f002 0207 	and.w	r2, r2, #7
 8040240:	b132      	cbz	r2, 8040250 <memchr+0x70>
 8040242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040246:	3a01      	subs	r2, #1
 8040248:	ea83 0301 	eor.w	r3, r3, r1
 804024c:	b113      	cbz	r3, 8040254 <memchr+0x74>
 804024e:	d1f8      	bne.n	8040242 <memchr+0x62>
 8040250:	2000      	movs	r0, #0
 8040252:	4770      	bx	lr
 8040254:	3801      	subs	r0, #1
 8040256:	4770      	bx	lr
 8040258:	2d00      	cmp	r5, #0
 804025a:	bf06      	itte	eq
 804025c:	4635      	moveq	r5, r6
 804025e:	3803      	subeq	r0, #3
 8040260:	3807      	subne	r0, #7
 8040262:	f015 0f01 	tst.w	r5, #1
 8040266:	d107      	bne.n	8040278 <memchr+0x98>
 8040268:	3001      	adds	r0, #1
 804026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804026e:	bf02      	ittt	eq
 8040270:	3001      	addeq	r0, #1
 8040272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040276:	3001      	addeq	r0, #1
 8040278:	bcf0      	pop	{r4, r5, r6, r7}
 804027a:	3801      	subs	r0, #1
 804027c:	4770      	bx	lr
 804027e:	bf00      	nop

08040280 <__aeabi_uldivmod>:
 8040280:	b953      	cbnz	r3, 8040298 <__aeabi_uldivmod+0x18>
 8040282:	b94a      	cbnz	r2, 8040298 <__aeabi_uldivmod+0x18>
 8040284:	2900      	cmp	r1, #0
 8040286:	bf08      	it	eq
 8040288:	2800      	cmpeq	r0, #0
 804028a:	bf1c      	itt	ne
 804028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8040290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8040294:	f000 b974 	b.w	8040580 <__aeabi_idiv0>
 8040298:	f1ad 0c08 	sub.w	ip, sp, #8
 804029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80402a0:	f000 f806 	bl	80402b0 <__udivmoddi4>
 80402a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80402a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80402ac:	b004      	add	sp, #16
 80402ae:	4770      	bx	lr

080402b0 <__udivmoddi4>:
 80402b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80402b4:	9d08      	ldr	r5, [sp, #32]
 80402b6:	4604      	mov	r4, r0
 80402b8:	468e      	mov	lr, r1
 80402ba:	2b00      	cmp	r3, #0
 80402bc:	d14d      	bne.n	804035a <__udivmoddi4+0xaa>
 80402be:	428a      	cmp	r2, r1
 80402c0:	4694      	mov	ip, r2
 80402c2:	d969      	bls.n	8040398 <__udivmoddi4+0xe8>
 80402c4:	fab2 f282 	clz	r2, r2
 80402c8:	b152      	cbz	r2, 80402e0 <__udivmoddi4+0x30>
 80402ca:	fa01 f302 	lsl.w	r3, r1, r2
 80402ce:	f1c2 0120 	rsb	r1, r2, #32
 80402d2:	fa20 f101 	lsr.w	r1, r0, r1
 80402d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80402da:	ea41 0e03 	orr.w	lr, r1, r3
 80402de:	4094      	lsls	r4, r2
 80402e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80402e4:	0c21      	lsrs	r1, r4, #16
 80402e6:	fbbe f6f8 	udiv	r6, lr, r8
 80402ea:	fa1f f78c 	uxth.w	r7, ip
 80402ee:	fb08 e316 	mls	r3, r8, r6, lr
 80402f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80402f6:	fb06 f107 	mul.w	r1, r6, r7
 80402fa:	4299      	cmp	r1, r3
 80402fc:	d90a      	bls.n	8040314 <__udivmoddi4+0x64>
 80402fe:	eb1c 0303 	adds.w	r3, ip, r3
 8040302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8040306:	f080 811f 	bcs.w	8040548 <__udivmoddi4+0x298>
 804030a:	4299      	cmp	r1, r3
 804030c:	f240 811c 	bls.w	8040548 <__udivmoddi4+0x298>
 8040310:	3e02      	subs	r6, #2
 8040312:	4463      	add	r3, ip
 8040314:	1a5b      	subs	r3, r3, r1
 8040316:	b2a4      	uxth	r4, r4
 8040318:	fbb3 f0f8 	udiv	r0, r3, r8
 804031c:	fb08 3310 	mls	r3, r8, r0, r3
 8040320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040324:	fb00 f707 	mul.w	r7, r0, r7
 8040328:	42a7      	cmp	r7, r4
 804032a:	d90a      	bls.n	8040342 <__udivmoddi4+0x92>
 804032c:	eb1c 0404 	adds.w	r4, ip, r4
 8040330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8040334:	f080 810a 	bcs.w	804054c <__udivmoddi4+0x29c>
 8040338:	42a7      	cmp	r7, r4
 804033a:	f240 8107 	bls.w	804054c <__udivmoddi4+0x29c>
 804033e:	4464      	add	r4, ip
 8040340:	3802      	subs	r0, #2
 8040342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040346:	1be4      	subs	r4, r4, r7
 8040348:	2600      	movs	r6, #0
 804034a:	b11d      	cbz	r5, 8040354 <__udivmoddi4+0xa4>
 804034c:	40d4      	lsrs	r4, r2
 804034e:	2300      	movs	r3, #0
 8040350:	e9c5 4300 	strd	r4, r3, [r5]
 8040354:	4631      	mov	r1, r6
 8040356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804035a:	428b      	cmp	r3, r1
 804035c:	d909      	bls.n	8040372 <__udivmoddi4+0xc2>
 804035e:	2d00      	cmp	r5, #0
 8040360:	f000 80ef 	beq.w	8040542 <__udivmoddi4+0x292>
 8040364:	2600      	movs	r6, #0
 8040366:	e9c5 0100 	strd	r0, r1, [r5]
 804036a:	4630      	mov	r0, r6
 804036c:	4631      	mov	r1, r6
 804036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040372:	fab3 f683 	clz	r6, r3
 8040376:	2e00      	cmp	r6, #0
 8040378:	d14a      	bne.n	8040410 <__udivmoddi4+0x160>
 804037a:	428b      	cmp	r3, r1
 804037c:	d302      	bcc.n	8040384 <__udivmoddi4+0xd4>
 804037e:	4282      	cmp	r2, r0
 8040380:	f200 80f9 	bhi.w	8040576 <__udivmoddi4+0x2c6>
 8040384:	1a84      	subs	r4, r0, r2
 8040386:	eb61 0303 	sbc.w	r3, r1, r3
 804038a:	2001      	movs	r0, #1
 804038c:	469e      	mov	lr, r3
 804038e:	2d00      	cmp	r5, #0
 8040390:	d0e0      	beq.n	8040354 <__udivmoddi4+0xa4>
 8040392:	e9c5 4e00 	strd	r4, lr, [r5]
 8040396:	e7dd      	b.n	8040354 <__udivmoddi4+0xa4>
 8040398:	b902      	cbnz	r2, 804039c <__udivmoddi4+0xec>
 804039a:	deff      	udf	#255	; 0xff
 804039c:	fab2 f282 	clz	r2, r2
 80403a0:	2a00      	cmp	r2, #0
 80403a2:	f040 8092 	bne.w	80404ca <__udivmoddi4+0x21a>
 80403a6:	eba1 010c 	sub.w	r1, r1, ip
 80403aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80403ae:	fa1f fe8c 	uxth.w	lr, ip
 80403b2:	2601      	movs	r6, #1
 80403b4:	0c20      	lsrs	r0, r4, #16
 80403b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80403ba:	fb07 1113 	mls	r1, r7, r3, r1
 80403be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403c2:	fb0e f003 	mul.w	r0, lr, r3
 80403c6:	4288      	cmp	r0, r1
 80403c8:	d908      	bls.n	80403dc <__udivmoddi4+0x12c>
 80403ca:	eb1c 0101 	adds.w	r1, ip, r1
 80403ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80403d2:	d202      	bcs.n	80403da <__udivmoddi4+0x12a>
 80403d4:	4288      	cmp	r0, r1
 80403d6:	f200 80cb 	bhi.w	8040570 <__udivmoddi4+0x2c0>
 80403da:	4643      	mov	r3, r8
 80403dc:	1a09      	subs	r1, r1, r0
 80403de:	b2a4      	uxth	r4, r4
 80403e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80403e4:	fb07 1110 	mls	r1, r7, r0, r1
 80403e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403ec:	fb0e fe00 	mul.w	lr, lr, r0
 80403f0:	45a6      	cmp	lr, r4
 80403f2:	d908      	bls.n	8040406 <__udivmoddi4+0x156>
 80403f4:	eb1c 0404 	adds.w	r4, ip, r4
 80403f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80403fc:	d202      	bcs.n	8040404 <__udivmoddi4+0x154>
 80403fe:	45a6      	cmp	lr, r4
 8040400:	f200 80bb 	bhi.w	804057a <__udivmoddi4+0x2ca>
 8040404:	4608      	mov	r0, r1
 8040406:	eba4 040e 	sub.w	r4, r4, lr
 804040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804040e:	e79c      	b.n	804034a <__udivmoddi4+0x9a>
 8040410:	f1c6 0720 	rsb	r7, r6, #32
 8040414:	40b3      	lsls	r3, r6
 8040416:	fa22 fc07 	lsr.w	ip, r2, r7
 804041a:	ea4c 0c03 	orr.w	ip, ip, r3
 804041e:	fa20 f407 	lsr.w	r4, r0, r7
 8040422:	fa01 f306 	lsl.w	r3, r1, r6
 8040426:	431c      	orrs	r4, r3
 8040428:	40f9      	lsrs	r1, r7
 804042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804042e:	fa00 f306 	lsl.w	r3, r0, r6
 8040432:	fbb1 f8f9 	udiv	r8, r1, r9
 8040436:	0c20      	lsrs	r0, r4, #16
 8040438:	fa1f fe8c 	uxth.w	lr, ip
 804043c:	fb09 1118 	mls	r1, r9, r8, r1
 8040440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040444:	fb08 f00e 	mul.w	r0, r8, lr
 8040448:	4288      	cmp	r0, r1
 804044a:	fa02 f206 	lsl.w	r2, r2, r6
 804044e:	d90b      	bls.n	8040468 <__udivmoddi4+0x1b8>
 8040450:	eb1c 0101 	adds.w	r1, ip, r1
 8040454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8040458:	f080 8088 	bcs.w	804056c <__udivmoddi4+0x2bc>
 804045c:	4288      	cmp	r0, r1
 804045e:	f240 8085 	bls.w	804056c <__udivmoddi4+0x2bc>
 8040462:	f1a8 0802 	sub.w	r8, r8, #2
 8040466:	4461      	add	r1, ip
 8040468:	1a09      	subs	r1, r1, r0
 804046a:	b2a4      	uxth	r4, r4
 804046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040470:	fb09 1110 	mls	r1, r9, r0, r1
 8040474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040478:	fb00 fe0e 	mul.w	lr, r0, lr
 804047c:	458e      	cmp	lr, r1
 804047e:	d908      	bls.n	8040492 <__udivmoddi4+0x1e2>
 8040480:	eb1c 0101 	adds.w	r1, ip, r1
 8040484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8040488:	d26c      	bcs.n	8040564 <__udivmoddi4+0x2b4>
 804048a:	458e      	cmp	lr, r1
 804048c:	d96a      	bls.n	8040564 <__udivmoddi4+0x2b4>
 804048e:	3802      	subs	r0, #2
 8040490:	4461      	add	r1, ip
 8040492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8040496:	fba0 9402 	umull	r9, r4, r0, r2
 804049a:	eba1 010e 	sub.w	r1, r1, lr
 804049e:	42a1      	cmp	r1, r4
 80404a0:	46c8      	mov	r8, r9
 80404a2:	46a6      	mov	lr, r4
 80404a4:	d356      	bcc.n	8040554 <__udivmoddi4+0x2a4>
 80404a6:	d053      	beq.n	8040550 <__udivmoddi4+0x2a0>
 80404a8:	b15d      	cbz	r5, 80404c2 <__udivmoddi4+0x212>
 80404aa:	ebb3 0208 	subs.w	r2, r3, r8
 80404ae:	eb61 010e 	sbc.w	r1, r1, lr
 80404b2:	fa01 f707 	lsl.w	r7, r1, r7
 80404b6:	fa22 f306 	lsr.w	r3, r2, r6
 80404ba:	40f1      	lsrs	r1, r6
 80404bc:	431f      	orrs	r7, r3
 80404be:	e9c5 7100 	strd	r7, r1, [r5]
 80404c2:	2600      	movs	r6, #0
 80404c4:	4631      	mov	r1, r6
 80404c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80404ca:	f1c2 0320 	rsb	r3, r2, #32
 80404ce:	40d8      	lsrs	r0, r3
 80404d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80404d4:	fa21 f303 	lsr.w	r3, r1, r3
 80404d8:	4091      	lsls	r1, r2
 80404da:	4301      	orrs	r1, r0
 80404dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404e0:	fa1f fe8c 	uxth.w	lr, ip
 80404e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80404e8:	fb07 3610 	mls	r6, r7, r0, r3
 80404ec:	0c0b      	lsrs	r3, r1, #16
 80404ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80404f2:	fb00 f60e 	mul.w	r6, r0, lr
 80404f6:	429e      	cmp	r6, r3
 80404f8:	fa04 f402 	lsl.w	r4, r4, r2
 80404fc:	d908      	bls.n	8040510 <__udivmoddi4+0x260>
 80404fe:	eb1c 0303 	adds.w	r3, ip, r3
 8040502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8040506:	d22f      	bcs.n	8040568 <__udivmoddi4+0x2b8>
 8040508:	429e      	cmp	r6, r3
 804050a:	d92d      	bls.n	8040568 <__udivmoddi4+0x2b8>
 804050c:	3802      	subs	r0, #2
 804050e:	4463      	add	r3, ip
 8040510:	1b9b      	subs	r3, r3, r6
 8040512:	b289      	uxth	r1, r1
 8040514:	fbb3 f6f7 	udiv	r6, r3, r7
 8040518:	fb07 3316 	mls	r3, r7, r6, r3
 804051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040520:	fb06 f30e 	mul.w	r3, r6, lr
 8040524:	428b      	cmp	r3, r1
 8040526:	d908      	bls.n	804053a <__udivmoddi4+0x28a>
 8040528:	eb1c 0101 	adds.w	r1, ip, r1
 804052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8040530:	d216      	bcs.n	8040560 <__udivmoddi4+0x2b0>
 8040532:	428b      	cmp	r3, r1
 8040534:	d914      	bls.n	8040560 <__udivmoddi4+0x2b0>
 8040536:	3e02      	subs	r6, #2
 8040538:	4461      	add	r1, ip
 804053a:	1ac9      	subs	r1, r1, r3
 804053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040540:	e738      	b.n	80403b4 <__udivmoddi4+0x104>
 8040542:	462e      	mov	r6, r5
 8040544:	4628      	mov	r0, r5
 8040546:	e705      	b.n	8040354 <__udivmoddi4+0xa4>
 8040548:	4606      	mov	r6, r0
 804054a:	e6e3      	b.n	8040314 <__udivmoddi4+0x64>
 804054c:	4618      	mov	r0, r3
 804054e:	e6f8      	b.n	8040342 <__udivmoddi4+0x92>
 8040550:	454b      	cmp	r3, r9
 8040552:	d2a9      	bcs.n	80404a8 <__udivmoddi4+0x1f8>
 8040554:	ebb9 0802 	subs.w	r8, r9, r2
 8040558:	eb64 0e0c 	sbc.w	lr, r4, ip
 804055c:	3801      	subs	r0, #1
 804055e:	e7a3      	b.n	80404a8 <__udivmoddi4+0x1f8>
 8040560:	4646      	mov	r6, r8
 8040562:	e7ea      	b.n	804053a <__udivmoddi4+0x28a>
 8040564:	4620      	mov	r0, r4
 8040566:	e794      	b.n	8040492 <__udivmoddi4+0x1e2>
 8040568:	4640      	mov	r0, r8
 804056a:	e7d1      	b.n	8040510 <__udivmoddi4+0x260>
 804056c:	46d0      	mov	r8, sl
 804056e:	e77b      	b.n	8040468 <__udivmoddi4+0x1b8>
 8040570:	3b02      	subs	r3, #2
 8040572:	4461      	add	r1, ip
 8040574:	e732      	b.n	80403dc <__udivmoddi4+0x12c>
 8040576:	4630      	mov	r0, r6
 8040578:	e709      	b.n	804038e <__udivmoddi4+0xde>
 804057a:	4464      	add	r4, ip
 804057c:	3802      	subs	r0, #2
 804057e:	e742      	b.n	8040406 <__udivmoddi4+0x156>

08040580 <__aeabi_idiv0>:
 8040580:	4770      	bx	lr
 8040582:	bf00      	nop

08040584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040584:	b480      	push	{r7}
 8040586:	b085      	sub	sp, #20
 8040588:	af00      	add	r7, sp, #0
 804058a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 804058c:	687b      	ldr	r3, [r7, #4]
 804058e:	f003 0307 	and.w	r3, r3, #7
 8040592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040594:	4b0c      	ldr	r3, [pc, #48]	; (80405c8 <__NVIC_SetPriorityGrouping+0x44>)
 8040596:	68db      	ldr	r3, [r3, #12]
 8040598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 804059a:	68ba      	ldr	r2, [r7, #8]
 804059c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80405a0:	4013      	ands	r3, r2
 80405a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80405a4:	68fb      	ldr	r3, [r7, #12]
 80405a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80405a8:	68bb      	ldr	r3, [r7, #8]
 80405aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80405ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80405b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80405b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80405b6:	4a04      	ldr	r2, [pc, #16]	; (80405c8 <__NVIC_SetPriorityGrouping+0x44>)
 80405b8:	68bb      	ldr	r3, [r7, #8]
 80405ba:	60d3      	str	r3, [r2, #12]
}
 80405bc:	bf00      	nop
 80405be:	3714      	adds	r7, #20
 80405c0:	46bd      	mov	sp, r7
 80405c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405c6:	4770      	bx	lr
 80405c8:	e000ed00 	.word	0xe000ed00

080405cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80405cc:	b480      	push	{r7}
 80405ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80405d0:	4b05      	ldr	r3, [pc, #20]	; (80405e8 <LL_RCC_HSI_Enable+0x1c>)
 80405d2:	681b      	ldr	r3, [r3, #0]
 80405d4:	4a04      	ldr	r2, [pc, #16]	; (80405e8 <LL_RCC_HSI_Enable+0x1c>)
 80405d6:	f043 0301 	orr.w	r3, r3, #1
 80405da:	6013      	str	r3, [r2, #0]
}
 80405dc:	bf00      	nop
 80405de:	46bd      	mov	sp, r7
 80405e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405e4:	4770      	bx	lr
 80405e6:	bf00      	nop
 80405e8:	40023800 	.word	0x40023800

080405ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80405ec:	b480      	push	{r7}
 80405ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80405f0:	4b06      	ldr	r3, [pc, #24]	; (804060c <LL_RCC_HSI_IsReady+0x20>)
 80405f2:	681b      	ldr	r3, [r3, #0]
 80405f4:	f003 0302 	and.w	r3, r3, #2
 80405f8:	2b02      	cmp	r3, #2
 80405fa:	bf0c      	ite	eq
 80405fc:	2301      	moveq	r3, #1
 80405fe:	2300      	movne	r3, #0
 8040600:	b2db      	uxtb	r3, r3
}
 8040602:	4618      	mov	r0, r3
 8040604:	46bd      	mov	sp, r7
 8040606:	f85d 7b04 	ldr.w	r7, [sp], #4
 804060a:	4770      	bx	lr
 804060c:	40023800 	.word	0x40023800

08040610 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8040610:	b480      	push	{r7}
 8040612:	b083      	sub	sp, #12
 8040614:	af00      	add	r7, sp, #0
 8040616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8040618:	4b07      	ldr	r3, [pc, #28]	; (8040638 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 804061a:	681b      	ldr	r3, [r3, #0]
 804061c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8040620:	687b      	ldr	r3, [r7, #4]
 8040622:	00db      	lsls	r3, r3, #3
 8040624:	4904      	ldr	r1, [pc, #16]	; (8040638 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8040626:	4313      	orrs	r3, r2
 8040628:	600b      	str	r3, [r1, #0]
}
 804062a:	bf00      	nop
 804062c:	370c      	adds	r7, #12
 804062e:	46bd      	mov	sp, r7
 8040630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040634:	4770      	bx	lr
 8040636:	bf00      	nop
 8040638:	40023800 	.word	0x40023800

0804063c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 804063c:	b480      	push	{r7}
 804063e:	b083      	sub	sp, #12
 8040640:	af00      	add	r7, sp, #0
 8040642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8040644:	4b06      	ldr	r3, [pc, #24]	; (8040660 <LL_RCC_SetSysClkSource+0x24>)
 8040646:	689b      	ldr	r3, [r3, #8]
 8040648:	f023 0203 	bic.w	r2, r3, #3
 804064c:	4904      	ldr	r1, [pc, #16]	; (8040660 <LL_RCC_SetSysClkSource+0x24>)
 804064e:	687b      	ldr	r3, [r7, #4]
 8040650:	4313      	orrs	r3, r2
 8040652:	608b      	str	r3, [r1, #8]
}
 8040654:	bf00      	nop
 8040656:	370c      	adds	r7, #12
 8040658:	46bd      	mov	sp, r7
 804065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804065e:	4770      	bx	lr
 8040660:	40023800 	.word	0x40023800

08040664 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8040664:	b480      	push	{r7}
 8040666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8040668:	4b04      	ldr	r3, [pc, #16]	; (804067c <LL_RCC_GetSysClkSource+0x18>)
 804066a:	689b      	ldr	r3, [r3, #8]
 804066c:	f003 030c 	and.w	r3, r3, #12
}
 8040670:	4618      	mov	r0, r3
 8040672:	46bd      	mov	sp, r7
 8040674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040678:	4770      	bx	lr
 804067a:	bf00      	nop
 804067c:	40023800 	.word	0x40023800

08040680 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8040680:	b480      	push	{r7}
 8040682:	b083      	sub	sp, #12
 8040684:	af00      	add	r7, sp, #0
 8040686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8040688:	4b06      	ldr	r3, [pc, #24]	; (80406a4 <LL_RCC_SetAHBPrescaler+0x24>)
 804068a:	689b      	ldr	r3, [r3, #8]
 804068c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040690:	4904      	ldr	r1, [pc, #16]	; (80406a4 <LL_RCC_SetAHBPrescaler+0x24>)
 8040692:	687b      	ldr	r3, [r7, #4]
 8040694:	4313      	orrs	r3, r2
 8040696:	608b      	str	r3, [r1, #8]
}
 8040698:	bf00      	nop
 804069a:	370c      	adds	r7, #12
 804069c:	46bd      	mov	sp, r7
 804069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406a2:	4770      	bx	lr
 80406a4:	40023800 	.word	0x40023800

080406a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80406a8:	b480      	push	{r7}
 80406aa:	b083      	sub	sp, #12
 80406ac:	af00      	add	r7, sp, #0
 80406ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80406b0:	4b06      	ldr	r3, [pc, #24]	; (80406cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80406b2:	689b      	ldr	r3, [r3, #8]
 80406b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80406b8:	4904      	ldr	r1, [pc, #16]	; (80406cc <LL_RCC_SetAPB1Prescaler+0x24>)
 80406ba:	687b      	ldr	r3, [r7, #4]
 80406bc:	4313      	orrs	r3, r2
 80406be:	608b      	str	r3, [r1, #8]
}
 80406c0:	bf00      	nop
 80406c2:	370c      	adds	r7, #12
 80406c4:	46bd      	mov	sp, r7
 80406c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406ca:	4770      	bx	lr
 80406cc:	40023800 	.word	0x40023800

080406d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80406d0:	b480      	push	{r7}
 80406d2:	b083      	sub	sp, #12
 80406d4:	af00      	add	r7, sp, #0
 80406d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80406d8:	4b06      	ldr	r3, [pc, #24]	; (80406f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80406da:	689b      	ldr	r3, [r3, #8]
 80406dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80406e0:	4904      	ldr	r1, [pc, #16]	; (80406f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80406e2:	687b      	ldr	r3, [r7, #4]
 80406e4:	4313      	orrs	r3, r2
 80406e6:	608b      	str	r3, [r1, #8]
}
 80406e8:	bf00      	nop
 80406ea:	370c      	adds	r7, #12
 80406ec:	46bd      	mov	sp, r7
 80406ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406f2:	4770      	bx	lr
 80406f4:	40023800 	.word	0x40023800

080406f8 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80406f8:	b480      	push	{r7}
 80406fa:	b083      	sub	sp, #12
 80406fc:	af00      	add	r7, sp, #0
 80406fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8040700:	4b07      	ldr	r3, [pc, #28]	; (8040720 <LL_RCC_SetTIMPrescaler+0x28>)
 8040702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8040706:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 804070a:	4905      	ldr	r1, [pc, #20]	; (8040720 <LL_RCC_SetTIMPrescaler+0x28>)
 804070c:	687b      	ldr	r3, [r7, #4]
 804070e:	4313      	orrs	r3, r2
 8040710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8040714:	bf00      	nop
 8040716:	370c      	adds	r7, #12
 8040718:	46bd      	mov	sp, r7
 804071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804071e:	4770      	bx	lr
 8040720:	40023800 	.word	0x40023800

08040724 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8040724:	b480      	push	{r7}
 8040726:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8040728:	4b05      	ldr	r3, [pc, #20]	; (8040740 <LL_RCC_PLL_Enable+0x1c>)
 804072a:	681b      	ldr	r3, [r3, #0]
 804072c:	4a04      	ldr	r2, [pc, #16]	; (8040740 <LL_RCC_PLL_Enable+0x1c>)
 804072e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8040732:	6013      	str	r3, [r2, #0]
}
 8040734:	bf00      	nop
 8040736:	46bd      	mov	sp, r7
 8040738:	f85d 7b04 	ldr.w	r7, [sp], #4
 804073c:	4770      	bx	lr
 804073e:	bf00      	nop
 8040740:	40023800 	.word	0x40023800

08040744 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8040744:	b480      	push	{r7}
 8040746:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8040748:	4b07      	ldr	r3, [pc, #28]	; (8040768 <LL_RCC_PLL_IsReady+0x24>)
 804074a:	681b      	ldr	r3, [r3, #0]
 804074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8040750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8040754:	bf0c      	ite	eq
 8040756:	2301      	moveq	r3, #1
 8040758:	2300      	movne	r3, #0
 804075a:	b2db      	uxtb	r3, r3
}
 804075c:	4618      	mov	r0, r3
 804075e:	46bd      	mov	sp, r7
 8040760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040764:	4770      	bx	lr
 8040766:	bf00      	nop
 8040768:	40023800 	.word	0x40023800

0804076c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 804076c:	b480      	push	{r7}
 804076e:	b085      	sub	sp, #20
 8040770:	af00      	add	r7, sp, #0
 8040772:	60f8      	str	r0, [r7, #12]
 8040774:	60b9      	str	r1, [r7, #8]
 8040776:	607a      	str	r2, [r7, #4]
 8040778:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 804077a:	4b0d      	ldr	r3, [pc, #52]	; (80407b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 804077c:	685a      	ldr	r2, [r3, #4]
 804077e:	4b0d      	ldr	r3, [pc, #52]	; (80407b4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8040780:	4013      	ands	r3, r2
 8040782:	68f9      	ldr	r1, [r7, #12]
 8040784:	68ba      	ldr	r2, [r7, #8]
 8040786:	4311      	orrs	r1, r2
 8040788:	687a      	ldr	r2, [r7, #4]
 804078a:	0192      	lsls	r2, r2, #6
 804078c:	430a      	orrs	r2, r1
 804078e:	4908      	ldr	r1, [pc, #32]	; (80407b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8040790:	4313      	orrs	r3, r2
 8040792:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8040794:	4b06      	ldr	r3, [pc, #24]	; (80407b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8040796:	685b      	ldr	r3, [r3, #4]
 8040798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804079c:	4904      	ldr	r1, [pc, #16]	; (80407b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 804079e:	683b      	ldr	r3, [r7, #0]
 80407a0:	4313      	orrs	r3, r2
 80407a2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80407a4:	bf00      	nop
 80407a6:	3714      	adds	r7, #20
 80407a8:	46bd      	mov	sp, r7
 80407aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407ae:	4770      	bx	lr
 80407b0:	40023800 	.word	0x40023800
 80407b4:	ffbf8000 	.word	0xffbf8000

080407b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80407b8:	b480      	push	{r7}
 80407ba:	b085      	sub	sp, #20
 80407bc:	af00      	add	r7, sp, #0
 80407be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80407c0:	4b08      	ldr	r3, [pc, #32]	; (80407e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80407c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80407c4:	4907      	ldr	r1, [pc, #28]	; (80407e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80407c6:	687b      	ldr	r3, [r7, #4]
 80407c8:	4313      	orrs	r3, r2
 80407ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80407cc:	4b05      	ldr	r3, [pc, #20]	; (80407e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80407ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80407d0:	687b      	ldr	r3, [r7, #4]
 80407d2:	4013      	ands	r3, r2
 80407d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80407d6:	68fb      	ldr	r3, [r7, #12]
}
 80407d8:	bf00      	nop
 80407da:	3714      	adds	r7, #20
 80407dc:	46bd      	mov	sp, r7
 80407de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80407e2:	4770      	bx	lr
 80407e4:	40023800 	.word	0x40023800

080407e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80407e8:	b480      	push	{r7}
 80407ea:	b085      	sub	sp, #20
 80407ec:	af00      	add	r7, sp, #0
 80407ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80407f0:	4b08      	ldr	r3, [pc, #32]	; (8040814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80407f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80407f4:	4907      	ldr	r1, [pc, #28]	; (8040814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80407f6:	687b      	ldr	r3, [r7, #4]
 80407f8:	4313      	orrs	r3, r2
 80407fa:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80407fc:	4b05      	ldr	r3, [pc, #20]	; (8040814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80407fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8040800:	687b      	ldr	r3, [r7, #4]
 8040802:	4013      	ands	r3, r2
 8040804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8040806:	68fb      	ldr	r3, [r7, #12]
}
 8040808:	bf00      	nop
 804080a:	3714      	adds	r7, #20
 804080c:	46bd      	mov	sp, r7
 804080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040812:	4770      	bx	lr
 8040814:	40023800 	.word	0x40023800

08040818 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8040818:	b480      	push	{r7}
 804081a:	b085      	sub	sp, #20
 804081c:	af00      	add	r7, sp, #0
 804081e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8040820:	4b08      	ldr	r3, [pc, #32]	; (8040844 <LL_APB2_GRP1_EnableClock+0x2c>)
 8040822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8040824:	4907      	ldr	r1, [pc, #28]	; (8040844 <LL_APB2_GRP1_EnableClock+0x2c>)
 8040826:	687b      	ldr	r3, [r7, #4]
 8040828:	4313      	orrs	r3, r2
 804082a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 804082c:	4b05      	ldr	r3, [pc, #20]	; (8040844 <LL_APB2_GRP1_EnableClock+0x2c>)
 804082e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8040830:	687b      	ldr	r3, [r7, #4]
 8040832:	4013      	ands	r3, r2
 8040834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8040836:	68fb      	ldr	r3, [r7, #12]
}
 8040838:	bf00      	nop
 804083a:	3714      	adds	r7, #20
 804083c:	46bd      	mov	sp, r7
 804083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040842:	4770      	bx	lr
 8040844:	40023800 	.word	0x40023800

08040848 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8040848:	b480      	push	{r7}
 804084a:	b085      	sub	sp, #20
 804084c:	af00      	add	r7, sp, #0
 804084e:	6078      	str	r0, [r7, #4]
 8040850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8040852:	4a13      	ldr	r2, [pc, #76]	; (80408a0 <LL_SYSCFG_SetEXTISource+0x58>)
 8040854:	683b      	ldr	r3, [r7, #0]
 8040856:	b2db      	uxtb	r3, r3
 8040858:	3302      	adds	r3, #2
 804085a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 804085e:	683b      	ldr	r3, [r7, #0]
 8040860:	0c1b      	lsrs	r3, r3, #16
 8040862:	43db      	mvns	r3, r3
 8040864:	ea02 0103 	and.w	r1, r2, r3
 8040868:	683b      	ldr	r3, [r7, #0]
 804086a:	0c1b      	lsrs	r3, r3, #16
 804086c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804086e:	68fb      	ldr	r3, [r7, #12]
 8040870:	fa93 f3a3 	rbit	r3, r3
 8040874:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8040876:	68bb      	ldr	r3, [r7, #8]
 8040878:	fab3 f383 	clz	r3, r3
 804087c:	b2db      	uxtb	r3, r3
 804087e:	461a      	mov	r2, r3
 8040880:	687b      	ldr	r3, [r7, #4]
 8040882:	fa03 f202 	lsl.w	r2, r3, r2
 8040886:	4806      	ldr	r0, [pc, #24]	; (80408a0 <LL_SYSCFG_SetEXTISource+0x58>)
 8040888:	683b      	ldr	r3, [r7, #0]
 804088a:	b2db      	uxtb	r3, r3
 804088c:	430a      	orrs	r2, r1
 804088e:	3302      	adds	r3, #2
 8040890:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8040894:	bf00      	nop
 8040896:	3714      	adds	r7, #20
 8040898:	46bd      	mov	sp, r7
 804089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804089e:	4770      	bx	lr
 80408a0:	40013800 	.word	0x40013800

080408a4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80408a4:	b480      	push	{r7}
 80408a6:	b083      	sub	sp, #12
 80408a8:	af00      	add	r7, sp, #0
 80408aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80408ac:	4b06      	ldr	r3, [pc, #24]	; (80408c8 <LL_FLASH_SetLatency+0x24>)
 80408ae:	681b      	ldr	r3, [r3, #0]
 80408b0:	f023 0207 	bic.w	r2, r3, #7
 80408b4:	4904      	ldr	r1, [pc, #16]	; (80408c8 <LL_FLASH_SetLatency+0x24>)
 80408b6:	687b      	ldr	r3, [r7, #4]
 80408b8:	4313      	orrs	r3, r2
 80408ba:	600b      	str	r3, [r1, #0]
}
 80408bc:	bf00      	nop
 80408be:	370c      	adds	r7, #12
 80408c0:	46bd      	mov	sp, r7
 80408c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408c6:	4770      	bx	lr
 80408c8:	40023c00 	.word	0x40023c00

080408cc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80408cc:	b480      	push	{r7}
 80408ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80408d0:	4b04      	ldr	r3, [pc, #16]	; (80408e4 <LL_FLASH_GetLatency+0x18>)
 80408d2:	681b      	ldr	r3, [r3, #0]
 80408d4:	f003 0307 	and.w	r3, r3, #7
}
 80408d8:	4618      	mov	r0, r3
 80408da:	46bd      	mov	sp, r7
 80408dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408e0:	4770      	bx	lr
 80408e2:	bf00      	nop
 80408e4:	40023c00 	.word	0x40023c00

080408e8 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 80408e8:	b480      	push	{r7}
 80408ea:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80408ec:	4b05      	ldr	r3, [pc, #20]	; (8040904 <LL_SYSTICK_EnableIT+0x1c>)
 80408ee:	681b      	ldr	r3, [r3, #0]
 80408f0:	4a04      	ldr	r2, [pc, #16]	; (8040904 <LL_SYSTICK_EnableIT+0x1c>)
 80408f2:	f043 0302 	orr.w	r3, r3, #2
 80408f6:	6013      	str	r3, [r2, #0]
}
 80408f8:	bf00      	nop
 80408fa:	46bd      	mov	sp, r7
 80408fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040900:	4770      	bx	lr
 8040902:	bf00      	nop
 8040904:	e000e010 	.word	0xe000e010

08040908 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8040908:	b480      	push	{r7}
 804090a:	b083      	sub	sp, #12
 804090c:	af00      	add	r7, sp, #0
 804090e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8040910:	4b06      	ldr	r3, [pc, #24]	; (804092c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8040912:	681b      	ldr	r3, [r3, #0]
 8040914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8040918:	4904      	ldr	r1, [pc, #16]	; (804092c <LL_PWR_SetRegulVoltageScaling+0x24>)
 804091a:	687b      	ldr	r3, [r7, #4]
 804091c:	4313      	orrs	r3, r2
 804091e:	600b      	str	r3, [r1, #0]
}
 8040920:	bf00      	nop
 8040922:	370c      	adds	r7, #12
 8040924:	46bd      	mov	sp, r7
 8040926:	f85d 7b04 	ldr.w	r7, [sp], #4
 804092a:	4770      	bx	lr
 804092c:	40007000 	.word	0x40007000

08040930 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8040930:	b480      	push	{r7}
 8040932:	b083      	sub	sp, #12
 8040934:	af00      	add	r7, sp, #0
 8040936:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8040938:	687b      	ldr	r3, [r7, #4]
 804093a:	68db      	ldr	r3, [r3, #12]
 804093c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8040940:	687b      	ldr	r3, [r7, #4]
 8040942:	60da      	str	r2, [r3, #12]
}
 8040944:	bf00      	nop
 8040946:	370c      	adds	r7, #12
 8040948:	46bd      	mov	sp, r7
 804094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804094e:	4770      	bx	lr

08040950 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8040950:	b480      	push	{r7}
 8040952:	b083      	sub	sp, #12
 8040954:	af00      	add	r7, sp, #0
 8040956:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8040958:	687b      	ldr	r3, [r7, #4]
 804095a:	691b      	ldr	r3, [r3, #16]
 804095c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8040960:	687b      	ldr	r3, [r7, #4]
 8040962:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8040964:	687b      	ldr	r3, [r7, #4]
 8040966:	695b      	ldr	r3, [r3, #20]
 8040968:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 804096c:	687b      	ldr	r3, [r7, #4]
 804096e:	615a      	str	r2, [r3, #20]
}
 8040970:	bf00      	nop
 8040972:	370c      	adds	r7, #12
 8040974:	46bd      	mov	sp, r7
 8040976:	f85d 7b04 	ldr.w	r7, [sp], #4
 804097a:	4770      	bx	lr

0804097c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 804097c:	b480      	push	{r7}
 804097e:	b083      	sub	sp, #12
 8040980:	af00      	add	r7, sp, #0
 8040982:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8040984:	687b      	ldr	r3, [r7, #4]
 8040986:	681b      	ldr	r3, [r3, #0]
 8040988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804098c:	2b40      	cmp	r3, #64	; 0x40
 804098e:	bf0c      	ite	eq
 8040990:	2301      	moveq	r3, #1
 8040992:	2300      	movne	r3, #0
 8040994:	b2db      	uxtb	r3, r3
}
 8040996:	4618      	mov	r0, r3
 8040998:	370c      	adds	r7, #12
 804099a:	46bd      	mov	sp, r7
 804099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409a0:	4770      	bx	lr

080409a2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80409a2:	b480      	push	{r7}
 80409a4:	b083      	sub	sp, #12
 80409a6:	af00      	add	r7, sp, #0
 80409a8:	6078      	str	r0, [r7, #4]
 80409aa:	460b      	mov	r3, r1
 80409ac:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80409ae:	78fa      	ldrb	r2, [r7, #3]
 80409b0:	687b      	ldr	r3, [r7, #4]
 80409b2:	605a      	str	r2, [r3, #4]
}
 80409b4:	bf00      	nop
 80409b6:	370c      	adds	r7, #12
 80409b8:	46bd      	mov	sp, r7
 80409ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409be:	4770      	bx	lr

080409c0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80409c0:	b480      	push	{r7}
 80409c2:	b089      	sub	sp, #36	; 0x24
 80409c4:	af00      	add	r7, sp, #0
 80409c6:	60f8      	str	r0, [r7, #12]
 80409c8:	60b9      	str	r1, [r7, #8]
 80409ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80409cc:	68fb      	ldr	r3, [r7, #12]
 80409ce:	681a      	ldr	r2, [r3, #0]
 80409d0:	68bb      	ldr	r3, [r7, #8]
 80409d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80409d4:	697b      	ldr	r3, [r7, #20]
 80409d6:	fa93 f3a3 	rbit	r3, r3
 80409da:	613b      	str	r3, [r7, #16]
  return result;
 80409dc:	693b      	ldr	r3, [r7, #16]
 80409de:	fab3 f383 	clz	r3, r3
 80409e2:	b2db      	uxtb	r3, r3
 80409e4:	005b      	lsls	r3, r3, #1
 80409e6:	2103      	movs	r1, #3
 80409e8:	fa01 f303 	lsl.w	r3, r1, r3
 80409ec:	43db      	mvns	r3, r3
 80409ee:	401a      	ands	r2, r3
 80409f0:	68bb      	ldr	r3, [r7, #8]
 80409f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80409f4:	69fb      	ldr	r3, [r7, #28]
 80409f6:	fa93 f3a3 	rbit	r3, r3
 80409fa:	61bb      	str	r3, [r7, #24]
  return result;
 80409fc:	69bb      	ldr	r3, [r7, #24]
 80409fe:	fab3 f383 	clz	r3, r3
 8040a02:	b2db      	uxtb	r3, r3
 8040a04:	005b      	lsls	r3, r3, #1
 8040a06:	6879      	ldr	r1, [r7, #4]
 8040a08:	fa01 f303 	lsl.w	r3, r1, r3
 8040a0c:	431a      	orrs	r2, r3
 8040a0e:	68fb      	ldr	r3, [r7, #12]
 8040a10:	601a      	str	r2, [r3, #0]
}
 8040a12:	bf00      	nop
 8040a14:	3724      	adds	r7, #36	; 0x24
 8040a16:	46bd      	mov	sp, r7
 8040a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a1c:	4770      	bx	lr

08040a1e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8040a1e:	b480      	push	{r7}
 8040a20:	b089      	sub	sp, #36	; 0x24
 8040a22:	af00      	add	r7, sp, #0
 8040a24:	60f8      	str	r0, [r7, #12]
 8040a26:	60b9      	str	r1, [r7, #8]
 8040a28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8040a2a:	68fb      	ldr	r3, [r7, #12]
 8040a2c:	68da      	ldr	r2, [r3, #12]
 8040a2e:	68bb      	ldr	r3, [r7, #8]
 8040a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040a32:	697b      	ldr	r3, [r7, #20]
 8040a34:	fa93 f3a3 	rbit	r3, r3
 8040a38:	613b      	str	r3, [r7, #16]
  return result;
 8040a3a:	693b      	ldr	r3, [r7, #16]
 8040a3c:	fab3 f383 	clz	r3, r3
 8040a40:	b2db      	uxtb	r3, r3
 8040a42:	005b      	lsls	r3, r3, #1
 8040a44:	2103      	movs	r1, #3
 8040a46:	fa01 f303 	lsl.w	r3, r1, r3
 8040a4a:	43db      	mvns	r3, r3
 8040a4c:	401a      	ands	r2, r3
 8040a4e:	68bb      	ldr	r3, [r7, #8]
 8040a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8040a52:	69fb      	ldr	r3, [r7, #28]
 8040a54:	fa93 f3a3 	rbit	r3, r3
 8040a58:	61bb      	str	r3, [r7, #24]
  return result;
 8040a5a:	69bb      	ldr	r3, [r7, #24]
 8040a5c:	fab3 f383 	clz	r3, r3
 8040a60:	b2db      	uxtb	r3, r3
 8040a62:	005b      	lsls	r3, r3, #1
 8040a64:	6879      	ldr	r1, [r7, #4]
 8040a66:	fa01 f303 	lsl.w	r3, r1, r3
 8040a6a:	431a      	orrs	r2, r3
 8040a6c:	68fb      	ldr	r3, [r7, #12]
 8040a6e:	60da      	str	r2, [r3, #12]
}
 8040a70:	bf00      	nop
 8040a72:	3724      	adds	r7, #36	; 0x24
 8040a74:	46bd      	mov	sp, r7
 8040a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a7a:	4770      	bx	lr

08040a7c <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8040a7c:	b480      	push	{r7}
 8040a7e:	b083      	sub	sp, #12
 8040a80:	af00      	add	r7, sp, #0
 8040a82:	6078      	str	r0, [r7, #4]
 8040a84:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8040a86:	687b      	ldr	r3, [r7, #4]
 8040a88:	691a      	ldr	r2, [r3, #16]
 8040a8a:	683b      	ldr	r3, [r7, #0]
 8040a8c:	4013      	ands	r3, r2
 8040a8e:	683a      	ldr	r2, [r7, #0]
 8040a90:	429a      	cmp	r2, r3
 8040a92:	bf0c      	ite	eq
 8040a94:	2301      	moveq	r3, #1
 8040a96:	2300      	movne	r3, #0
 8040a98:	b2db      	uxtb	r3, r3
}
 8040a9a:	4618      	mov	r0, r3
 8040a9c:	370c      	adds	r7, #12
 8040a9e:	46bd      	mov	sp, r7
 8040aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040aa4:	4770      	bx	lr

08040aa6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8040aa6:	b480      	push	{r7}
 8040aa8:	b083      	sub	sp, #12
 8040aaa:	af00      	add	r7, sp, #0
 8040aac:	6078      	str	r0, [r7, #4]
 8040aae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8040ab0:	683b      	ldr	r3, [r7, #0]
 8040ab2:	041a      	lsls	r2, r3, #16
 8040ab4:	687b      	ldr	r3, [r7, #4]
 8040ab6:	619a      	str	r2, [r3, #24]
}
 8040ab8:	bf00      	nop
 8040aba:	370c      	adds	r7, #12
 8040abc:	46bd      	mov	sp, r7
 8040abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ac2:	4770      	bx	lr

08040ac4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8040ac4:	b480      	push	{r7}
 8040ac6:	b085      	sub	sp, #20
 8040ac8:	af00      	add	r7, sp, #0
 8040aca:	6078      	str	r0, [r7, #4]
 8040acc:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8040ace:	687b      	ldr	r3, [r7, #4]
 8040ad0:	695b      	ldr	r3, [r3, #20]
 8040ad2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8040ad4:	68fa      	ldr	r2, [r7, #12]
 8040ad6:	683b      	ldr	r3, [r7, #0]
 8040ad8:	4013      	ands	r3, r2
 8040ada:	041a      	lsls	r2, r3, #16
 8040adc:	68fb      	ldr	r3, [r7, #12]
 8040ade:	43d9      	mvns	r1, r3
 8040ae0:	683b      	ldr	r3, [r7, #0]
 8040ae2:	400b      	ands	r3, r1
 8040ae4:	431a      	orrs	r2, r3
 8040ae6:	687b      	ldr	r3, [r7, #4]
 8040ae8:	619a      	str	r2, [r3, #24]
}
 8040aea:	bf00      	nop
 8040aec:	3714      	adds	r7, #20
 8040aee:	46bd      	mov	sp, r7
 8040af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040af4:	4770      	bx	lr
	...

08040af8 <LL_Delay>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void LL_Delay(uint32_t ms)
{
 8040af8:	b480      	push	{r7}
 8040afa:	b085      	sub	sp, #20
 8040afc:	af00      	add	r7, sp, #0
 8040afe:	6078      	str	r0, [r7, #4]
	__uint32_t previous = systick_count;
 8040b00:	4b08      	ldr	r3, [pc, #32]	; (8040b24 <LL_Delay+0x2c>)
 8040b02:	681b      	ldr	r3, [r3, #0]
 8040b04:	60fb      	str	r3, [r7, #12]
	while((systick_count - previous) < ms);
 8040b06:	bf00      	nop
 8040b08:	4b06      	ldr	r3, [pc, #24]	; (8040b24 <LL_Delay+0x2c>)
 8040b0a:	681a      	ldr	r2, [r3, #0]
 8040b0c:	68fb      	ldr	r3, [r7, #12]
 8040b0e:	1ad3      	subs	r3, r2, r3
 8040b10:	687a      	ldr	r2, [r7, #4]
 8040b12:	429a      	cmp	r2, r3
 8040b14:	d8f8      	bhi.n	8040b08 <LL_Delay+0x10>
}
 8040b16:	bf00      	nop
 8040b18:	bf00      	nop
 8040b1a:	3714      	adds	r7, #20
 8040b1c:	46bd      	mov	sp, r7
 8040b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b22:	4770      	bx	lr
 8040b24:	20000084 	.word	0x20000084

08040b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040b28:	b580      	push	{r7, lr}
 8040b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8040b2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8040b30:	f7ff fe72 	bl	8040818 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8040b34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8040b38:	f7ff fe56 	bl	80407e8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8040b3c:	2007      	movs	r0, #7
 8040b3e:	f7ff fd21 	bl	8040584 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040b42:	f000 f833 	bl	8040bac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040b46:	f000 f8cd 	bl	8040ce4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8040b4a:	f000 f87b 	bl	8040c44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("APP 2 is running /r/n");
 8040b4e:	4812      	ldr	r0, [pc, #72]	; (8040b98 <main+0x70>)
 8040b50:	f001 f94e 	bl	8041df0 <iprintf>
  blink_ticks = systick_count;
 8040b54:	4b11      	ldr	r3, [pc, #68]	; (8040b9c <main+0x74>)
 8040b56:	681b      	ldr	r3, [r3, #0]
 8040b58:	4a11      	ldr	r2, [pc, #68]	; (8040ba0 <main+0x78>)
 8040b5a:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (LL_GPIO_IsInputPinSet(B1_GPIO_Port, B1_Pin))
 8040b5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040b60:	4810      	ldr	r0, [pc, #64]	; (8040ba4 <main+0x7c>)
 8040b62:	f7ff ff8b 	bl	8040a7c <LL_GPIO_IsInputPinSet>
 8040b66:	4603      	mov	r3, r0
 8040b68:	2b00      	cmp	r3, #0
 8040b6a:	d004      	beq.n	8040b76 <main+0x4e>
	{
		blink_ticks++;
 8040b6c:	4b0c      	ldr	r3, [pc, #48]	; (8040ba0 <main+0x78>)
 8040b6e:	681b      	ldr	r3, [r3, #0]
 8040b70:	3301      	adds	r3, #1
 8040b72:	4a0b      	ldr	r2, [pc, #44]	; (8040ba0 <main+0x78>)
 8040b74:	6013      	str	r3, [r2, #0]
	}

	if(blink_ticks > 500)
 8040b76:	4b0a      	ldr	r3, [pc, #40]	; (8040ba0 <main+0x78>)
 8040b78:	681b      	ldr	r3, [r3, #0]
 8040b7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8040b7e:	d906      	bls.n	8040b8e <main+0x66>
		{
			LL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8040b80:	2120      	movs	r1, #32
 8040b82:	4809      	ldr	r0, [pc, #36]	; (8040ba8 <main+0x80>)
 8040b84:	f7ff ff9e 	bl	8040ac4 <LL_GPIO_TogglePin>
			blink_ticks = 0;
 8040b88:	4b05      	ldr	r3, [pc, #20]	; (8040ba0 <main+0x78>)
 8040b8a:	2200      	movs	r2, #0
 8040b8c:	601a      	str	r2, [r3, #0]
		}
	LL_Delay(1);
 8040b8e:	2001      	movs	r0, #1
 8040b90:	f7ff ffb2 	bl	8040af8 <LL_Delay>
	if (LL_GPIO_IsInputPinSet(B1_GPIO_Port, B1_Pin))
 8040b94:	e7e2      	b.n	8040b5c <main+0x34>
 8040b96:	bf00      	nop
 8040b98:	08042d24 	.word	0x08042d24
 8040b9c:	20000084 	.word	0x20000084
 8040ba0:	20000088 	.word	0x20000088
 8040ba4:	40020800 	.word	0x40020800
 8040ba8:	40020000 	.word	0x40020000

08040bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040bac:	b580      	push	{r7, lr}
 8040bae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8040bb0:	2002      	movs	r0, #2
 8040bb2:	f7ff fe77 	bl	80408a4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8040bb6:	bf00      	nop
 8040bb8:	f7ff fe88 	bl	80408cc <LL_FLASH_GetLatency>
 8040bbc:	4603      	mov	r3, r0
 8040bbe:	2b02      	cmp	r3, #2
 8040bc0:	d1fa      	bne.n	8040bb8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8040bc2:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8040bc6:	f7ff fe9f 	bl	8040908 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8040bca:	2010      	movs	r0, #16
 8040bcc:	f7ff fd20 	bl	8040610 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8040bd0:	f7ff fcfc 	bl	80405cc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8040bd4:	bf00      	nop
 8040bd6:	f7ff fd09 	bl	80405ec <LL_RCC_HSI_IsReady>
 8040bda:	4603      	mov	r3, r0
 8040bdc:	2b01      	cmp	r3, #1
 8040bde:	d1fa      	bne.n	8040bd6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8040be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8040be4:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8040be8:	2110      	movs	r1, #16
 8040bea:	2000      	movs	r0, #0
 8040bec:	f7ff fdbe 	bl	804076c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8040bf0:	f7ff fd98 	bl	8040724 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8040bf4:	bf00      	nop
 8040bf6:	f7ff fda5 	bl	8040744 <LL_RCC_PLL_IsReady>
 8040bfa:	4603      	mov	r3, r0
 8040bfc:	2b01      	cmp	r3, #1
 8040bfe:	d1fa      	bne.n	8040bf6 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8040c00:	2000      	movs	r0, #0
 8040c02:	f7ff fd3d 	bl	8040680 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8040c06:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8040c0a:	f7ff fd4d 	bl	80406a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8040c0e:	2000      	movs	r0, #0
 8040c10:	f7ff fd5e 	bl	80406d0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8040c14:	2002      	movs	r0, #2
 8040c16:	f7ff fd11 	bl	804063c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8040c1a:	bf00      	nop
 8040c1c:	f7ff fd22 	bl	8040664 <LL_RCC_GetSysClkSource>
 8040c20:	4603      	mov	r3, r0
 8040c22:	2b08      	cmp	r3, #8
 8040c24:	d1fa      	bne.n	8040c1c <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 8040c26:	4806      	ldr	r0, [pc, #24]	; (8040c40 <SystemClock_Config+0x94>)
 8040c28:	f001 f892 	bl	8041d50 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 8040c2c:	4804      	ldr	r0, [pc, #16]	; (8040c40 <SystemClock_Config+0x94>)
 8040c2e:	f001 f89d 	bl	8041d6c <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8040c32:	2000      	movs	r0, #0
 8040c34:	f7ff fd60 	bl	80406f8 <LL_RCC_SetTIMPrescaler>
  LL_SYSTICK_EnableIT();
 8040c38:	f7ff fe56 	bl	80408e8 <LL_SYSTICK_EnableIT>
}
 8040c3c:	bf00      	nop
 8040c3e:	bd80      	pop	{r7, pc}
 8040c40:	0501bd00 	.word	0x0501bd00

08040c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8040c44:	b580      	push	{r7, lr}
 8040c46:	b08e      	sub	sp, #56	; 0x38
 8040c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8040c4a:	f107 031c 	add.w	r3, r7, #28
 8040c4e:	2200      	movs	r2, #0
 8040c50:	601a      	str	r2, [r3, #0]
 8040c52:	605a      	str	r2, [r3, #4]
 8040c54:	609a      	str	r2, [r3, #8]
 8040c56:	60da      	str	r2, [r3, #12]
 8040c58:	611a      	str	r2, [r3, #16]
 8040c5a:	615a      	str	r2, [r3, #20]
 8040c5c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040c5e:	1d3b      	adds	r3, r7, #4
 8040c60:	2200      	movs	r2, #0
 8040c62:	601a      	str	r2, [r3, #0]
 8040c64:	605a      	str	r2, [r3, #4]
 8040c66:	609a      	str	r2, [r3, #8]
 8040c68:	60da      	str	r2, [r3, #12]
 8040c6a:	611a      	str	r2, [r3, #16]
 8040c6c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8040c6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8040c72:	f7ff fdb9 	bl	80407e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8040c76:	2001      	movs	r0, #1
 8040c78:	f7ff fd9e 	bl	80407b8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8040c7c:	230c      	movs	r3, #12
 8040c7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8040c80:	2302      	movs	r3, #2
 8040c82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8040c84:	2303      	movs	r3, #3
 8040c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8040c88:	2300      	movs	r3, #0
 8040c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8040c8c:	2300      	movs	r3, #0
 8040c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8040c90:	2307      	movs	r3, #7
 8040c92:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040c94:	1d3b      	adds	r3, r7, #4
 8040c96:	4619      	mov	r1, r3
 8040c98:	4810      	ldr	r0, [pc, #64]	; (8040cdc <MX_USART2_UART_Init+0x98>)
 8040c9a:	f000 fbc7 	bl	804142c <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8040c9e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8040ca2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8040ca4:	2300      	movs	r3, #0
 8040ca6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8040ca8:	2300      	movs	r3, #0
 8040caa:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8040cac:	2300      	movs	r3, #0
 8040cae:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8040cb0:	230c      	movs	r3, #12
 8040cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8040cb4:	2300      	movs	r3, #0
 8040cb6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8040cb8:	2300      	movs	r3, #0
 8040cba:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8040cbc:	f107 031c 	add.w	r3, r7, #28
 8040cc0:	4619      	mov	r1, r3
 8040cc2:	4807      	ldr	r0, [pc, #28]	; (8040ce0 <MX_USART2_UART_Init+0x9c>)
 8040cc4:	f000 ffc6 	bl	8041c54 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8040cc8:	4805      	ldr	r0, [pc, #20]	; (8040ce0 <MX_USART2_UART_Init+0x9c>)
 8040cca:	f7ff fe41 	bl	8040950 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8040cce:	4804      	ldr	r0, [pc, #16]	; (8040ce0 <MX_USART2_UART_Init+0x9c>)
 8040cd0:	f7ff fe2e 	bl	8040930 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8040cd4:	bf00      	nop
 8040cd6:	3738      	adds	r7, #56	; 0x38
 8040cd8:	46bd      	mov	sp, r7
 8040cda:	bd80      	pop	{r7, pc}
 8040cdc:	40020000 	.word	0x40020000
 8040ce0:	40004400 	.word	0x40004400

08040ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040ce4:	b580      	push	{r7, lr}
 8040ce6:	b088      	sub	sp, #32
 8040ce8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8040cea:	f107 0318 	add.w	r3, r7, #24
 8040cee:	2200      	movs	r2, #0
 8040cf0:	601a      	str	r2, [r3, #0]
 8040cf2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040cf4:	463b      	mov	r3, r7
 8040cf6:	2200      	movs	r2, #0
 8040cf8:	601a      	str	r2, [r3, #0]
 8040cfa:	605a      	str	r2, [r3, #4]
 8040cfc:	609a      	str	r2, [r3, #8]
 8040cfe:	60da      	str	r2, [r3, #12]
 8040d00:	611a      	str	r2, [r3, #16]
 8040d02:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8040d04:	2004      	movs	r0, #4
 8040d06:	f7ff fd57 	bl	80407b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8040d0a:	2080      	movs	r0, #128	; 0x80
 8040d0c:	f7ff fd54 	bl	80407b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8040d10:	2001      	movs	r0, #1
 8040d12:	f7ff fd51 	bl	80407b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8040d16:	2002      	movs	r0, #2
 8040d18:	f7ff fd4e 	bl	80407b8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8040d1c:	2120      	movs	r1, #32
 8040d1e:	481a      	ldr	r0, [pc, #104]	; (8040d88 <MX_GPIO_Init+0xa4>)
 8040d20:	f7ff fec1 	bl	8040aa6 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8040d24:	4919      	ldr	r1, [pc, #100]	; (8040d8c <MX_GPIO_Init+0xa8>)
 8040d26:	2002      	movs	r0, #2
 8040d28:	f7ff fd8e 	bl	8040848 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8040d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8040d30:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8040d32:	2301      	movs	r3, #1
 8040d34:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8040d36:	2300      	movs	r3, #0
 8040d38:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8040d3a:	2302      	movs	r3, #2
 8040d3c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8040d3e:	f107 0318 	add.w	r3, r7, #24
 8040d42:	4618      	mov	r0, r3
 8040d44:	f000 f9ec 	bl	8041120 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8040d48:	2200      	movs	r2, #0
 8040d4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040d4e:	4810      	ldr	r0, [pc, #64]	; (8040d90 <MX_GPIO_Init+0xac>)
 8040d50:	f7ff fe65 	bl	8040a1e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8040d54:	2200      	movs	r2, #0
 8040d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040d5a:	480d      	ldr	r0, [pc, #52]	; (8040d90 <MX_GPIO_Init+0xac>)
 8040d5c:	f7ff fe30 	bl	80409c0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8040d60:	2320      	movs	r3, #32
 8040d62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8040d64:	2301      	movs	r3, #1
 8040d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8040d68:	2300      	movs	r3, #0
 8040d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8040d6c:	2300      	movs	r3, #0
 8040d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8040d70:	2300      	movs	r3, #0
 8040d72:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8040d74:	463b      	mov	r3, r7
 8040d76:	4619      	mov	r1, r3
 8040d78:	4803      	ldr	r0, [pc, #12]	; (8040d88 <MX_GPIO_Init+0xa4>)
 8040d7a:	f000 fb57 	bl	804142c <LL_GPIO_Init>

}
 8040d7e:	bf00      	nop
 8040d80:	3720      	adds	r7, #32
 8040d82:	46bd      	mov	sp, r7
 8040d84:	bd80      	pop	{r7, pc}
 8040d86:	bf00      	nop
 8040d88:	40020000 	.word	0x40020000
 8040d8c:	00f00003 	.word	0x00f00003
 8040d90:	40020800 	.word	0x40020800

08040d94 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8040d94:	b580      	push	{r7, lr}
 8040d96:	b082      	sub	sp, #8
 8040d98:	af00      	add	r7, sp, #0
 8040d9a:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 LL_USART_TransmitData8(USART2, ch);
 8040d9c:	687b      	ldr	r3, [r7, #4]
 8040d9e:	b2db      	uxtb	r3, r3
 8040da0:	4619      	mov	r1, r3
 8040da2:	4807      	ldr	r0, [pc, #28]	; (8040dc0 <__io_putchar+0x2c>)
 8040da4:	f7ff fdfd 	bl	80409a2 <LL_USART_TransmitData8>
 while (!LL_USART_IsActiveFlag_TC(USART2));
 8040da8:	bf00      	nop
 8040daa:	4805      	ldr	r0, [pc, #20]	; (8040dc0 <__io_putchar+0x2c>)
 8040dac:	f7ff fde6 	bl	804097c <LL_USART_IsActiveFlag_TC>
 8040db0:	4603      	mov	r3, r0
 8040db2:	2b00      	cmp	r3, #0
 8040db4:	d0f9      	beq.n	8040daa <__io_putchar+0x16>
 return(ch);
 8040db6:	687b      	ldr	r3, [r7, #4]
}
 8040db8:	4618      	mov	r0, r3
 8040dba:	3708      	adds	r7, #8
 8040dbc:	46bd      	mov	sp, r7
 8040dbe:	bd80      	pop	{r7, pc}
 8040dc0:	40004400 	.word	0x40004400

08040dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040dc4:	b480      	push	{r7}
 8040dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040dc8:	e7fe      	b.n	8040dc8 <NMI_Handler+0x4>

08040dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040dca:	b480      	push	{r7}
 8040dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040dce:	e7fe      	b.n	8040dce <HardFault_Handler+0x4>

08040dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040dd0:	b480      	push	{r7}
 8040dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040dd4:	e7fe      	b.n	8040dd4 <MemManage_Handler+0x4>

08040dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040dd6:	b480      	push	{r7}
 8040dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040dda:	e7fe      	b.n	8040dda <BusFault_Handler+0x4>

08040ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040ddc:	b480      	push	{r7}
 8040dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040de0:	e7fe      	b.n	8040de0 <UsageFault_Handler+0x4>

08040de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040de2:	b480      	push	{r7}
 8040de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040de6:	bf00      	nop
 8040de8:	46bd      	mov	sp, r7
 8040dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dee:	4770      	bx	lr

08040df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040df0:	b480      	push	{r7}
 8040df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040df4:	bf00      	nop
 8040df6:	46bd      	mov	sp, r7
 8040df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dfc:	4770      	bx	lr

08040dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040dfe:	b480      	push	{r7}
 8040e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040e02:	bf00      	nop
 8040e04:	46bd      	mov	sp, r7
 8040e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e0a:	4770      	bx	lr

08040e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040e0c:	b480      	push	{r7}
 8040e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  systick_count++;
 8040e10:	4b04      	ldr	r3, [pc, #16]	; (8040e24 <SysTick_Handler+0x18>)
 8040e12:	681b      	ldr	r3, [r3, #0]
 8040e14:	3301      	adds	r3, #1
 8040e16:	4a03      	ldr	r2, [pc, #12]	; (8040e24 <SysTick_Handler+0x18>)
 8040e18:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040e1a:	bf00      	nop
 8040e1c:	46bd      	mov	sp, r7
 8040e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e22:	4770      	bx	lr
 8040e24:	20000084 	.word	0x20000084

08040e28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040e28:	b580      	push	{r7, lr}
 8040e2a:	b086      	sub	sp, #24
 8040e2c:	af00      	add	r7, sp, #0
 8040e2e:	60f8      	str	r0, [r7, #12]
 8040e30:	60b9      	str	r1, [r7, #8]
 8040e32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e34:	2300      	movs	r3, #0
 8040e36:	617b      	str	r3, [r7, #20]
 8040e38:	e00a      	b.n	8040e50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8040e3a:	f3af 8000 	nop.w
 8040e3e:	4601      	mov	r1, r0
 8040e40:	68bb      	ldr	r3, [r7, #8]
 8040e42:	1c5a      	adds	r2, r3, #1
 8040e44:	60ba      	str	r2, [r7, #8]
 8040e46:	b2ca      	uxtb	r2, r1
 8040e48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e4a:	697b      	ldr	r3, [r7, #20]
 8040e4c:	3301      	adds	r3, #1
 8040e4e:	617b      	str	r3, [r7, #20]
 8040e50:	697a      	ldr	r2, [r7, #20]
 8040e52:	687b      	ldr	r3, [r7, #4]
 8040e54:	429a      	cmp	r2, r3
 8040e56:	dbf0      	blt.n	8040e3a <_read+0x12>
	}

return len;
 8040e58:	687b      	ldr	r3, [r7, #4]
}
 8040e5a:	4618      	mov	r0, r3
 8040e5c:	3718      	adds	r7, #24
 8040e5e:	46bd      	mov	sp, r7
 8040e60:	bd80      	pop	{r7, pc}

08040e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040e62:	b580      	push	{r7, lr}
 8040e64:	b086      	sub	sp, #24
 8040e66:	af00      	add	r7, sp, #0
 8040e68:	60f8      	str	r0, [r7, #12]
 8040e6a:	60b9      	str	r1, [r7, #8]
 8040e6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e6e:	2300      	movs	r3, #0
 8040e70:	617b      	str	r3, [r7, #20]
 8040e72:	e009      	b.n	8040e88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8040e74:	68bb      	ldr	r3, [r7, #8]
 8040e76:	1c5a      	adds	r2, r3, #1
 8040e78:	60ba      	str	r2, [r7, #8]
 8040e7a:	781b      	ldrb	r3, [r3, #0]
 8040e7c:	4618      	mov	r0, r3
 8040e7e:	f7ff ff89 	bl	8040d94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040e82:	697b      	ldr	r3, [r7, #20]
 8040e84:	3301      	adds	r3, #1
 8040e86:	617b      	str	r3, [r7, #20]
 8040e88:	697a      	ldr	r2, [r7, #20]
 8040e8a:	687b      	ldr	r3, [r7, #4]
 8040e8c:	429a      	cmp	r2, r3
 8040e8e:	dbf1      	blt.n	8040e74 <_write+0x12>
	}
	return len;
 8040e90:	687b      	ldr	r3, [r7, #4]
}
 8040e92:	4618      	mov	r0, r3
 8040e94:	3718      	adds	r7, #24
 8040e96:	46bd      	mov	sp, r7
 8040e98:	bd80      	pop	{r7, pc}

08040e9a <_close>:

int _close(int file)
{
 8040e9a:	b480      	push	{r7}
 8040e9c:	b083      	sub	sp, #12
 8040e9e:	af00      	add	r7, sp, #0
 8040ea0:	6078      	str	r0, [r7, #4]
	return -1;
 8040ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8040ea6:	4618      	mov	r0, r3
 8040ea8:	370c      	adds	r7, #12
 8040eaa:	46bd      	mov	sp, r7
 8040eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040eb0:	4770      	bx	lr

08040eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040eb2:	b480      	push	{r7}
 8040eb4:	b083      	sub	sp, #12
 8040eb6:	af00      	add	r7, sp, #0
 8040eb8:	6078      	str	r0, [r7, #4]
 8040eba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8040ebc:	683b      	ldr	r3, [r7, #0]
 8040ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040ec2:	605a      	str	r2, [r3, #4]
	return 0;
 8040ec4:	2300      	movs	r3, #0
}
 8040ec6:	4618      	mov	r0, r3
 8040ec8:	370c      	adds	r7, #12
 8040eca:	46bd      	mov	sp, r7
 8040ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ed0:	4770      	bx	lr

08040ed2 <_isatty>:

int _isatty(int file)
{
 8040ed2:	b480      	push	{r7}
 8040ed4:	b083      	sub	sp, #12
 8040ed6:	af00      	add	r7, sp, #0
 8040ed8:	6078      	str	r0, [r7, #4]
	return 1;
 8040eda:	2301      	movs	r3, #1
}
 8040edc:	4618      	mov	r0, r3
 8040ede:	370c      	adds	r7, #12
 8040ee0:	46bd      	mov	sp, r7
 8040ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ee6:	4770      	bx	lr

08040ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040ee8:	b480      	push	{r7}
 8040eea:	b085      	sub	sp, #20
 8040eec:	af00      	add	r7, sp, #0
 8040eee:	60f8      	str	r0, [r7, #12]
 8040ef0:	60b9      	str	r1, [r7, #8]
 8040ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8040ef4:	2300      	movs	r3, #0
}
 8040ef6:	4618      	mov	r0, r3
 8040ef8:	3714      	adds	r7, #20
 8040efa:	46bd      	mov	sp, r7
 8040efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f00:	4770      	bx	lr
	...

08040f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040f04:	b580      	push	{r7, lr}
 8040f06:	b086      	sub	sp, #24
 8040f08:	af00      	add	r7, sp, #0
 8040f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040f0c:	4a14      	ldr	r2, [pc, #80]	; (8040f60 <_sbrk+0x5c>)
 8040f0e:	4b15      	ldr	r3, [pc, #84]	; (8040f64 <_sbrk+0x60>)
 8040f10:	1ad3      	subs	r3, r2, r3
 8040f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040f14:	697b      	ldr	r3, [r7, #20]
 8040f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040f18:	4b13      	ldr	r3, [pc, #76]	; (8040f68 <_sbrk+0x64>)
 8040f1a:	681b      	ldr	r3, [r3, #0]
 8040f1c:	2b00      	cmp	r3, #0
 8040f1e:	d102      	bne.n	8040f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040f20:	4b11      	ldr	r3, [pc, #68]	; (8040f68 <_sbrk+0x64>)
 8040f22:	4a12      	ldr	r2, [pc, #72]	; (8040f6c <_sbrk+0x68>)
 8040f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040f26:	4b10      	ldr	r3, [pc, #64]	; (8040f68 <_sbrk+0x64>)
 8040f28:	681a      	ldr	r2, [r3, #0]
 8040f2a:	687b      	ldr	r3, [r7, #4]
 8040f2c:	4413      	add	r3, r2
 8040f2e:	693a      	ldr	r2, [r7, #16]
 8040f30:	429a      	cmp	r2, r3
 8040f32:	d207      	bcs.n	8040f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040f34:	f000 ff2a 	bl	8041d8c <__errno>
 8040f38:	4603      	mov	r3, r0
 8040f3a:	220c      	movs	r2, #12
 8040f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8040f42:	e009      	b.n	8040f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040f44:	4b08      	ldr	r3, [pc, #32]	; (8040f68 <_sbrk+0x64>)
 8040f46:	681b      	ldr	r3, [r3, #0]
 8040f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040f4a:	4b07      	ldr	r3, [pc, #28]	; (8040f68 <_sbrk+0x64>)
 8040f4c:	681a      	ldr	r2, [r3, #0]
 8040f4e:	687b      	ldr	r3, [r7, #4]
 8040f50:	4413      	add	r3, r2
 8040f52:	4a05      	ldr	r2, [pc, #20]	; (8040f68 <_sbrk+0x64>)
 8040f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040f56:	68fb      	ldr	r3, [r7, #12]
}
 8040f58:	4618      	mov	r0, r3
 8040f5a:	3718      	adds	r7, #24
 8040f5c:	46bd      	mov	sp, r7
 8040f5e:	bd80      	pop	{r7, pc}
 8040f60:	20020000 	.word	0x20020000
 8040f64:	00000400 	.word	0x00000400
 8040f68:	2000008c 	.word	0x2000008c
 8040f6c:	200000a0 	.word	0x200000a0

08040f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8040f70:	b480      	push	{r7}
 8040f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8040f74:	4b07      	ldr	r3, [pc, #28]	; (8040f94 <SystemInit+0x24>)
 8040f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040f7a:	4a06      	ldr	r2, [pc, #24]	; (8040f94 <SystemInit+0x24>)
 8040f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8040f84:	4b03      	ldr	r3, [pc, #12]	; (8040f94 <SystemInit+0x24>)
 8040f86:	4a04      	ldr	r2, [pc, #16]	; (8040f98 <SystemInit+0x28>)
 8040f88:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8040f8a:	bf00      	nop
 8040f8c:	46bd      	mov	sp, r7
 8040f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f92:	4770      	bx	lr
 8040f94:	e000ed00 	.word	0xe000ed00
 8040f98:	08040000 	.word	0x08040000

08040f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8040f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8040fa0:	480d      	ldr	r0, [pc, #52]	; (8040fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8040fa2:	490e      	ldr	r1, [pc, #56]	; (8040fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8040fa4:	4a0e      	ldr	r2, [pc, #56]	; (8040fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8040fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040fa8:	e002      	b.n	8040fb0 <LoopCopyDataInit>

08040faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040fae:	3304      	adds	r3, #4

08040fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040fb4:	d3f9      	bcc.n	8040faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040fb6:	4a0b      	ldr	r2, [pc, #44]	; (8040fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8040fb8:	4c0b      	ldr	r4, [pc, #44]	; (8040fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8040fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040fbc:	e001      	b.n	8040fc2 <LoopFillZerobss>

08040fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040fc0:	3204      	adds	r2, #4

08040fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040fc4:	d3fb      	bcc.n	8040fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8040fc6:	f7ff ffd3 	bl	8040f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040fca:	f000 fee5 	bl	8041d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040fce:	f7ff fdab 	bl	8040b28 <main>
  bx  lr    
 8040fd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8040fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8040fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040fdc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8040fe0:	08042dfc 	.word	0x08042dfc
  ldr r2, =_sbss
 8040fe4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8040fe8:	200000a0 	.word	0x200000a0

08040fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040fec:	e7fe      	b.n	8040fec <ADC_IRQHandler>
	...

08040ff0 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8040ff0:	b480      	push	{r7}
 8040ff2:	b083      	sub	sp, #12
 8040ff4:	af00      	add	r7, sp, #0
 8040ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8040ff8:	4b05      	ldr	r3, [pc, #20]	; (8041010 <LL_EXTI_EnableIT_0_31+0x20>)
 8040ffa:	681a      	ldr	r2, [r3, #0]
 8040ffc:	4904      	ldr	r1, [pc, #16]	; (8041010 <LL_EXTI_EnableIT_0_31+0x20>)
 8040ffe:	687b      	ldr	r3, [r7, #4]
 8041000:	4313      	orrs	r3, r2
 8041002:	600b      	str	r3, [r1, #0]
}
 8041004:	bf00      	nop
 8041006:	370c      	adds	r7, #12
 8041008:	46bd      	mov	sp, r7
 804100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804100e:	4770      	bx	lr
 8041010:	40013c00 	.word	0x40013c00

08041014 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8041014:	b480      	push	{r7}
 8041016:	b083      	sub	sp, #12
 8041018:	af00      	add	r7, sp, #0
 804101a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 804101c:	4b06      	ldr	r3, [pc, #24]	; (8041038 <LL_EXTI_DisableIT_0_31+0x24>)
 804101e:	681a      	ldr	r2, [r3, #0]
 8041020:	687b      	ldr	r3, [r7, #4]
 8041022:	43db      	mvns	r3, r3
 8041024:	4904      	ldr	r1, [pc, #16]	; (8041038 <LL_EXTI_DisableIT_0_31+0x24>)
 8041026:	4013      	ands	r3, r2
 8041028:	600b      	str	r3, [r1, #0]
}
 804102a:	bf00      	nop
 804102c:	370c      	adds	r7, #12
 804102e:	46bd      	mov	sp, r7
 8041030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041034:	4770      	bx	lr
 8041036:	bf00      	nop
 8041038:	40013c00 	.word	0x40013c00

0804103c <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 804103c:	b480      	push	{r7}
 804103e:	b083      	sub	sp, #12
 8041040:	af00      	add	r7, sp, #0
 8041042:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8041044:	4b05      	ldr	r3, [pc, #20]	; (804105c <LL_EXTI_EnableEvent_0_31+0x20>)
 8041046:	685a      	ldr	r2, [r3, #4]
 8041048:	4904      	ldr	r1, [pc, #16]	; (804105c <LL_EXTI_EnableEvent_0_31+0x20>)
 804104a:	687b      	ldr	r3, [r7, #4]
 804104c:	4313      	orrs	r3, r2
 804104e:	604b      	str	r3, [r1, #4]

}
 8041050:	bf00      	nop
 8041052:	370c      	adds	r7, #12
 8041054:	46bd      	mov	sp, r7
 8041056:	f85d 7b04 	ldr.w	r7, [sp], #4
 804105a:	4770      	bx	lr
 804105c:	40013c00 	.word	0x40013c00

08041060 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8041060:	b480      	push	{r7}
 8041062:	b083      	sub	sp, #12
 8041064:	af00      	add	r7, sp, #0
 8041066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8041068:	4b06      	ldr	r3, [pc, #24]	; (8041084 <LL_EXTI_DisableEvent_0_31+0x24>)
 804106a:	685a      	ldr	r2, [r3, #4]
 804106c:	687b      	ldr	r3, [r7, #4]
 804106e:	43db      	mvns	r3, r3
 8041070:	4904      	ldr	r1, [pc, #16]	; (8041084 <LL_EXTI_DisableEvent_0_31+0x24>)
 8041072:	4013      	ands	r3, r2
 8041074:	604b      	str	r3, [r1, #4]
}
 8041076:	bf00      	nop
 8041078:	370c      	adds	r7, #12
 804107a:	46bd      	mov	sp, r7
 804107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041080:	4770      	bx	lr
 8041082:	bf00      	nop
 8041084:	40013c00 	.word	0x40013c00

08041088 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8041088:	b480      	push	{r7}
 804108a:	b083      	sub	sp, #12
 804108c:	af00      	add	r7, sp, #0
 804108e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8041090:	4b05      	ldr	r3, [pc, #20]	; (80410a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8041092:	689a      	ldr	r2, [r3, #8]
 8041094:	4904      	ldr	r1, [pc, #16]	; (80410a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8041096:	687b      	ldr	r3, [r7, #4]
 8041098:	4313      	orrs	r3, r2
 804109a:	608b      	str	r3, [r1, #8]

}
 804109c:	bf00      	nop
 804109e:	370c      	adds	r7, #12
 80410a0:	46bd      	mov	sp, r7
 80410a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410a6:	4770      	bx	lr
 80410a8:	40013c00 	.word	0x40013c00

080410ac <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80410ac:	b480      	push	{r7}
 80410ae:	b083      	sub	sp, #12
 80410b0:	af00      	add	r7, sp, #0
 80410b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80410b4:	4b06      	ldr	r3, [pc, #24]	; (80410d0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80410b6:	689a      	ldr	r2, [r3, #8]
 80410b8:	687b      	ldr	r3, [r7, #4]
 80410ba:	43db      	mvns	r3, r3
 80410bc:	4904      	ldr	r1, [pc, #16]	; (80410d0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80410be:	4013      	ands	r3, r2
 80410c0:	608b      	str	r3, [r1, #8]

}
 80410c2:	bf00      	nop
 80410c4:	370c      	adds	r7, #12
 80410c6:	46bd      	mov	sp, r7
 80410c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410cc:	4770      	bx	lr
 80410ce:	bf00      	nop
 80410d0:	40013c00 	.word	0x40013c00

080410d4 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80410d4:	b480      	push	{r7}
 80410d6:	b083      	sub	sp, #12
 80410d8:	af00      	add	r7, sp, #0
 80410da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80410dc:	4b05      	ldr	r3, [pc, #20]	; (80410f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80410de:	68da      	ldr	r2, [r3, #12]
 80410e0:	4904      	ldr	r1, [pc, #16]	; (80410f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80410e2:	687b      	ldr	r3, [r7, #4]
 80410e4:	4313      	orrs	r3, r2
 80410e6:	60cb      	str	r3, [r1, #12]
}
 80410e8:	bf00      	nop
 80410ea:	370c      	adds	r7, #12
 80410ec:	46bd      	mov	sp, r7
 80410ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410f2:	4770      	bx	lr
 80410f4:	40013c00 	.word	0x40013c00

080410f8 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80410f8:	b480      	push	{r7}
 80410fa:	b083      	sub	sp, #12
 80410fc:	af00      	add	r7, sp, #0
 80410fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8041100:	4b06      	ldr	r3, [pc, #24]	; (804111c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8041102:	68da      	ldr	r2, [r3, #12]
 8041104:	687b      	ldr	r3, [r7, #4]
 8041106:	43db      	mvns	r3, r3
 8041108:	4904      	ldr	r1, [pc, #16]	; (804111c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 804110a:	4013      	ands	r3, r2
 804110c:	60cb      	str	r3, [r1, #12]
}
 804110e:	bf00      	nop
 8041110:	370c      	adds	r7, #12
 8041112:	46bd      	mov	sp, r7
 8041114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041118:	4770      	bx	lr
 804111a:	bf00      	nop
 804111c:	40013c00 	.word	0x40013c00

08041120 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8041120:	b580      	push	{r7, lr}
 8041122:	b084      	sub	sp, #16
 8041124:	af00      	add	r7, sp, #0
 8041126:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8041128:	2300      	movs	r3, #0
 804112a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 804112c:	687b      	ldr	r3, [r7, #4]
 804112e:	791b      	ldrb	r3, [r3, #4]
 8041130:	2b00      	cmp	r3, #0
 8041132:	d065      	beq.n	8041200 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8041134:	687b      	ldr	r3, [r7, #4]
 8041136:	681b      	ldr	r3, [r3, #0]
 8041138:	2b00      	cmp	r3, #0
 804113a:	d06c      	beq.n	8041216 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 804113c:	687b      	ldr	r3, [r7, #4]
 804113e:	795b      	ldrb	r3, [r3, #5]
 8041140:	2b02      	cmp	r3, #2
 8041142:	d01c      	beq.n	804117e <LL_EXTI_Init+0x5e>
 8041144:	2b02      	cmp	r3, #2
 8041146:	dc25      	bgt.n	8041194 <LL_EXTI_Init+0x74>
 8041148:	2b00      	cmp	r3, #0
 804114a:	d002      	beq.n	8041152 <LL_EXTI_Init+0x32>
 804114c:	2b01      	cmp	r3, #1
 804114e:	d00b      	beq.n	8041168 <LL_EXTI_Init+0x48>
 8041150:	e020      	b.n	8041194 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8041152:	687b      	ldr	r3, [r7, #4]
 8041154:	681b      	ldr	r3, [r3, #0]
 8041156:	4618      	mov	r0, r3
 8041158:	f7ff ff82 	bl	8041060 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 804115c:	687b      	ldr	r3, [r7, #4]
 804115e:	681b      	ldr	r3, [r3, #0]
 8041160:	4618      	mov	r0, r3
 8041162:	f7ff ff45 	bl	8040ff0 <LL_EXTI_EnableIT_0_31>
          break;
 8041166:	e018      	b.n	804119a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8041168:	687b      	ldr	r3, [r7, #4]
 804116a:	681b      	ldr	r3, [r3, #0]
 804116c:	4618      	mov	r0, r3
 804116e:	f7ff ff51 	bl	8041014 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8041172:	687b      	ldr	r3, [r7, #4]
 8041174:	681b      	ldr	r3, [r3, #0]
 8041176:	4618      	mov	r0, r3
 8041178:	f7ff ff60 	bl	804103c <LL_EXTI_EnableEvent_0_31>
          break;
 804117c:	e00d      	b.n	804119a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 804117e:	687b      	ldr	r3, [r7, #4]
 8041180:	681b      	ldr	r3, [r3, #0]
 8041182:	4618      	mov	r0, r3
 8041184:	f7ff ff34 	bl	8040ff0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8041188:	687b      	ldr	r3, [r7, #4]
 804118a:	681b      	ldr	r3, [r3, #0]
 804118c:	4618      	mov	r0, r3
 804118e:	f7ff ff55 	bl	804103c <LL_EXTI_EnableEvent_0_31>
          break;
 8041192:	e002      	b.n	804119a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8041194:	2301      	movs	r3, #1
 8041196:	73fb      	strb	r3, [r7, #15]
          break;
 8041198:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 804119a:	687b      	ldr	r3, [r7, #4]
 804119c:	799b      	ldrb	r3, [r3, #6]
 804119e:	2b00      	cmp	r3, #0
 80411a0:	d039      	beq.n	8041216 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80411a2:	687b      	ldr	r3, [r7, #4]
 80411a4:	799b      	ldrb	r3, [r3, #6]
 80411a6:	2b03      	cmp	r3, #3
 80411a8:	d01c      	beq.n	80411e4 <LL_EXTI_Init+0xc4>
 80411aa:	2b03      	cmp	r3, #3
 80411ac:	dc25      	bgt.n	80411fa <LL_EXTI_Init+0xda>
 80411ae:	2b01      	cmp	r3, #1
 80411b0:	d002      	beq.n	80411b8 <LL_EXTI_Init+0x98>
 80411b2:	2b02      	cmp	r3, #2
 80411b4:	d00b      	beq.n	80411ce <LL_EXTI_Init+0xae>
 80411b6:	e020      	b.n	80411fa <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80411b8:	687b      	ldr	r3, [r7, #4]
 80411ba:	681b      	ldr	r3, [r3, #0]
 80411bc:	4618      	mov	r0, r3
 80411be:	f7ff ff9b 	bl	80410f8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80411c2:	687b      	ldr	r3, [r7, #4]
 80411c4:	681b      	ldr	r3, [r3, #0]
 80411c6:	4618      	mov	r0, r3
 80411c8:	f7ff ff5e 	bl	8041088 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80411cc:	e024      	b.n	8041218 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80411ce:	687b      	ldr	r3, [r7, #4]
 80411d0:	681b      	ldr	r3, [r3, #0]
 80411d2:	4618      	mov	r0, r3
 80411d4:	f7ff ff6a 	bl	80410ac <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80411d8:	687b      	ldr	r3, [r7, #4]
 80411da:	681b      	ldr	r3, [r3, #0]
 80411dc:	4618      	mov	r0, r3
 80411de:	f7ff ff79 	bl	80410d4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80411e2:	e019      	b.n	8041218 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80411e4:	687b      	ldr	r3, [r7, #4]
 80411e6:	681b      	ldr	r3, [r3, #0]
 80411e8:	4618      	mov	r0, r3
 80411ea:	f7ff ff4d 	bl	8041088 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80411ee:	687b      	ldr	r3, [r7, #4]
 80411f0:	681b      	ldr	r3, [r3, #0]
 80411f2:	4618      	mov	r0, r3
 80411f4:	f7ff ff6e 	bl	80410d4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80411f8:	e00e      	b.n	8041218 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80411fa:	2301      	movs	r3, #1
 80411fc:	73fb      	strb	r3, [r7, #15]
            break;
 80411fe:	e00b      	b.n	8041218 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8041200:	687b      	ldr	r3, [r7, #4]
 8041202:	681b      	ldr	r3, [r3, #0]
 8041204:	4618      	mov	r0, r3
 8041206:	f7ff ff05 	bl	8041014 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 804120a:	687b      	ldr	r3, [r7, #4]
 804120c:	681b      	ldr	r3, [r3, #0]
 804120e:	4618      	mov	r0, r3
 8041210:	f7ff ff26 	bl	8041060 <LL_EXTI_DisableEvent_0_31>
 8041214:	e000      	b.n	8041218 <LL_EXTI_Init+0xf8>
      }
 8041216:	bf00      	nop
  }
  return status;
 8041218:	7bfb      	ldrb	r3, [r7, #15]
}
 804121a:	4618      	mov	r0, r3
 804121c:	3710      	adds	r7, #16
 804121e:	46bd      	mov	sp, r7
 8041220:	bd80      	pop	{r7, pc}

08041222 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8041222:	b480      	push	{r7}
 8041224:	b089      	sub	sp, #36	; 0x24
 8041226:	af00      	add	r7, sp, #0
 8041228:	60f8      	str	r0, [r7, #12]
 804122a:	60b9      	str	r1, [r7, #8]
 804122c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 804122e:	68fb      	ldr	r3, [r7, #12]
 8041230:	681a      	ldr	r2, [r3, #0]
 8041232:	68bb      	ldr	r3, [r7, #8]
 8041234:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041236:	697b      	ldr	r3, [r7, #20]
 8041238:	fa93 f3a3 	rbit	r3, r3
 804123c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 804123e:	693b      	ldr	r3, [r7, #16]
 8041240:	fab3 f383 	clz	r3, r3
 8041244:	b2db      	uxtb	r3, r3
 8041246:	005b      	lsls	r3, r3, #1
 8041248:	2103      	movs	r1, #3
 804124a:	fa01 f303 	lsl.w	r3, r1, r3
 804124e:	43db      	mvns	r3, r3
 8041250:	401a      	ands	r2, r3
 8041252:	68bb      	ldr	r3, [r7, #8]
 8041254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041256:	69fb      	ldr	r3, [r7, #28]
 8041258:	fa93 f3a3 	rbit	r3, r3
 804125c:	61bb      	str	r3, [r7, #24]
  return result;
 804125e:	69bb      	ldr	r3, [r7, #24]
 8041260:	fab3 f383 	clz	r3, r3
 8041264:	b2db      	uxtb	r3, r3
 8041266:	005b      	lsls	r3, r3, #1
 8041268:	6879      	ldr	r1, [r7, #4]
 804126a:	fa01 f303 	lsl.w	r3, r1, r3
 804126e:	431a      	orrs	r2, r3
 8041270:	68fb      	ldr	r3, [r7, #12]
 8041272:	601a      	str	r2, [r3, #0]
}
 8041274:	bf00      	nop
 8041276:	3724      	adds	r7, #36	; 0x24
 8041278:	46bd      	mov	sp, r7
 804127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804127e:	4770      	bx	lr

08041280 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8041280:	b480      	push	{r7}
 8041282:	b085      	sub	sp, #20
 8041284:	af00      	add	r7, sp, #0
 8041286:	60f8      	str	r0, [r7, #12]
 8041288:	60b9      	str	r1, [r7, #8]
 804128a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 804128c:	68fb      	ldr	r3, [r7, #12]
 804128e:	685a      	ldr	r2, [r3, #4]
 8041290:	68bb      	ldr	r3, [r7, #8]
 8041292:	43db      	mvns	r3, r3
 8041294:	401a      	ands	r2, r3
 8041296:	68bb      	ldr	r3, [r7, #8]
 8041298:	6879      	ldr	r1, [r7, #4]
 804129a:	fb01 f303 	mul.w	r3, r1, r3
 804129e:	431a      	orrs	r2, r3
 80412a0:	68fb      	ldr	r3, [r7, #12]
 80412a2:	605a      	str	r2, [r3, #4]
}
 80412a4:	bf00      	nop
 80412a6:	3714      	adds	r7, #20
 80412a8:	46bd      	mov	sp, r7
 80412aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412ae:	4770      	bx	lr

080412b0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80412b0:	b480      	push	{r7}
 80412b2:	b089      	sub	sp, #36	; 0x24
 80412b4:	af00      	add	r7, sp, #0
 80412b6:	60f8      	str	r0, [r7, #12]
 80412b8:	60b9      	str	r1, [r7, #8]
 80412ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80412bc:	68fb      	ldr	r3, [r7, #12]
 80412be:	689a      	ldr	r2, [r3, #8]
 80412c0:	68bb      	ldr	r3, [r7, #8]
 80412c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80412c4:	697b      	ldr	r3, [r7, #20]
 80412c6:	fa93 f3a3 	rbit	r3, r3
 80412ca:	613b      	str	r3, [r7, #16]
  return result;
 80412cc:	693b      	ldr	r3, [r7, #16]
 80412ce:	fab3 f383 	clz	r3, r3
 80412d2:	b2db      	uxtb	r3, r3
 80412d4:	005b      	lsls	r3, r3, #1
 80412d6:	2103      	movs	r1, #3
 80412d8:	fa01 f303 	lsl.w	r3, r1, r3
 80412dc:	43db      	mvns	r3, r3
 80412de:	401a      	ands	r2, r3
 80412e0:	68bb      	ldr	r3, [r7, #8]
 80412e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80412e4:	69fb      	ldr	r3, [r7, #28]
 80412e6:	fa93 f3a3 	rbit	r3, r3
 80412ea:	61bb      	str	r3, [r7, #24]
  return result;
 80412ec:	69bb      	ldr	r3, [r7, #24]
 80412ee:	fab3 f383 	clz	r3, r3
 80412f2:	b2db      	uxtb	r3, r3
 80412f4:	005b      	lsls	r3, r3, #1
 80412f6:	6879      	ldr	r1, [r7, #4]
 80412f8:	fa01 f303 	lsl.w	r3, r1, r3
 80412fc:	431a      	orrs	r2, r3
 80412fe:	68fb      	ldr	r3, [r7, #12]
 8041300:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8041302:	bf00      	nop
 8041304:	3724      	adds	r7, #36	; 0x24
 8041306:	46bd      	mov	sp, r7
 8041308:	f85d 7b04 	ldr.w	r7, [sp], #4
 804130c:	4770      	bx	lr

0804130e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 804130e:	b480      	push	{r7}
 8041310:	b089      	sub	sp, #36	; 0x24
 8041312:	af00      	add	r7, sp, #0
 8041314:	60f8      	str	r0, [r7, #12]
 8041316:	60b9      	str	r1, [r7, #8]
 8041318:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 804131a:	68fb      	ldr	r3, [r7, #12]
 804131c:	68da      	ldr	r2, [r3, #12]
 804131e:	68bb      	ldr	r3, [r7, #8]
 8041320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041322:	697b      	ldr	r3, [r7, #20]
 8041324:	fa93 f3a3 	rbit	r3, r3
 8041328:	613b      	str	r3, [r7, #16]
  return result;
 804132a:	693b      	ldr	r3, [r7, #16]
 804132c:	fab3 f383 	clz	r3, r3
 8041330:	b2db      	uxtb	r3, r3
 8041332:	005b      	lsls	r3, r3, #1
 8041334:	2103      	movs	r1, #3
 8041336:	fa01 f303 	lsl.w	r3, r1, r3
 804133a:	43db      	mvns	r3, r3
 804133c:	401a      	ands	r2, r3
 804133e:	68bb      	ldr	r3, [r7, #8]
 8041340:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041342:	69fb      	ldr	r3, [r7, #28]
 8041344:	fa93 f3a3 	rbit	r3, r3
 8041348:	61bb      	str	r3, [r7, #24]
  return result;
 804134a:	69bb      	ldr	r3, [r7, #24]
 804134c:	fab3 f383 	clz	r3, r3
 8041350:	b2db      	uxtb	r3, r3
 8041352:	005b      	lsls	r3, r3, #1
 8041354:	6879      	ldr	r1, [r7, #4]
 8041356:	fa01 f303 	lsl.w	r3, r1, r3
 804135a:	431a      	orrs	r2, r3
 804135c:	68fb      	ldr	r3, [r7, #12]
 804135e:	60da      	str	r2, [r3, #12]
}
 8041360:	bf00      	nop
 8041362:	3724      	adds	r7, #36	; 0x24
 8041364:	46bd      	mov	sp, r7
 8041366:	f85d 7b04 	ldr.w	r7, [sp], #4
 804136a:	4770      	bx	lr

0804136c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 804136c:	b480      	push	{r7}
 804136e:	b089      	sub	sp, #36	; 0x24
 8041370:	af00      	add	r7, sp, #0
 8041372:	60f8      	str	r0, [r7, #12]
 8041374:	60b9      	str	r1, [r7, #8]
 8041376:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8041378:	68fb      	ldr	r3, [r7, #12]
 804137a:	6a1a      	ldr	r2, [r3, #32]
 804137c:	68bb      	ldr	r3, [r7, #8]
 804137e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041380:	697b      	ldr	r3, [r7, #20]
 8041382:	fa93 f3a3 	rbit	r3, r3
 8041386:	613b      	str	r3, [r7, #16]
  return result;
 8041388:	693b      	ldr	r3, [r7, #16]
 804138a:	fab3 f383 	clz	r3, r3
 804138e:	b2db      	uxtb	r3, r3
 8041390:	009b      	lsls	r3, r3, #2
 8041392:	210f      	movs	r1, #15
 8041394:	fa01 f303 	lsl.w	r3, r1, r3
 8041398:	43db      	mvns	r3, r3
 804139a:	401a      	ands	r2, r3
 804139c:	68bb      	ldr	r3, [r7, #8]
 804139e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80413a0:	69fb      	ldr	r3, [r7, #28]
 80413a2:	fa93 f3a3 	rbit	r3, r3
 80413a6:	61bb      	str	r3, [r7, #24]
  return result;
 80413a8:	69bb      	ldr	r3, [r7, #24]
 80413aa:	fab3 f383 	clz	r3, r3
 80413ae:	b2db      	uxtb	r3, r3
 80413b0:	009b      	lsls	r3, r3, #2
 80413b2:	6879      	ldr	r1, [r7, #4]
 80413b4:	fa01 f303 	lsl.w	r3, r1, r3
 80413b8:	431a      	orrs	r2, r3
 80413ba:	68fb      	ldr	r3, [r7, #12]
 80413bc:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80413be:	bf00      	nop
 80413c0:	3724      	adds	r7, #36	; 0x24
 80413c2:	46bd      	mov	sp, r7
 80413c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413c8:	4770      	bx	lr

080413ca <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80413ca:	b480      	push	{r7}
 80413cc:	b089      	sub	sp, #36	; 0x24
 80413ce:	af00      	add	r7, sp, #0
 80413d0:	60f8      	str	r0, [r7, #12]
 80413d2:	60b9      	str	r1, [r7, #8]
 80413d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80413d6:	68fb      	ldr	r3, [r7, #12]
 80413d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80413da:	68bb      	ldr	r3, [r7, #8]
 80413dc:	0a1b      	lsrs	r3, r3, #8
 80413de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80413e0:	697b      	ldr	r3, [r7, #20]
 80413e2:	fa93 f3a3 	rbit	r3, r3
 80413e6:	613b      	str	r3, [r7, #16]
  return result;
 80413e8:	693b      	ldr	r3, [r7, #16]
 80413ea:	fab3 f383 	clz	r3, r3
 80413ee:	b2db      	uxtb	r3, r3
 80413f0:	009b      	lsls	r3, r3, #2
 80413f2:	210f      	movs	r1, #15
 80413f4:	fa01 f303 	lsl.w	r3, r1, r3
 80413f8:	43db      	mvns	r3, r3
 80413fa:	401a      	ands	r2, r3
 80413fc:	68bb      	ldr	r3, [r7, #8]
 80413fe:	0a1b      	lsrs	r3, r3, #8
 8041400:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041402:	69fb      	ldr	r3, [r7, #28]
 8041404:	fa93 f3a3 	rbit	r3, r3
 8041408:	61bb      	str	r3, [r7, #24]
  return result;
 804140a:	69bb      	ldr	r3, [r7, #24]
 804140c:	fab3 f383 	clz	r3, r3
 8041410:	b2db      	uxtb	r3, r3
 8041412:	009b      	lsls	r3, r3, #2
 8041414:	6879      	ldr	r1, [r7, #4]
 8041416:	fa01 f303 	lsl.w	r3, r1, r3
 804141a:	431a      	orrs	r2, r3
 804141c:	68fb      	ldr	r3, [r7, #12]
 804141e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8041420:	bf00      	nop
 8041422:	3724      	adds	r7, #36	; 0x24
 8041424:	46bd      	mov	sp, r7
 8041426:	f85d 7b04 	ldr.w	r7, [sp], #4
 804142a:	4770      	bx	lr

0804142c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 804142c:	b580      	push	{r7, lr}
 804142e:	b088      	sub	sp, #32
 8041430:	af00      	add	r7, sp, #0
 8041432:	6078      	str	r0, [r7, #4]
 8041434:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8041436:	2300      	movs	r3, #0
 8041438:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 804143a:	2300      	movs	r3, #0
 804143c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 804143e:	683b      	ldr	r3, [r7, #0]
 8041440:	681b      	ldr	r3, [r3, #0]
 8041442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041444:	697b      	ldr	r3, [r7, #20]
 8041446:	fa93 f3a3 	rbit	r3, r3
 804144a:	613b      	str	r3, [r7, #16]
  return result;
 804144c:	693b      	ldr	r3, [r7, #16]
 804144e:	fab3 f383 	clz	r3, r3
 8041452:	b2db      	uxtb	r3, r3
 8041454:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8041456:	e050      	b.n	80414fa <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8041458:	683b      	ldr	r3, [r7, #0]
 804145a:	681a      	ldr	r2, [r3, #0]
 804145c:	2101      	movs	r1, #1
 804145e:	69fb      	ldr	r3, [r7, #28]
 8041460:	fa01 f303 	lsl.w	r3, r1, r3
 8041464:	4013      	ands	r3, r2
 8041466:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8041468:	69bb      	ldr	r3, [r7, #24]
 804146a:	2b00      	cmp	r3, #0
 804146c:	d042      	beq.n	80414f4 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 804146e:	683b      	ldr	r3, [r7, #0]
 8041470:	685b      	ldr	r3, [r3, #4]
 8041472:	2b01      	cmp	r3, #1
 8041474:	d003      	beq.n	804147e <LL_GPIO_Init+0x52>
 8041476:	683b      	ldr	r3, [r7, #0]
 8041478:	685b      	ldr	r3, [r3, #4]
 804147a:	2b02      	cmp	r3, #2
 804147c:	d10d      	bne.n	804149a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 804147e:	683b      	ldr	r3, [r7, #0]
 8041480:	689b      	ldr	r3, [r3, #8]
 8041482:	461a      	mov	r2, r3
 8041484:	69b9      	ldr	r1, [r7, #24]
 8041486:	6878      	ldr	r0, [r7, #4]
 8041488:	f7ff ff12 	bl	80412b0 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 804148c:	683b      	ldr	r3, [r7, #0]
 804148e:	68db      	ldr	r3, [r3, #12]
 8041490:	461a      	mov	r2, r3
 8041492:	69b9      	ldr	r1, [r7, #24]
 8041494:	6878      	ldr	r0, [r7, #4]
 8041496:	f7ff fef3 	bl	8041280 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 804149a:	683b      	ldr	r3, [r7, #0]
 804149c:	691b      	ldr	r3, [r3, #16]
 804149e:	461a      	mov	r2, r3
 80414a0:	69b9      	ldr	r1, [r7, #24]
 80414a2:	6878      	ldr	r0, [r7, #4]
 80414a4:	f7ff ff33 	bl	804130e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80414a8:	683b      	ldr	r3, [r7, #0]
 80414aa:	685b      	ldr	r3, [r3, #4]
 80414ac:	2b02      	cmp	r3, #2
 80414ae:	d11a      	bne.n	80414e6 <LL_GPIO_Init+0xba>
 80414b0:	69bb      	ldr	r3, [r7, #24]
 80414b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80414b4:	68fb      	ldr	r3, [r7, #12]
 80414b6:	fa93 f3a3 	rbit	r3, r3
 80414ba:	60bb      	str	r3, [r7, #8]
  return result;
 80414bc:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80414be:	fab3 f383 	clz	r3, r3
 80414c2:	b2db      	uxtb	r3, r3
 80414c4:	2b07      	cmp	r3, #7
 80414c6:	d807      	bhi.n	80414d8 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80414c8:	683b      	ldr	r3, [r7, #0]
 80414ca:	695b      	ldr	r3, [r3, #20]
 80414cc:	461a      	mov	r2, r3
 80414ce:	69b9      	ldr	r1, [r7, #24]
 80414d0:	6878      	ldr	r0, [r7, #4]
 80414d2:	f7ff ff4b 	bl	804136c <LL_GPIO_SetAFPin_0_7>
 80414d6:	e006      	b.n	80414e6 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80414d8:	683b      	ldr	r3, [r7, #0]
 80414da:	695b      	ldr	r3, [r3, #20]
 80414dc:	461a      	mov	r2, r3
 80414de:	69b9      	ldr	r1, [r7, #24]
 80414e0:	6878      	ldr	r0, [r7, #4]
 80414e2:	f7ff ff72 	bl	80413ca <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80414e6:	683b      	ldr	r3, [r7, #0]
 80414e8:	685b      	ldr	r3, [r3, #4]
 80414ea:	461a      	mov	r2, r3
 80414ec:	69b9      	ldr	r1, [r7, #24]
 80414ee:	6878      	ldr	r0, [r7, #4]
 80414f0:	f7ff fe97 	bl	8041222 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80414f4:	69fb      	ldr	r3, [r7, #28]
 80414f6:	3301      	adds	r3, #1
 80414f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80414fa:	683b      	ldr	r3, [r7, #0]
 80414fc:	681a      	ldr	r2, [r3, #0]
 80414fe:	69fb      	ldr	r3, [r7, #28]
 8041500:	fa22 f303 	lsr.w	r3, r2, r3
 8041504:	2b00      	cmp	r3, #0
 8041506:	d1a7      	bne.n	8041458 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8041508:	2300      	movs	r3, #0
}
 804150a:	4618      	mov	r0, r3
 804150c:	3720      	adds	r7, #32
 804150e:	46bd      	mov	sp, r7
 8041510:	bd80      	pop	{r7, pc}
	...

08041514 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8041514:	b480      	push	{r7}
 8041516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8041518:	4b04      	ldr	r3, [pc, #16]	; (804152c <LL_RCC_GetSysClkSource+0x18>)
 804151a:	689b      	ldr	r3, [r3, #8]
 804151c:	f003 030c 	and.w	r3, r3, #12
}
 8041520:	4618      	mov	r0, r3
 8041522:	46bd      	mov	sp, r7
 8041524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041528:	4770      	bx	lr
 804152a:	bf00      	nop
 804152c:	40023800 	.word	0x40023800

08041530 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8041530:	b480      	push	{r7}
 8041532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8041534:	4b04      	ldr	r3, [pc, #16]	; (8041548 <LL_RCC_GetAHBPrescaler+0x18>)
 8041536:	689b      	ldr	r3, [r3, #8]
 8041538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 804153c:	4618      	mov	r0, r3
 804153e:	46bd      	mov	sp, r7
 8041540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041544:	4770      	bx	lr
 8041546:	bf00      	nop
 8041548:	40023800 	.word	0x40023800

0804154c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 804154c:	b480      	push	{r7}
 804154e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8041550:	4b04      	ldr	r3, [pc, #16]	; (8041564 <LL_RCC_GetAPB1Prescaler+0x18>)
 8041552:	689b      	ldr	r3, [r3, #8]
 8041554:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8041558:	4618      	mov	r0, r3
 804155a:	46bd      	mov	sp, r7
 804155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041560:	4770      	bx	lr
 8041562:	bf00      	nop
 8041564:	40023800 	.word	0x40023800

08041568 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8041568:	b480      	push	{r7}
 804156a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 804156c:	4b04      	ldr	r3, [pc, #16]	; (8041580 <LL_RCC_GetAPB2Prescaler+0x18>)
 804156e:	689b      	ldr	r3, [r3, #8]
 8041570:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8041574:	4618      	mov	r0, r3
 8041576:	46bd      	mov	sp, r7
 8041578:	f85d 7b04 	ldr.w	r7, [sp], #4
 804157c:	4770      	bx	lr
 804157e:	bf00      	nop
 8041580:	40023800 	.word	0x40023800

08041584 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8041584:	b480      	push	{r7}
 8041586:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8041588:	4b04      	ldr	r3, [pc, #16]	; (804159c <LL_RCC_PLL_GetMainSource+0x18>)
 804158a:	685b      	ldr	r3, [r3, #4]
 804158c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8041590:	4618      	mov	r0, r3
 8041592:	46bd      	mov	sp, r7
 8041594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041598:	4770      	bx	lr
 804159a:	bf00      	nop
 804159c:	40023800 	.word	0x40023800

080415a0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80415a0:	b480      	push	{r7}
 80415a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80415a4:	4b04      	ldr	r3, [pc, #16]	; (80415b8 <LL_RCC_PLL_GetN+0x18>)
 80415a6:	685b      	ldr	r3, [r3, #4]
 80415a8:	099b      	lsrs	r3, r3, #6
 80415aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80415ae:	4618      	mov	r0, r3
 80415b0:	46bd      	mov	sp, r7
 80415b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415b6:	4770      	bx	lr
 80415b8:	40023800 	.word	0x40023800

080415bc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80415bc:	b480      	push	{r7}
 80415be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80415c0:	4b04      	ldr	r3, [pc, #16]	; (80415d4 <LL_RCC_PLL_GetP+0x18>)
 80415c2:	685b      	ldr	r3, [r3, #4]
 80415c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80415c8:	4618      	mov	r0, r3
 80415ca:	46bd      	mov	sp, r7
 80415cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415d0:	4770      	bx	lr
 80415d2:	bf00      	nop
 80415d4:	40023800 	.word	0x40023800

080415d8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80415d8:	b480      	push	{r7}
 80415da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80415dc:	4b04      	ldr	r3, [pc, #16]	; (80415f0 <LL_RCC_PLL_GetDivider+0x18>)
 80415de:	685b      	ldr	r3, [r3, #4]
 80415e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80415e4:	4618      	mov	r0, r3
 80415e6:	46bd      	mov	sp, r7
 80415e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415ec:	4770      	bx	lr
 80415ee:	bf00      	nop
 80415f0:	40023800 	.word	0x40023800

080415f4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80415f4:	b580      	push	{r7, lr}
 80415f6:	b082      	sub	sp, #8
 80415f8:	af00      	add	r7, sp, #0
 80415fa:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80415fc:	f000 f820 	bl	8041640 <RCC_GetSystemClockFreq>
 8041600:	4602      	mov	r2, r0
 8041602:	687b      	ldr	r3, [r7, #4]
 8041604:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8041606:	687b      	ldr	r3, [r7, #4]
 8041608:	681b      	ldr	r3, [r3, #0]
 804160a:	4618      	mov	r0, r3
 804160c:	f000 f840 	bl	8041690 <RCC_GetHCLKClockFreq>
 8041610:	4602      	mov	r2, r0
 8041612:	687b      	ldr	r3, [r7, #4]
 8041614:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8041616:	687b      	ldr	r3, [r7, #4]
 8041618:	685b      	ldr	r3, [r3, #4]
 804161a:	4618      	mov	r0, r3
 804161c:	f000 f84e 	bl	80416bc <RCC_GetPCLK1ClockFreq>
 8041620:	4602      	mov	r2, r0
 8041622:	687b      	ldr	r3, [r7, #4]
 8041624:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8041626:	687b      	ldr	r3, [r7, #4]
 8041628:	685b      	ldr	r3, [r3, #4]
 804162a:	4618      	mov	r0, r3
 804162c:	f000 f85a 	bl	80416e4 <RCC_GetPCLK2ClockFreq>
 8041630:	4602      	mov	r2, r0
 8041632:	687b      	ldr	r3, [r7, #4]
 8041634:	60da      	str	r2, [r3, #12]
}
 8041636:	bf00      	nop
 8041638:	3708      	adds	r7, #8
 804163a:	46bd      	mov	sp, r7
 804163c:	bd80      	pop	{r7, pc}
	...

08041640 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8041640:	b580      	push	{r7, lr}
 8041642:	b082      	sub	sp, #8
 8041644:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8041646:	2300      	movs	r3, #0
 8041648:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 804164a:	f7ff ff63 	bl	8041514 <LL_RCC_GetSysClkSource>
 804164e:	4603      	mov	r3, r0
 8041650:	2b08      	cmp	r3, #8
 8041652:	d00c      	beq.n	804166e <RCC_GetSystemClockFreq+0x2e>
 8041654:	2b08      	cmp	r3, #8
 8041656:	d80f      	bhi.n	8041678 <RCC_GetSystemClockFreq+0x38>
 8041658:	2b00      	cmp	r3, #0
 804165a:	d002      	beq.n	8041662 <RCC_GetSystemClockFreq+0x22>
 804165c:	2b04      	cmp	r3, #4
 804165e:	d003      	beq.n	8041668 <RCC_GetSystemClockFreq+0x28>
 8041660:	e00a      	b.n	8041678 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8041662:	4b09      	ldr	r3, [pc, #36]	; (8041688 <RCC_GetSystemClockFreq+0x48>)
 8041664:	607b      	str	r3, [r7, #4]
      break;
 8041666:	e00a      	b.n	804167e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8041668:	4b08      	ldr	r3, [pc, #32]	; (804168c <RCC_GetSystemClockFreq+0x4c>)
 804166a:	607b      	str	r3, [r7, #4]
      break;
 804166c:	e007      	b.n	804167e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 804166e:	2008      	movs	r0, #8
 8041670:	f000 f84c 	bl	804170c <RCC_PLL_GetFreqDomain_SYS>
 8041674:	6078      	str	r0, [r7, #4]
      break;
 8041676:	e002      	b.n	804167e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8041678:	4b03      	ldr	r3, [pc, #12]	; (8041688 <RCC_GetSystemClockFreq+0x48>)
 804167a:	607b      	str	r3, [r7, #4]
      break;
 804167c:	bf00      	nop
  }

  return frequency;
 804167e:	687b      	ldr	r3, [r7, #4]
}
 8041680:	4618      	mov	r0, r3
 8041682:	3708      	adds	r7, #8
 8041684:	46bd      	mov	sp, r7
 8041686:	bd80      	pop	{r7, pc}
 8041688:	00f42400 	.word	0x00f42400
 804168c:	007a1200 	.word	0x007a1200

08041690 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8041690:	b580      	push	{r7, lr}
 8041692:	b082      	sub	sp, #8
 8041694:	af00      	add	r7, sp, #0
 8041696:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8041698:	f7ff ff4a 	bl	8041530 <LL_RCC_GetAHBPrescaler>
 804169c:	4603      	mov	r3, r0
 804169e:	091b      	lsrs	r3, r3, #4
 80416a0:	f003 030f 	and.w	r3, r3, #15
 80416a4:	4a04      	ldr	r2, [pc, #16]	; (80416b8 <RCC_GetHCLKClockFreq+0x28>)
 80416a6:	5cd3      	ldrb	r3, [r2, r3]
 80416a8:	461a      	mov	r2, r3
 80416aa:	687b      	ldr	r3, [r7, #4]
 80416ac:	40d3      	lsrs	r3, r2
}
 80416ae:	4618      	mov	r0, r3
 80416b0:	3708      	adds	r7, #8
 80416b2:	46bd      	mov	sp, r7
 80416b4:	bd80      	pop	{r7, pc}
 80416b6:	bf00      	nop
 80416b8:	08042d3c 	.word	0x08042d3c

080416bc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80416bc:	b580      	push	{r7, lr}
 80416be:	b082      	sub	sp, #8
 80416c0:	af00      	add	r7, sp, #0
 80416c2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80416c4:	f7ff ff42 	bl	804154c <LL_RCC_GetAPB1Prescaler>
 80416c8:	4603      	mov	r3, r0
 80416ca:	0a9b      	lsrs	r3, r3, #10
 80416cc:	4a04      	ldr	r2, [pc, #16]	; (80416e0 <RCC_GetPCLK1ClockFreq+0x24>)
 80416ce:	5cd3      	ldrb	r3, [r2, r3]
 80416d0:	461a      	mov	r2, r3
 80416d2:	687b      	ldr	r3, [r7, #4]
 80416d4:	40d3      	lsrs	r3, r2
}
 80416d6:	4618      	mov	r0, r3
 80416d8:	3708      	adds	r7, #8
 80416da:	46bd      	mov	sp, r7
 80416dc:	bd80      	pop	{r7, pc}
 80416de:	bf00      	nop
 80416e0:	08042d4c 	.word	0x08042d4c

080416e4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80416e4:	b580      	push	{r7, lr}
 80416e6:	b082      	sub	sp, #8
 80416e8:	af00      	add	r7, sp, #0
 80416ea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80416ec:	f7ff ff3c 	bl	8041568 <LL_RCC_GetAPB2Prescaler>
 80416f0:	4603      	mov	r3, r0
 80416f2:	0b5b      	lsrs	r3, r3, #13
 80416f4:	4a04      	ldr	r2, [pc, #16]	; (8041708 <RCC_GetPCLK2ClockFreq+0x24>)
 80416f6:	5cd3      	ldrb	r3, [r2, r3]
 80416f8:	461a      	mov	r2, r3
 80416fa:	687b      	ldr	r3, [r7, #4]
 80416fc:	40d3      	lsrs	r3, r2
}
 80416fe:	4618      	mov	r0, r3
 8041700:	3708      	adds	r7, #8
 8041702:	46bd      	mov	sp, r7
 8041704:	bd80      	pop	{r7, pc}
 8041706:	bf00      	nop
 8041708:	08042d4c 	.word	0x08042d4c

0804170c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 804170c:	b590      	push	{r4, r7, lr}
 804170e:	b087      	sub	sp, #28
 8041710:	af00      	add	r7, sp, #0
 8041712:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8041714:	2300      	movs	r3, #0
 8041716:	617b      	str	r3, [r7, #20]
 8041718:	2300      	movs	r3, #0
 804171a:	60fb      	str	r3, [r7, #12]
 804171c:	2300      	movs	r3, #0
 804171e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8041720:	f7ff ff30 	bl	8041584 <LL_RCC_PLL_GetMainSource>
 8041724:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8041726:	68fb      	ldr	r3, [r7, #12]
 8041728:	2b00      	cmp	r3, #0
 804172a:	d004      	beq.n	8041736 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 804172c:	68fb      	ldr	r3, [r7, #12]
 804172e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8041732:	d003      	beq.n	804173c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8041734:	e005      	b.n	8041742 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8041736:	4b12      	ldr	r3, [pc, #72]	; (8041780 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8041738:	617b      	str	r3, [r7, #20]
      break;
 804173a:	e005      	b.n	8041748 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 804173c:	4b11      	ldr	r3, [pc, #68]	; (8041784 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 804173e:	617b      	str	r3, [r7, #20]
      break;
 8041740:	e002      	b.n	8041748 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8041742:	4b0f      	ldr	r3, [pc, #60]	; (8041780 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8041744:	617b      	str	r3, [r7, #20]
      break;
 8041746:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8041748:	687b      	ldr	r3, [r7, #4]
 804174a:	2b08      	cmp	r3, #8
 804174c:	d113      	bne.n	8041776 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 804174e:	f7ff ff43 	bl	80415d8 <LL_RCC_PLL_GetDivider>
 8041752:	4602      	mov	r2, r0
 8041754:	697b      	ldr	r3, [r7, #20]
 8041756:	fbb3 f4f2 	udiv	r4, r3, r2
 804175a:	f7ff ff21 	bl	80415a0 <LL_RCC_PLL_GetN>
 804175e:	4603      	mov	r3, r0
 8041760:	fb03 f404 	mul.w	r4, r3, r4
 8041764:	f7ff ff2a 	bl	80415bc <LL_RCC_PLL_GetP>
 8041768:	4603      	mov	r3, r0
 804176a:	0c1b      	lsrs	r3, r3, #16
 804176c:	3301      	adds	r3, #1
 804176e:	005b      	lsls	r3, r3, #1
 8041770:	fbb4 f3f3 	udiv	r3, r4, r3
 8041774:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8041776:	693b      	ldr	r3, [r7, #16]
}
 8041778:	4618      	mov	r0, r3
 804177a:	371c      	adds	r7, #28
 804177c:	46bd      	mov	sp, r7
 804177e:	bd90      	pop	{r4, r7, pc}
 8041780:	00f42400 	.word	0x00f42400
 8041784:	007a1200 	.word	0x007a1200

08041788 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8041788:	b480      	push	{r7}
 804178a:	b083      	sub	sp, #12
 804178c:	af00      	add	r7, sp, #0
 804178e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8041790:	687b      	ldr	r3, [r7, #4]
 8041792:	68db      	ldr	r3, [r3, #12]
 8041794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804179c:	bf0c      	ite	eq
 804179e:	2301      	moveq	r3, #1
 80417a0:	2300      	movne	r3, #0
 80417a2:	b2db      	uxtb	r3, r3
}
 80417a4:	4618      	mov	r0, r3
 80417a6:	370c      	adds	r7, #12
 80417a8:	46bd      	mov	sp, r7
 80417aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417ae:	4770      	bx	lr

080417b0 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80417b0:	b480      	push	{r7}
 80417b2:	b083      	sub	sp, #12
 80417b4:	af00      	add	r7, sp, #0
 80417b6:	6078      	str	r0, [r7, #4]
 80417b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80417ba:	687b      	ldr	r3, [r7, #4]
 80417bc:	691b      	ldr	r3, [r3, #16]
 80417be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80417c2:	683b      	ldr	r3, [r7, #0]
 80417c4:	431a      	orrs	r2, r3
 80417c6:	687b      	ldr	r3, [r7, #4]
 80417c8:	611a      	str	r2, [r3, #16]
}
 80417ca:	bf00      	nop
 80417cc:	370c      	adds	r7, #12
 80417ce:	46bd      	mov	sp, r7
 80417d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417d4:	4770      	bx	lr

080417d6 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 80417d6:	b480      	push	{r7}
 80417d8:	b083      	sub	sp, #12
 80417da:	af00      	add	r7, sp, #0
 80417dc:	6078      	str	r0, [r7, #4]
 80417de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80417e0:	687b      	ldr	r3, [r7, #4]
 80417e2:	695b      	ldr	r3, [r3, #20]
 80417e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80417e8:	683b      	ldr	r3, [r7, #0]
 80417ea:	431a      	orrs	r2, r3
 80417ec:	687b      	ldr	r3, [r7, #4]
 80417ee:	615a      	str	r2, [r3, #20]
}
 80417f0:	bf00      	nop
 80417f2:	370c      	adds	r7, #12
 80417f4:	46bd      	mov	sp, r7
 80417f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417fa:	4770      	bx	lr

080417fc <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 80417fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8041800:	b0c0      	sub	sp, #256	; 0x100
 8041802:	af00      	add	r7, sp, #0
 8041804:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8041808:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 804180c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8041810:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8041814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8041818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804181c:	f040 810c 	bne.w	8041a38 <LL_USART_SetBaudRate+0x23c>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8041820:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8041824:	2200      	movs	r2, #0
 8041826:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 804182a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 804182e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8041832:	4622      	mov	r2, r4
 8041834:	462b      	mov	r3, r5
 8041836:	1891      	adds	r1, r2, r2
 8041838:	6639      	str	r1, [r7, #96]	; 0x60
 804183a:	415b      	adcs	r3, r3
 804183c:	667b      	str	r3, [r7, #100]	; 0x64
 804183e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8041842:	4621      	mov	r1, r4
 8041844:	eb12 0801 	adds.w	r8, r2, r1
 8041848:	4629      	mov	r1, r5
 804184a:	eb43 0901 	adc.w	r9, r3, r1
 804184e:	f04f 0200 	mov.w	r2, #0
 8041852:	f04f 0300 	mov.w	r3, #0
 8041856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 804185a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 804185e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8041862:	4690      	mov	r8, r2
 8041864:	4699      	mov	r9, r3
 8041866:	4623      	mov	r3, r4
 8041868:	eb18 0303 	adds.w	r3, r8, r3
 804186c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8041870:	462b      	mov	r3, r5
 8041872:	eb49 0303 	adc.w	r3, r9, r3
 8041876:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 804187a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 804187e:	2200      	movs	r2, #0
 8041880:	469a      	mov	sl, r3
 8041882:	4693      	mov	fp, r2
 8041884:	eb1a 030a 	adds.w	r3, sl, sl
 8041888:	65bb      	str	r3, [r7, #88]	; 0x58
 804188a:	eb4b 030b 	adc.w	r3, fp, fp
 804188e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8041890:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8041894:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8041898:	f7fe fcf2 	bl	8040280 <__aeabi_uldivmod>
 804189c:	4602      	mov	r2, r0
 804189e:	460b      	mov	r3, r1
 80418a0:	4b64      	ldr	r3, [pc, #400]	; (8041a34 <LL_USART_SetBaudRate+0x238>)
 80418a2:	fba3 2302 	umull	r2, r3, r3, r2
 80418a6:	095b      	lsrs	r3, r3, #5
 80418a8:	b29b      	uxth	r3, r3
 80418aa:	011b      	lsls	r3, r3, #4
 80418ac:	b29c      	uxth	r4, r3
 80418ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80418b2:	2200      	movs	r2, #0
 80418b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80418b8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80418bc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80418c0:	4642      	mov	r2, r8
 80418c2:	464b      	mov	r3, r9
 80418c4:	1891      	adds	r1, r2, r2
 80418c6:	6539      	str	r1, [r7, #80]	; 0x50
 80418c8:	415b      	adcs	r3, r3
 80418ca:	657b      	str	r3, [r7, #84]	; 0x54
 80418cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80418d0:	4641      	mov	r1, r8
 80418d2:	1851      	adds	r1, r2, r1
 80418d4:	64b9      	str	r1, [r7, #72]	; 0x48
 80418d6:	4649      	mov	r1, r9
 80418d8:	414b      	adcs	r3, r1
 80418da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80418dc:	f04f 0200 	mov.w	r2, #0
 80418e0:	f04f 0300 	mov.w	r3, #0
 80418e4:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80418e8:	4659      	mov	r1, fp
 80418ea:	00cb      	lsls	r3, r1, #3
 80418ec:	4651      	mov	r1, sl
 80418ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80418f2:	4651      	mov	r1, sl
 80418f4:	00ca      	lsls	r2, r1, #3
 80418f6:	4610      	mov	r0, r2
 80418f8:	4619      	mov	r1, r3
 80418fa:	4603      	mov	r3, r0
 80418fc:	4642      	mov	r2, r8
 80418fe:	189b      	adds	r3, r3, r2
 8041900:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8041904:	464b      	mov	r3, r9
 8041906:	460a      	mov	r2, r1
 8041908:	eb42 0303 	adc.w	r3, r2, r3
 804190c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8041910:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8041914:	2200      	movs	r2, #0
 8041916:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 804191a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 804191e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8041922:	460b      	mov	r3, r1
 8041924:	18db      	adds	r3, r3, r3
 8041926:	643b      	str	r3, [r7, #64]	; 0x40
 8041928:	4613      	mov	r3, r2
 804192a:	eb42 0303 	adc.w	r3, r2, r3
 804192e:	647b      	str	r3, [r7, #68]	; 0x44
 8041930:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8041934:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8041938:	f7fe fca2 	bl	8040280 <__aeabi_uldivmod>
 804193c:	4602      	mov	r2, r0
 804193e:	460b      	mov	r3, r1
 8041940:	4611      	mov	r1, r2
 8041942:	4b3c      	ldr	r3, [pc, #240]	; (8041a34 <LL_USART_SetBaudRate+0x238>)
 8041944:	fba3 2301 	umull	r2, r3, r3, r1
 8041948:	095b      	lsrs	r3, r3, #5
 804194a:	2264      	movs	r2, #100	; 0x64
 804194c:	fb02 f303 	mul.w	r3, r2, r3
 8041950:	1acb      	subs	r3, r1, r3
 8041952:	00db      	lsls	r3, r3, #3
 8041954:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8041958:	4b36      	ldr	r3, [pc, #216]	; (8041a34 <LL_USART_SetBaudRate+0x238>)
 804195a:	fba3 2302 	umull	r2, r3, r3, r2
 804195e:	095b      	lsrs	r3, r3, #5
 8041960:	b29b      	uxth	r3, r3
 8041962:	005b      	lsls	r3, r3, #1
 8041964:	b29b      	uxth	r3, r3
 8041966:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 804196a:	b29b      	uxth	r3, r3
 804196c:	4423      	add	r3, r4
 804196e:	b29c      	uxth	r4, r3
 8041970:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8041974:	2200      	movs	r2, #0
 8041976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 804197a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 804197e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8041982:	4642      	mov	r2, r8
 8041984:	464b      	mov	r3, r9
 8041986:	1891      	adds	r1, r2, r2
 8041988:	63b9      	str	r1, [r7, #56]	; 0x38
 804198a:	415b      	adcs	r3, r3
 804198c:	63fb      	str	r3, [r7, #60]	; 0x3c
 804198e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8041992:	4641      	mov	r1, r8
 8041994:	1851      	adds	r1, r2, r1
 8041996:	6339      	str	r1, [r7, #48]	; 0x30
 8041998:	4649      	mov	r1, r9
 804199a:	414b      	adcs	r3, r1
 804199c:	637b      	str	r3, [r7, #52]	; 0x34
 804199e:	f04f 0200 	mov.w	r2, #0
 80419a2:	f04f 0300 	mov.w	r3, #0
 80419a6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80419aa:	4659      	mov	r1, fp
 80419ac:	00cb      	lsls	r3, r1, #3
 80419ae:	4651      	mov	r1, sl
 80419b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80419b4:	4651      	mov	r1, sl
 80419b6:	00ca      	lsls	r2, r1, #3
 80419b8:	4610      	mov	r0, r2
 80419ba:	4619      	mov	r1, r3
 80419bc:	4603      	mov	r3, r0
 80419be:	4642      	mov	r2, r8
 80419c0:	189b      	adds	r3, r3, r2
 80419c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80419c6:	464b      	mov	r3, r9
 80419c8:	460a      	mov	r2, r1
 80419ca:	eb42 0303 	adc.w	r3, r2, r3
 80419ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80419d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80419d6:	2200      	movs	r2, #0
 80419d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80419dc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80419e0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80419e4:	460b      	mov	r3, r1
 80419e6:	18db      	adds	r3, r3, r3
 80419e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80419ea:	4613      	mov	r3, r2
 80419ec:	eb42 0303 	adc.w	r3, r2, r3
 80419f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80419f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80419f6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80419fa:	f7fe fc41 	bl	8040280 <__aeabi_uldivmod>
 80419fe:	4602      	mov	r2, r0
 8041a00:	460b      	mov	r3, r1
 8041a02:	4b0c      	ldr	r3, [pc, #48]	; (8041a34 <LL_USART_SetBaudRate+0x238>)
 8041a04:	fba3 1302 	umull	r1, r3, r3, r2
 8041a08:	095b      	lsrs	r3, r3, #5
 8041a0a:	2164      	movs	r1, #100	; 0x64
 8041a0c:	fb01 f303 	mul.w	r3, r1, r3
 8041a10:	1ad3      	subs	r3, r2, r3
 8041a12:	00db      	lsls	r3, r3, #3
 8041a14:	3332      	adds	r3, #50	; 0x32
 8041a16:	4a07      	ldr	r2, [pc, #28]	; (8041a34 <LL_USART_SetBaudRate+0x238>)
 8041a18:	fba2 2303 	umull	r2, r3, r2, r3
 8041a1c:	095b      	lsrs	r3, r3, #5
 8041a1e:	b29b      	uxth	r3, r3
 8041a20:	f003 0307 	and.w	r3, r3, #7
 8041a24:	b29b      	uxth	r3, r3
 8041a26:	4423      	add	r3, r4
 8041a28:	b29b      	uxth	r3, r3
 8041a2a:	461a      	mov	r2, r3
 8041a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041a30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8041a32:	e107      	b.n	8041c44 <LL_USART_SetBaudRate+0x448>
 8041a34:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8041a38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8041a3c:	2200      	movs	r2, #0
 8041a3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8041a42:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8041a46:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8041a4a:	4642      	mov	r2, r8
 8041a4c:	464b      	mov	r3, r9
 8041a4e:	1891      	adds	r1, r2, r2
 8041a50:	6239      	str	r1, [r7, #32]
 8041a52:	415b      	adcs	r3, r3
 8041a54:	627b      	str	r3, [r7, #36]	; 0x24
 8041a56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8041a5a:	4641      	mov	r1, r8
 8041a5c:	1854      	adds	r4, r2, r1
 8041a5e:	4649      	mov	r1, r9
 8041a60:	eb43 0501 	adc.w	r5, r3, r1
 8041a64:	f04f 0200 	mov.w	r2, #0
 8041a68:	f04f 0300 	mov.w	r3, #0
 8041a6c:	00eb      	lsls	r3, r5, #3
 8041a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8041a72:	00e2      	lsls	r2, r4, #3
 8041a74:	4614      	mov	r4, r2
 8041a76:	461d      	mov	r5, r3
 8041a78:	4643      	mov	r3, r8
 8041a7a:	18e3      	adds	r3, r4, r3
 8041a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8041a80:	464b      	mov	r3, r9
 8041a82:	eb45 0303 	adc.w	r3, r5, r3
 8041a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8041a8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8041a8e:	2200      	movs	r2, #0
 8041a90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8041a94:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8041a98:	f04f 0200 	mov.w	r2, #0
 8041a9c:	f04f 0300 	mov.w	r3, #0
 8041aa0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8041aa4:	4629      	mov	r1, r5
 8041aa6:	008b      	lsls	r3, r1, #2
 8041aa8:	4621      	mov	r1, r4
 8041aaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8041aae:	4621      	mov	r1, r4
 8041ab0:	008a      	lsls	r2, r1, #2
 8041ab2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8041ab6:	f7fe fbe3 	bl	8040280 <__aeabi_uldivmod>
 8041aba:	4602      	mov	r2, r0
 8041abc:	460b      	mov	r3, r1
 8041abe:	4b64      	ldr	r3, [pc, #400]	; (8041c50 <LL_USART_SetBaudRate+0x454>)
 8041ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8041ac4:	095b      	lsrs	r3, r3, #5
 8041ac6:	b29b      	uxth	r3, r3
 8041ac8:	011b      	lsls	r3, r3, #4
 8041aca:	b29c      	uxth	r4, r3
 8041acc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8041ad0:	2200      	movs	r2, #0
 8041ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8041ad6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8041ada:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8041ade:	4642      	mov	r2, r8
 8041ae0:	464b      	mov	r3, r9
 8041ae2:	1891      	adds	r1, r2, r2
 8041ae4:	61b9      	str	r1, [r7, #24]
 8041ae6:	415b      	adcs	r3, r3
 8041ae8:	61fb      	str	r3, [r7, #28]
 8041aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8041aee:	4641      	mov	r1, r8
 8041af0:	1851      	adds	r1, r2, r1
 8041af2:	6139      	str	r1, [r7, #16]
 8041af4:	4649      	mov	r1, r9
 8041af6:	414b      	adcs	r3, r1
 8041af8:	617b      	str	r3, [r7, #20]
 8041afa:	f04f 0200 	mov.w	r2, #0
 8041afe:	f04f 0300 	mov.w	r3, #0
 8041b02:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8041b06:	4659      	mov	r1, fp
 8041b08:	00cb      	lsls	r3, r1, #3
 8041b0a:	4651      	mov	r1, sl
 8041b0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8041b10:	4651      	mov	r1, sl
 8041b12:	00ca      	lsls	r2, r1, #3
 8041b14:	4610      	mov	r0, r2
 8041b16:	4619      	mov	r1, r3
 8041b18:	4603      	mov	r3, r0
 8041b1a:	4642      	mov	r2, r8
 8041b1c:	189b      	adds	r3, r3, r2
 8041b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8041b22:	464b      	mov	r3, r9
 8041b24:	460a      	mov	r2, r1
 8041b26:	eb42 0303 	adc.w	r3, r2, r3
 8041b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8041b2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8041b32:	2200      	movs	r2, #0
 8041b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8041b38:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8041b3c:	f04f 0200 	mov.w	r2, #0
 8041b40:	f04f 0300 	mov.w	r3, #0
 8041b44:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8041b48:	4649      	mov	r1, r9
 8041b4a:	008b      	lsls	r3, r1, #2
 8041b4c:	4641      	mov	r1, r8
 8041b4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8041b52:	4641      	mov	r1, r8
 8041b54:	008a      	lsls	r2, r1, #2
 8041b56:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8041b5a:	f7fe fb91 	bl	8040280 <__aeabi_uldivmod>
 8041b5e:	4602      	mov	r2, r0
 8041b60:	460b      	mov	r3, r1
 8041b62:	4b3b      	ldr	r3, [pc, #236]	; (8041c50 <LL_USART_SetBaudRate+0x454>)
 8041b64:	fba3 1302 	umull	r1, r3, r3, r2
 8041b68:	095b      	lsrs	r3, r3, #5
 8041b6a:	2164      	movs	r1, #100	; 0x64
 8041b6c:	fb01 f303 	mul.w	r3, r1, r3
 8041b70:	1ad3      	subs	r3, r2, r3
 8041b72:	011b      	lsls	r3, r3, #4
 8041b74:	3332      	adds	r3, #50	; 0x32
 8041b76:	4a36      	ldr	r2, [pc, #216]	; (8041c50 <LL_USART_SetBaudRate+0x454>)
 8041b78:	fba2 2303 	umull	r2, r3, r2, r3
 8041b7c:	095b      	lsrs	r3, r3, #5
 8041b7e:	b29b      	uxth	r3, r3
 8041b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041b84:	b29b      	uxth	r3, r3
 8041b86:	4423      	add	r3, r4
 8041b88:	b29c      	uxth	r4, r3
 8041b8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8041b8e:	2200      	movs	r2, #0
 8041b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8041b92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8041b94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8041b98:	4642      	mov	r2, r8
 8041b9a:	464b      	mov	r3, r9
 8041b9c:	1891      	adds	r1, r2, r2
 8041b9e:	60b9      	str	r1, [r7, #8]
 8041ba0:	415b      	adcs	r3, r3
 8041ba2:	60fb      	str	r3, [r7, #12]
 8041ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8041ba8:	4641      	mov	r1, r8
 8041baa:	1851      	adds	r1, r2, r1
 8041bac:	6039      	str	r1, [r7, #0]
 8041bae:	4649      	mov	r1, r9
 8041bb0:	414b      	adcs	r3, r1
 8041bb2:	607b      	str	r3, [r7, #4]
 8041bb4:	f04f 0200 	mov.w	r2, #0
 8041bb8:	f04f 0300 	mov.w	r3, #0
 8041bbc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8041bc0:	4659      	mov	r1, fp
 8041bc2:	00cb      	lsls	r3, r1, #3
 8041bc4:	4651      	mov	r1, sl
 8041bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8041bca:	4651      	mov	r1, sl
 8041bcc:	00ca      	lsls	r2, r1, #3
 8041bce:	4610      	mov	r0, r2
 8041bd0:	4619      	mov	r1, r3
 8041bd2:	4603      	mov	r3, r0
 8041bd4:	4642      	mov	r2, r8
 8041bd6:	189b      	adds	r3, r3, r2
 8041bd8:	673b      	str	r3, [r7, #112]	; 0x70
 8041bda:	464b      	mov	r3, r9
 8041bdc:	460a      	mov	r2, r1
 8041bde:	eb42 0303 	adc.w	r3, r2, r3
 8041be2:	677b      	str	r3, [r7, #116]	; 0x74
 8041be4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8041be8:	2200      	movs	r2, #0
 8041bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8041bec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8041bee:	f04f 0200 	mov.w	r2, #0
 8041bf2:	f04f 0300 	mov.w	r3, #0
 8041bf6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8041bfa:	4649      	mov	r1, r9
 8041bfc:	008b      	lsls	r3, r1, #2
 8041bfe:	4641      	mov	r1, r8
 8041c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8041c04:	4641      	mov	r1, r8
 8041c06:	008a      	lsls	r2, r1, #2
 8041c08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8041c0c:	f7fe fb38 	bl	8040280 <__aeabi_uldivmod>
 8041c10:	4602      	mov	r2, r0
 8041c12:	460b      	mov	r3, r1
 8041c14:	4b0e      	ldr	r3, [pc, #56]	; (8041c50 <LL_USART_SetBaudRate+0x454>)
 8041c16:	fba3 1302 	umull	r1, r3, r3, r2
 8041c1a:	095b      	lsrs	r3, r3, #5
 8041c1c:	2164      	movs	r1, #100	; 0x64
 8041c1e:	fb01 f303 	mul.w	r3, r1, r3
 8041c22:	1ad3      	subs	r3, r2, r3
 8041c24:	011b      	lsls	r3, r3, #4
 8041c26:	3332      	adds	r3, #50	; 0x32
 8041c28:	4a09      	ldr	r2, [pc, #36]	; (8041c50 <LL_USART_SetBaudRate+0x454>)
 8041c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8041c2e:	095b      	lsrs	r3, r3, #5
 8041c30:	b29b      	uxth	r3, r3
 8041c32:	f003 030f 	and.w	r3, r3, #15
 8041c36:	b29b      	uxth	r3, r3
 8041c38:	4423      	add	r3, r4
 8041c3a:	b29b      	uxth	r3, r3
 8041c3c:	461a      	mov	r2, r3
 8041c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8041c42:	609a      	str	r2, [r3, #8]
}
 8041c44:	bf00      	nop
 8041c46:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8041c4a:	46bd      	mov	sp, r7
 8041c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8041c50:	51eb851f 	.word	0x51eb851f

08041c54 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8041c54:	b580      	push	{r7, lr}
 8041c56:	b088      	sub	sp, #32
 8041c58:	af00      	add	r7, sp, #0
 8041c5a:	6078      	str	r0, [r7, #4]
 8041c5c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8041c5e:	2301      	movs	r3, #1
 8041c60:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8041c62:	2300      	movs	r3, #0
 8041c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8041c66:	6878      	ldr	r0, [r7, #4]
 8041c68:	f7ff fd8e 	bl	8041788 <LL_USART_IsEnabled>
 8041c6c:	4603      	mov	r3, r0
 8041c6e:	2b00      	cmp	r3, #0
 8041c70:	d149      	bne.n	8041d06 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8041c72:	687b      	ldr	r3, [r7, #4]
 8041c74:	68db      	ldr	r3, [r3, #12]
 8041c76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8041c7a:	f023 030c 	bic.w	r3, r3, #12
 8041c7e:	683a      	ldr	r2, [r7, #0]
 8041c80:	6851      	ldr	r1, [r2, #4]
 8041c82:	683a      	ldr	r2, [r7, #0]
 8041c84:	68d2      	ldr	r2, [r2, #12]
 8041c86:	4311      	orrs	r1, r2
 8041c88:	683a      	ldr	r2, [r7, #0]
 8041c8a:	6912      	ldr	r2, [r2, #16]
 8041c8c:	4311      	orrs	r1, r2
 8041c8e:	683a      	ldr	r2, [r7, #0]
 8041c90:	6992      	ldr	r2, [r2, #24]
 8041c92:	430a      	orrs	r2, r1
 8041c94:	431a      	orrs	r2, r3
 8041c96:	687b      	ldr	r3, [r7, #4]
 8041c98:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8041c9a:	683b      	ldr	r3, [r7, #0]
 8041c9c:	689b      	ldr	r3, [r3, #8]
 8041c9e:	4619      	mov	r1, r3
 8041ca0:	6878      	ldr	r0, [r7, #4]
 8041ca2:	f7ff fd85 	bl	80417b0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8041ca6:	683b      	ldr	r3, [r7, #0]
 8041ca8:	695b      	ldr	r3, [r3, #20]
 8041caa:	4619      	mov	r1, r3
 8041cac:	6878      	ldr	r0, [r7, #4]
 8041cae:	f7ff fd92 	bl	80417d6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8041cb2:	f107 0308 	add.w	r3, r7, #8
 8041cb6:	4618      	mov	r0, r3
 8041cb8:	f7ff fc9c 	bl	80415f4 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8041cbc:	687b      	ldr	r3, [r7, #4]
 8041cbe:	4a14      	ldr	r2, [pc, #80]	; (8041d10 <LL_USART_Init+0xbc>)
 8041cc0:	4293      	cmp	r3, r2
 8041cc2:	d102      	bne.n	8041cca <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8041cc4:	697b      	ldr	r3, [r7, #20]
 8041cc6:	61bb      	str	r3, [r7, #24]
 8041cc8:	e00c      	b.n	8041ce4 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8041cca:	687b      	ldr	r3, [r7, #4]
 8041ccc:	4a11      	ldr	r2, [pc, #68]	; (8041d14 <LL_USART_Init+0xc0>)
 8041cce:	4293      	cmp	r3, r2
 8041cd0:	d102      	bne.n	8041cd8 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8041cd2:	693b      	ldr	r3, [r7, #16]
 8041cd4:	61bb      	str	r3, [r7, #24]
 8041cd6:	e005      	b.n	8041ce4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8041cd8:	687b      	ldr	r3, [r7, #4]
 8041cda:	4a0f      	ldr	r2, [pc, #60]	; (8041d18 <LL_USART_Init+0xc4>)
 8041cdc:	4293      	cmp	r3, r2
 8041cde:	d101      	bne.n	8041ce4 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8041ce0:	697b      	ldr	r3, [r7, #20]
 8041ce2:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8041ce4:	69bb      	ldr	r3, [r7, #24]
 8041ce6:	2b00      	cmp	r3, #0
 8041ce8:	d00d      	beq.n	8041d06 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8041cea:	683b      	ldr	r3, [r7, #0]
 8041cec:	681b      	ldr	r3, [r3, #0]
 8041cee:	2b00      	cmp	r3, #0
 8041cf0:	d009      	beq.n	8041d06 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8041cf2:	2300      	movs	r3, #0
 8041cf4:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8041cf6:	683b      	ldr	r3, [r7, #0]
 8041cf8:	699a      	ldr	r2, [r3, #24]
 8041cfa:	683b      	ldr	r3, [r7, #0]
 8041cfc:	681b      	ldr	r3, [r3, #0]
 8041cfe:	69b9      	ldr	r1, [r7, #24]
 8041d00:	6878      	ldr	r0, [r7, #4]
 8041d02:	f7ff fd7b 	bl	80417fc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8041d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8041d08:	4618      	mov	r0, r3
 8041d0a:	3720      	adds	r7, #32
 8041d0c:	46bd      	mov	sp, r7
 8041d0e:	bd80      	pop	{r7, pc}
 8041d10:	40011000 	.word	0x40011000
 8041d14:	40004400 	.word	0x40004400
 8041d18:	40011400 	.word	0x40011400

08041d1c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8041d1c:	b480      	push	{r7}
 8041d1e:	b083      	sub	sp, #12
 8041d20:	af00      	add	r7, sp, #0
 8041d22:	6078      	str	r0, [r7, #4]
 8041d24:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8041d26:	687a      	ldr	r2, [r7, #4]
 8041d28:	683b      	ldr	r3, [r7, #0]
 8041d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8041d2e:	4a07      	ldr	r2, [pc, #28]	; (8041d4c <LL_InitTick+0x30>)
 8041d30:	3b01      	subs	r3, #1
 8041d32:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8041d34:	4b05      	ldr	r3, [pc, #20]	; (8041d4c <LL_InitTick+0x30>)
 8041d36:	2200      	movs	r2, #0
 8041d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8041d3a:	4b04      	ldr	r3, [pc, #16]	; (8041d4c <LL_InitTick+0x30>)
 8041d3c:	2205      	movs	r2, #5
 8041d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8041d40:	bf00      	nop
 8041d42:	370c      	adds	r7, #12
 8041d44:	46bd      	mov	sp, r7
 8041d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d4a:	4770      	bx	lr
 8041d4c:	e000e010 	.word	0xe000e010

08041d50 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8041d50:	b580      	push	{r7, lr}
 8041d52:	b082      	sub	sp, #8
 8041d54:	af00      	add	r7, sp, #0
 8041d56:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8041d58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8041d5c:	6878      	ldr	r0, [r7, #4]
 8041d5e:	f7ff ffdd 	bl	8041d1c <LL_InitTick>
}
 8041d62:	bf00      	nop
 8041d64:	3708      	adds	r7, #8
 8041d66:	46bd      	mov	sp, r7
 8041d68:	bd80      	pop	{r7, pc}
	...

08041d6c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8041d6c:	b480      	push	{r7}
 8041d6e:	b083      	sub	sp, #12
 8041d70:	af00      	add	r7, sp, #0
 8041d72:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8041d74:	4a04      	ldr	r2, [pc, #16]	; (8041d88 <LL_SetSystemCoreClock+0x1c>)
 8041d76:	687b      	ldr	r3, [r7, #4]
 8041d78:	6013      	str	r3, [r2, #0]
}
 8041d7a:	bf00      	nop
 8041d7c:	370c      	adds	r7, #12
 8041d7e:	46bd      	mov	sp, r7
 8041d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d84:	4770      	bx	lr
 8041d86:	bf00      	nop
 8041d88:	20000000 	.word	0x20000000

08041d8c <__errno>:
 8041d8c:	4b01      	ldr	r3, [pc, #4]	; (8041d94 <__errno+0x8>)
 8041d8e:	6818      	ldr	r0, [r3, #0]
 8041d90:	4770      	bx	lr
 8041d92:	bf00      	nop
 8041d94:	20000004 	.word	0x20000004

08041d98 <__libc_init_array>:
 8041d98:	b570      	push	{r4, r5, r6, lr}
 8041d9a:	4d0d      	ldr	r5, [pc, #52]	; (8041dd0 <__libc_init_array+0x38>)
 8041d9c:	4c0d      	ldr	r4, [pc, #52]	; (8041dd4 <__libc_init_array+0x3c>)
 8041d9e:	1b64      	subs	r4, r4, r5
 8041da0:	10a4      	asrs	r4, r4, #2
 8041da2:	2600      	movs	r6, #0
 8041da4:	42a6      	cmp	r6, r4
 8041da6:	d109      	bne.n	8041dbc <__libc_init_array+0x24>
 8041da8:	4d0b      	ldr	r5, [pc, #44]	; (8041dd8 <__libc_init_array+0x40>)
 8041daa:	4c0c      	ldr	r4, [pc, #48]	; (8041ddc <__libc_init_array+0x44>)
 8041dac:	f000 ffae 	bl	8042d0c <_init>
 8041db0:	1b64      	subs	r4, r4, r5
 8041db2:	10a4      	asrs	r4, r4, #2
 8041db4:	2600      	movs	r6, #0
 8041db6:	42a6      	cmp	r6, r4
 8041db8:	d105      	bne.n	8041dc6 <__libc_init_array+0x2e>
 8041dba:	bd70      	pop	{r4, r5, r6, pc}
 8041dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8041dc0:	4798      	blx	r3
 8041dc2:	3601      	adds	r6, #1
 8041dc4:	e7ee      	b.n	8041da4 <__libc_init_array+0xc>
 8041dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8041dca:	4798      	blx	r3
 8041dcc:	3601      	adds	r6, #1
 8041dce:	e7f2      	b.n	8041db6 <__libc_init_array+0x1e>
 8041dd0:	08042df4 	.word	0x08042df4
 8041dd4:	08042df4 	.word	0x08042df4
 8041dd8:	08042df4 	.word	0x08042df4
 8041ddc:	08042df8 	.word	0x08042df8

08041de0 <memset>:
 8041de0:	4402      	add	r2, r0
 8041de2:	4603      	mov	r3, r0
 8041de4:	4293      	cmp	r3, r2
 8041de6:	d100      	bne.n	8041dea <memset+0xa>
 8041de8:	4770      	bx	lr
 8041dea:	f803 1b01 	strb.w	r1, [r3], #1
 8041dee:	e7f9      	b.n	8041de4 <memset+0x4>

08041df0 <iprintf>:
 8041df0:	b40f      	push	{r0, r1, r2, r3}
 8041df2:	4b0a      	ldr	r3, [pc, #40]	; (8041e1c <iprintf+0x2c>)
 8041df4:	b513      	push	{r0, r1, r4, lr}
 8041df6:	681c      	ldr	r4, [r3, #0]
 8041df8:	b124      	cbz	r4, 8041e04 <iprintf+0x14>
 8041dfa:	69a3      	ldr	r3, [r4, #24]
 8041dfc:	b913      	cbnz	r3, 8041e04 <iprintf+0x14>
 8041dfe:	4620      	mov	r0, r4
 8041e00:	f000 f866 	bl	8041ed0 <__sinit>
 8041e04:	ab05      	add	r3, sp, #20
 8041e06:	9a04      	ldr	r2, [sp, #16]
 8041e08:	68a1      	ldr	r1, [r4, #8]
 8041e0a:	9301      	str	r3, [sp, #4]
 8041e0c:	4620      	mov	r0, r4
 8041e0e:	f000 f9bd 	bl	804218c <_vfiprintf_r>
 8041e12:	b002      	add	sp, #8
 8041e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8041e18:	b004      	add	sp, #16
 8041e1a:	4770      	bx	lr
 8041e1c:	20000004 	.word	0x20000004

08041e20 <std>:
 8041e20:	2300      	movs	r3, #0
 8041e22:	b510      	push	{r4, lr}
 8041e24:	4604      	mov	r4, r0
 8041e26:	e9c0 3300 	strd	r3, r3, [r0]
 8041e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8041e2e:	6083      	str	r3, [r0, #8]
 8041e30:	8181      	strh	r1, [r0, #12]
 8041e32:	6643      	str	r3, [r0, #100]	; 0x64
 8041e34:	81c2      	strh	r2, [r0, #14]
 8041e36:	6183      	str	r3, [r0, #24]
 8041e38:	4619      	mov	r1, r3
 8041e3a:	2208      	movs	r2, #8
 8041e3c:	305c      	adds	r0, #92	; 0x5c
 8041e3e:	f7ff ffcf 	bl	8041de0 <memset>
 8041e42:	4b05      	ldr	r3, [pc, #20]	; (8041e58 <std+0x38>)
 8041e44:	6263      	str	r3, [r4, #36]	; 0x24
 8041e46:	4b05      	ldr	r3, [pc, #20]	; (8041e5c <std+0x3c>)
 8041e48:	62a3      	str	r3, [r4, #40]	; 0x28
 8041e4a:	4b05      	ldr	r3, [pc, #20]	; (8041e60 <std+0x40>)
 8041e4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8041e4e:	4b05      	ldr	r3, [pc, #20]	; (8041e64 <std+0x44>)
 8041e50:	6224      	str	r4, [r4, #32]
 8041e52:	6323      	str	r3, [r4, #48]	; 0x30
 8041e54:	bd10      	pop	{r4, pc}
 8041e56:	bf00      	nop
 8041e58:	08042735 	.word	0x08042735
 8041e5c:	08042757 	.word	0x08042757
 8041e60:	0804278f 	.word	0x0804278f
 8041e64:	080427b3 	.word	0x080427b3

08041e68 <_cleanup_r>:
 8041e68:	4901      	ldr	r1, [pc, #4]	; (8041e70 <_cleanup_r+0x8>)
 8041e6a:	f000 b8af 	b.w	8041fcc <_fwalk_reent>
 8041e6e:	bf00      	nop
 8041e70:	08042a8d 	.word	0x08042a8d

08041e74 <__sfmoreglue>:
 8041e74:	b570      	push	{r4, r5, r6, lr}
 8041e76:	2268      	movs	r2, #104	; 0x68
 8041e78:	1e4d      	subs	r5, r1, #1
 8041e7a:	4355      	muls	r5, r2
 8041e7c:	460e      	mov	r6, r1
 8041e7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8041e82:	f000 f8e5 	bl	8042050 <_malloc_r>
 8041e86:	4604      	mov	r4, r0
 8041e88:	b140      	cbz	r0, 8041e9c <__sfmoreglue+0x28>
 8041e8a:	2100      	movs	r1, #0
 8041e8c:	e9c0 1600 	strd	r1, r6, [r0]
 8041e90:	300c      	adds	r0, #12
 8041e92:	60a0      	str	r0, [r4, #8]
 8041e94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8041e98:	f7ff ffa2 	bl	8041de0 <memset>
 8041e9c:	4620      	mov	r0, r4
 8041e9e:	bd70      	pop	{r4, r5, r6, pc}

08041ea0 <__sfp_lock_acquire>:
 8041ea0:	4801      	ldr	r0, [pc, #4]	; (8041ea8 <__sfp_lock_acquire+0x8>)
 8041ea2:	f000 b8b3 	b.w	804200c <__retarget_lock_acquire_recursive>
 8041ea6:	bf00      	nop
 8041ea8:	20000091 	.word	0x20000091

08041eac <__sfp_lock_release>:
 8041eac:	4801      	ldr	r0, [pc, #4]	; (8041eb4 <__sfp_lock_release+0x8>)
 8041eae:	f000 b8ae 	b.w	804200e <__retarget_lock_release_recursive>
 8041eb2:	bf00      	nop
 8041eb4:	20000091 	.word	0x20000091

08041eb8 <__sinit_lock_acquire>:
 8041eb8:	4801      	ldr	r0, [pc, #4]	; (8041ec0 <__sinit_lock_acquire+0x8>)
 8041eba:	f000 b8a7 	b.w	804200c <__retarget_lock_acquire_recursive>
 8041ebe:	bf00      	nop
 8041ec0:	20000092 	.word	0x20000092

08041ec4 <__sinit_lock_release>:
 8041ec4:	4801      	ldr	r0, [pc, #4]	; (8041ecc <__sinit_lock_release+0x8>)
 8041ec6:	f000 b8a2 	b.w	804200e <__retarget_lock_release_recursive>
 8041eca:	bf00      	nop
 8041ecc:	20000092 	.word	0x20000092

08041ed0 <__sinit>:
 8041ed0:	b510      	push	{r4, lr}
 8041ed2:	4604      	mov	r4, r0
 8041ed4:	f7ff fff0 	bl	8041eb8 <__sinit_lock_acquire>
 8041ed8:	69a3      	ldr	r3, [r4, #24]
 8041eda:	b11b      	cbz	r3, 8041ee4 <__sinit+0x14>
 8041edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8041ee0:	f7ff bff0 	b.w	8041ec4 <__sinit_lock_release>
 8041ee4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8041ee8:	6523      	str	r3, [r4, #80]	; 0x50
 8041eea:	4b13      	ldr	r3, [pc, #76]	; (8041f38 <__sinit+0x68>)
 8041eec:	4a13      	ldr	r2, [pc, #76]	; (8041f3c <__sinit+0x6c>)
 8041eee:	681b      	ldr	r3, [r3, #0]
 8041ef0:	62a2      	str	r2, [r4, #40]	; 0x28
 8041ef2:	42a3      	cmp	r3, r4
 8041ef4:	bf04      	itt	eq
 8041ef6:	2301      	moveq	r3, #1
 8041ef8:	61a3      	streq	r3, [r4, #24]
 8041efa:	4620      	mov	r0, r4
 8041efc:	f000 f820 	bl	8041f40 <__sfp>
 8041f00:	6060      	str	r0, [r4, #4]
 8041f02:	4620      	mov	r0, r4
 8041f04:	f000 f81c 	bl	8041f40 <__sfp>
 8041f08:	60a0      	str	r0, [r4, #8]
 8041f0a:	4620      	mov	r0, r4
 8041f0c:	f000 f818 	bl	8041f40 <__sfp>
 8041f10:	2200      	movs	r2, #0
 8041f12:	60e0      	str	r0, [r4, #12]
 8041f14:	2104      	movs	r1, #4
 8041f16:	6860      	ldr	r0, [r4, #4]
 8041f18:	f7ff ff82 	bl	8041e20 <std>
 8041f1c:	68a0      	ldr	r0, [r4, #8]
 8041f1e:	2201      	movs	r2, #1
 8041f20:	2109      	movs	r1, #9
 8041f22:	f7ff ff7d 	bl	8041e20 <std>
 8041f26:	68e0      	ldr	r0, [r4, #12]
 8041f28:	2202      	movs	r2, #2
 8041f2a:	2112      	movs	r1, #18
 8041f2c:	f7ff ff78 	bl	8041e20 <std>
 8041f30:	2301      	movs	r3, #1
 8041f32:	61a3      	str	r3, [r4, #24]
 8041f34:	e7d2      	b.n	8041edc <__sinit+0xc>
 8041f36:	bf00      	nop
 8041f38:	08042d54 	.word	0x08042d54
 8041f3c:	08041e69 	.word	0x08041e69

08041f40 <__sfp>:
 8041f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8041f42:	4607      	mov	r7, r0
 8041f44:	f7ff ffac 	bl	8041ea0 <__sfp_lock_acquire>
 8041f48:	4b1e      	ldr	r3, [pc, #120]	; (8041fc4 <__sfp+0x84>)
 8041f4a:	681e      	ldr	r6, [r3, #0]
 8041f4c:	69b3      	ldr	r3, [r6, #24]
 8041f4e:	b913      	cbnz	r3, 8041f56 <__sfp+0x16>
 8041f50:	4630      	mov	r0, r6
 8041f52:	f7ff ffbd 	bl	8041ed0 <__sinit>
 8041f56:	3648      	adds	r6, #72	; 0x48
 8041f58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8041f5c:	3b01      	subs	r3, #1
 8041f5e:	d503      	bpl.n	8041f68 <__sfp+0x28>
 8041f60:	6833      	ldr	r3, [r6, #0]
 8041f62:	b30b      	cbz	r3, 8041fa8 <__sfp+0x68>
 8041f64:	6836      	ldr	r6, [r6, #0]
 8041f66:	e7f7      	b.n	8041f58 <__sfp+0x18>
 8041f68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8041f6c:	b9d5      	cbnz	r5, 8041fa4 <__sfp+0x64>
 8041f6e:	4b16      	ldr	r3, [pc, #88]	; (8041fc8 <__sfp+0x88>)
 8041f70:	60e3      	str	r3, [r4, #12]
 8041f72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8041f76:	6665      	str	r5, [r4, #100]	; 0x64
 8041f78:	f000 f847 	bl	804200a <__retarget_lock_init_recursive>
 8041f7c:	f7ff ff96 	bl	8041eac <__sfp_lock_release>
 8041f80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8041f84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8041f88:	6025      	str	r5, [r4, #0]
 8041f8a:	61a5      	str	r5, [r4, #24]
 8041f8c:	2208      	movs	r2, #8
 8041f8e:	4629      	mov	r1, r5
 8041f90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8041f94:	f7ff ff24 	bl	8041de0 <memset>
 8041f98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8041f9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8041fa0:	4620      	mov	r0, r4
 8041fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8041fa4:	3468      	adds	r4, #104	; 0x68
 8041fa6:	e7d9      	b.n	8041f5c <__sfp+0x1c>
 8041fa8:	2104      	movs	r1, #4
 8041faa:	4638      	mov	r0, r7
 8041fac:	f7ff ff62 	bl	8041e74 <__sfmoreglue>
 8041fb0:	4604      	mov	r4, r0
 8041fb2:	6030      	str	r0, [r6, #0]
 8041fb4:	2800      	cmp	r0, #0
 8041fb6:	d1d5      	bne.n	8041f64 <__sfp+0x24>
 8041fb8:	f7ff ff78 	bl	8041eac <__sfp_lock_release>
 8041fbc:	230c      	movs	r3, #12
 8041fbe:	603b      	str	r3, [r7, #0]
 8041fc0:	e7ee      	b.n	8041fa0 <__sfp+0x60>
 8041fc2:	bf00      	nop
 8041fc4:	08042d54 	.word	0x08042d54
 8041fc8:	ffff0001 	.word	0xffff0001

08041fcc <_fwalk_reent>:
 8041fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8041fd0:	4606      	mov	r6, r0
 8041fd2:	4688      	mov	r8, r1
 8041fd4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8041fd8:	2700      	movs	r7, #0
 8041fda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8041fde:	f1b9 0901 	subs.w	r9, r9, #1
 8041fe2:	d505      	bpl.n	8041ff0 <_fwalk_reent+0x24>
 8041fe4:	6824      	ldr	r4, [r4, #0]
 8041fe6:	2c00      	cmp	r4, #0
 8041fe8:	d1f7      	bne.n	8041fda <_fwalk_reent+0xe>
 8041fea:	4638      	mov	r0, r7
 8041fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8041ff0:	89ab      	ldrh	r3, [r5, #12]
 8041ff2:	2b01      	cmp	r3, #1
 8041ff4:	d907      	bls.n	8042006 <_fwalk_reent+0x3a>
 8041ff6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8041ffa:	3301      	adds	r3, #1
 8041ffc:	d003      	beq.n	8042006 <_fwalk_reent+0x3a>
 8041ffe:	4629      	mov	r1, r5
 8042000:	4630      	mov	r0, r6
 8042002:	47c0      	blx	r8
 8042004:	4307      	orrs	r7, r0
 8042006:	3568      	adds	r5, #104	; 0x68
 8042008:	e7e9      	b.n	8041fde <_fwalk_reent+0x12>

0804200a <__retarget_lock_init_recursive>:
 804200a:	4770      	bx	lr

0804200c <__retarget_lock_acquire_recursive>:
 804200c:	4770      	bx	lr

0804200e <__retarget_lock_release_recursive>:
 804200e:	4770      	bx	lr

08042010 <sbrk_aligned>:
 8042010:	b570      	push	{r4, r5, r6, lr}
 8042012:	4e0e      	ldr	r6, [pc, #56]	; (804204c <sbrk_aligned+0x3c>)
 8042014:	460c      	mov	r4, r1
 8042016:	6831      	ldr	r1, [r6, #0]
 8042018:	4605      	mov	r5, r0
 804201a:	b911      	cbnz	r1, 8042022 <sbrk_aligned+0x12>
 804201c:	f000 fb7a 	bl	8042714 <_sbrk_r>
 8042020:	6030      	str	r0, [r6, #0]
 8042022:	4621      	mov	r1, r4
 8042024:	4628      	mov	r0, r5
 8042026:	f000 fb75 	bl	8042714 <_sbrk_r>
 804202a:	1c43      	adds	r3, r0, #1
 804202c:	d00a      	beq.n	8042044 <sbrk_aligned+0x34>
 804202e:	1cc4      	adds	r4, r0, #3
 8042030:	f024 0403 	bic.w	r4, r4, #3
 8042034:	42a0      	cmp	r0, r4
 8042036:	d007      	beq.n	8042048 <sbrk_aligned+0x38>
 8042038:	1a21      	subs	r1, r4, r0
 804203a:	4628      	mov	r0, r5
 804203c:	f000 fb6a 	bl	8042714 <_sbrk_r>
 8042040:	3001      	adds	r0, #1
 8042042:	d101      	bne.n	8042048 <sbrk_aligned+0x38>
 8042044:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8042048:	4620      	mov	r0, r4
 804204a:	bd70      	pop	{r4, r5, r6, pc}
 804204c:	20000098 	.word	0x20000098

08042050 <_malloc_r>:
 8042050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042054:	1ccd      	adds	r5, r1, #3
 8042056:	f025 0503 	bic.w	r5, r5, #3
 804205a:	3508      	adds	r5, #8
 804205c:	2d0c      	cmp	r5, #12
 804205e:	bf38      	it	cc
 8042060:	250c      	movcc	r5, #12
 8042062:	2d00      	cmp	r5, #0
 8042064:	4607      	mov	r7, r0
 8042066:	db01      	blt.n	804206c <_malloc_r+0x1c>
 8042068:	42a9      	cmp	r1, r5
 804206a:	d905      	bls.n	8042078 <_malloc_r+0x28>
 804206c:	230c      	movs	r3, #12
 804206e:	603b      	str	r3, [r7, #0]
 8042070:	2600      	movs	r6, #0
 8042072:	4630      	mov	r0, r6
 8042074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8042078:	4e2e      	ldr	r6, [pc, #184]	; (8042134 <_malloc_r+0xe4>)
 804207a:	f000 fdbb 	bl	8042bf4 <__malloc_lock>
 804207e:	6833      	ldr	r3, [r6, #0]
 8042080:	461c      	mov	r4, r3
 8042082:	bb34      	cbnz	r4, 80420d2 <_malloc_r+0x82>
 8042084:	4629      	mov	r1, r5
 8042086:	4638      	mov	r0, r7
 8042088:	f7ff ffc2 	bl	8042010 <sbrk_aligned>
 804208c:	1c43      	adds	r3, r0, #1
 804208e:	4604      	mov	r4, r0
 8042090:	d14d      	bne.n	804212e <_malloc_r+0xde>
 8042092:	6834      	ldr	r4, [r6, #0]
 8042094:	4626      	mov	r6, r4
 8042096:	2e00      	cmp	r6, #0
 8042098:	d140      	bne.n	804211c <_malloc_r+0xcc>
 804209a:	6823      	ldr	r3, [r4, #0]
 804209c:	4631      	mov	r1, r6
 804209e:	4638      	mov	r0, r7
 80420a0:	eb04 0803 	add.w	r8, r4, r3
 80420a4:	f000 fb36 	bl	8042714 <_sbrk_r>
 80420a8:	4580      	cmp	r8, r0
 80420aa:	d13a      	bne.n	8042122 <_malloc_r+0xd2>
 80420ac:	6821      	ldr	r1, [r4, #0]
 80420ae:	3503      	adds	r5, #3
 80420b0:	1a6d      	subs	r5, r5, r1
 80420b2:	f025 0503 	bic.w	r5, r5, #3
 80420b6:	3508      	adds	r5, #8
 80420b8:	2d0c      	cmp	r5, #12
 80420ba:	bf38      	it	cc
 80420bc:	250c      	movcc	r5, #12
 80420be:	4629      	mov	r1, r5
 80420c0:	4638      	mov	r0, r7
 80420c2:	f7ff ffa5 	bl	8042010 <sbrk_aligned>
 80420c6:	3001      	adds	r0, #1
 80420c8:	d02b      	beq.n	8042122 <_malloc_r+0xd2>
 80420ca:	6823      	ldr	r3, [r4, #0]
 80420cc:	442b      	add	r3, r5
 80420ce:	6023      	str	r3, [r4, #0]
 80420d0:	e00e      	b.n	80420f0 <_malloc_r+0xa0>
 80420d2:	6822      	ldr	r2, [r4, #0]
 80420d4:	1b52      	subs	r2, r2, r5
 80420d6:	d41e      	bmi.n	8042116 <_malloc_r+0xc6>
 80420d8:	2a0b      	cmp	r2, #11
 80420da:	d916      	bls.n	804210a <_malloc_r+0xba>
 80420dc:	1961      	adds	r1, r4, r5
 80420de:	42a3      	cmp	r3, r4
 80420e0:	6025      	str	r5, [r4, #0]
 80420e2:	bf18      	it	ne
 80420e4:	6059      	strne	r1, [r3, #4]
 80420e6:	6863      	ldr	r3, [r4, #4]
 80420e8:	bf08      	it	eq
 80420ea:	6031      	streq	r1, [r6, #0]
 80420ec:	5162      	str	r2, [r4, r5]
 80420ee:	604b      	str	r3, [r1, #4]
 80420f0:	4638      	mov	r0, r7
 80420f2:	f104 060b 	add.w	r6, r4, #11
 80420f6:	f000 fd83 	bl	8042c00 <__malloc_unlock>
 80420fa:	f026 0607 	bic.w	r6, r6, #7
 80420fe:	1d23      	adds	r3, r4, #4
 8042100:	1af2      	subs	r2, r6, r3
 8042102:	d0b6      	beq.n	8042072 <_malloc_r+0x22>
 8042104:	1b9b      	subs	r3, r3, r6
 8042106:	50a3      	str	r3, [r4, r2]
 8042108:	e7b3      	b.n	8042072 <_malloc_r+0x22>
 804210a:	6862      	ldr	r2, [r4, #4]
 804210c:	42a3      	cmp	r3, r4
 804210e:	bf0c      	ite	eq
 8042110:	6032      	streq	r2, [r6, #0]
 8042112:	605a      	strne	r2, [r3, #4]
 8042114:	e7ec      	b.n	80420f0 <_malloc_r+0xa0>
 8042116:	4623      	mov	r3, r4
 8042118:	6864      	ldr	r4, [r4, #4]
 804211a:	e7b2      	b.n	8042082 <_malloc_r+0x32>
 804211c:	4634      	mov	r4, r6
 804211e:	6876      	ldr	r6, [r6, #4]
 8042120:	e7b9      	b.n	8042096 <_malloc_r+0x46>
 8042122:	230c      	movs	r3, #12
 8042124:	603b      	str	r3, [r7, #0]
 8042126:	4638      	mov	r0, r7
 8042128:	f000 fd6a 	bl	8042c00 <__malloc_unlock>
 804212c:	e7a1      	b.n	8042072 <_malloc_r+0x22>
 804212e:	6025      	str	r5, [r4, #0]
 8042130:	e7de      	b.n	80420f0 <_malloc_r+0xa0>
 8042132:	bf00      	nop
 8042134:	20000094 	.word	0x20000094

08042138 <__sfputc_r>:
 8042138:	6893      	ldr	r3, [r2, #8]
 804213a:	3b01      	subs	r3, #1
 804213c:	2b00      	cmp	r3, #0
 804213e:	b410      	push	{r4}
 8042140:	6093      	str	r3, [r2, #8]
 8042142:	da08      	bge.n	8042156 <__sfputc_r+0x1e>
 8042144:	6994      	ldr	r4, [r2, #24]
 8042146:	42a3      	cmp	r3, r4
 8042148:	db01      	blt.n	804214e <__sfputc_r+0x16>
 804214a:	290a      	cmp	r1, #10
 804214c:	d103      	bne.n	8042156 <__sfputc_r+0x1e>
 804214e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8042152:	f000 bb33 	b.w	80427bc <__swbuf_r>
 8042156:	6813      	ldr	r3, [r2, #0]
 8042158:	1c58      	adds	r0, r3, #1
 804215a:	6010      	str	r0, [r2, #0]
 804215c:	7019      	strb	r1, [r3, #0]
 804215e:	4608      	mov	r0, r1
 8042160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8042164:	4770      	bx	lr

08042166 <__sfputs_r>:
 8042166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042168:	4606      	mov	r6, r0
 804216a:	460f      	mov	r7, r1
 804216c:	4614      	mov	r4, r2
 804216e:	18d5      	adds	r5, r2, r3
 8042170:	42ac      	cmp	r4, r5
 8042172:	d101      	bne.n	8042178 <__sfputs_r+0x12>
 8042174:	2000      	movs	r0, #0
 8042176:	e007      	b.n	8042188 <__sfputs_r+0x22>
 8042178:	f814 1b01 	ldrb.w	r1, [r4], #1
 804217c:	463a      	mov	r2, r7
 804217e:	4630      	mov	r0, r6
 8042180:	f7ff ffda 	bl	8042138 <__sfputc_r>
 8042184:	1c43      	adds	r3, r0, #1
 8042186:	d1f3      	bne.n	8042170 <__sfputs_r+0xa>
 8042188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804218c <_vfiprintf_r>:
 804218c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042190:	460d      	mov	r5, r1
 8042192:	b09d      	sub	sp, #116	; 0x74
 8042194:	4614      	mov	r4, r2
 8042196:	4698      	mov	r8, r3
 8042198:	4606      	mov	r6, r0
 804219a:	b118      	cbz	r0, 80421a4 <_vfiprintf_r+0x18>
 804219c:	6983      	ldr	r3, [r0, #24]
 804219e:	b90b      	cbnz	r3, 80421a4 <_vfiprintf_r+0x18>
 80421a0:	f7ff fe96 	bl	8041ed0 <__sinit>
 80421a4:	4b89      	ldr	r3, [pc, #548]	; (80423cc <_vfiprintf_r+0x240>)
 80421a6:	429d      	cmp	r5, r3
 80421a8:	d11b      	bne.n	80421e2 <_vfiprintf_r+0x56>
 80421aa:	6875      	ldr	r5, [r6, #4]
 80421ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80421ae:	07d9      	lsls	r1, r3, #31
 80421b0:	d405      	bmi.n	80421be <_vfiprintf_r+0x32>
 80421b2:	89ab      	ldrh	r3, [r5, #12]
 80421b4:	059a      	lsls	r2, r3, #22
 80421b6:	d402      	bmi.n	80421be <_vfiprintf_r+0x32>
 80421b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80421ba:	f7ff ff27 	bl	804200c <__retarget_lock_acquire_recursive>
 80421be:	89ab      	ldrh	r3, [r5, #12]
 80421c0:	071b      	lsls	r3, r3, #28
 80421c2:	d501      	bpl.n	80421c8 <_vfiprintf_r+0x3c>
 80421c4:	692b      	ldr	r3, [r5, #16]
 80421c6:	b9eb      	cbnz	r3, 8042204 <_vfiprintf_r+0x78>
 80421c8:	4629      	mov	r1, r5
 80421ca:	4630      	mov	r0, r6
 80421cc:	f000 fb5a 	bl	8042884 <__swsetup_r>
 80421d0:	b1c0      	cbz	r0, 8042204 <_vfiprintf_r+0x78>
 80421d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80421d4:	07dc      	lsls	r4, r3, #31
 80421d6:	d50e      	bpl.n	80421f6 <_vfiprintf_r+0x6a>
 80421d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80421dc:	b01d      	add	sp, #116	; 0x74
 80421de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80421e2:	4b7b      	ldr	r3, [pc, #492]	; (80423d0 <_vfiprintf_r+0x244>)
 80421e4:	429d      	cmp	r5, r3
 80421e6:	d101      	bne.n	80421ec <_vfiprintf_r+0x60>
 80421e8:	68b5      	ldr	r5, [r6, #8]
 80421ea:	e7df      	b.n	80421ac <_vfiprintf_r+0x20>
 80421ec:	4b79      	ldr	r3, [pc, #484]	; (80423d4 <_vfiprintf_r+0x248>)
 80421ee:	429d      	cmp	r5, r3
 80421f0:	bf08      	it	eq
 80421f2:	68f5      	ldreq	r5, [r6, #12]
 80421f4:	e7da      	b.n	80421ac <_vfiprintf_r+0x20>
 80421f6:	89ab      	ldrh	r3, [r5, #12]
 80421f8:	0598      	lsls	r0, r3, #22
 80421fa:	d4ed      	bmi.n	80421d8 <_vfiprintf_r+0x4c>
 80421fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80421fe:	f7ff ff06 	bl	804200e <__retarget_lock_release_recursive>
 8042202:	e7e9      	b.n	80421d8 <_vfiprintf_r+0x4c>
 8042204:	2300      	movs	r3, #0
 8042206:	9309      	str	r3, [sp, #36]	; 0x24
 8042208:	2320      	movs	r3, #32
 804220a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804220e:	f8cd 800c 	str.w	r8, [sp, #12]
 8042212:	2330      	movs	r3, #48	; 0x30
 8042214:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80423d8 <_vfiprintf_r+0x24c>
 8042218:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804221c:	f04f 0901 	mov.w	r9, #1
 8042220:	4623      	mov	r3, r4
 8042222:	469a      	mov	sl, r3
 8042224:	f813 2b01 	ldrb.w	r2, [r3], #1
 8042228:	b10a      	cbz	r2, 804222e <_vfiprintf_r+0xa2>
 804222a:	2a25      	cmp	r2, #37	; 0x25
 804222c:	d1f9      	bne.n	8042222 <_vfiprintf_r+0x96>
 804222e:	ebba 0b04 	subs.w	fp, sl, r4
 8042232:	d00b      	beq.n	804224c <_vfiprintf_r+0xc0>
 8042234:	465b      	mov	r3, fp
 8042236:	4622      	mov	r2, r4
 8042238:	4629      	mov	r1, r5
 804223a:	4630      	mov	r0, r6
 804223c:	f7ff ff93 	bl	8042166 <__sfputs_r>
 8042240:	3001      	adds	r0, #1
 8042242:	f000 80aa 	beq.w	804239a <_vfiprintf_r+0x20e>
 8042246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8042248:	445a      	add	r2, fp
 804224a:	9209      	str	r2, [sp, #36]	; 0x24
 804224c:	f89a 3000 	ldrb.w	r3, [sl]
 8042250:	2b00      	cmp	r3, #0
 8042252:	f000 80a2 	beq.w	804239a <_vfiprintf_r+0x20e>
 8042256:	2300      	movs	r3, #0
 8042258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804225c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8042260:	f10a 0a01 	add.w	sl, sl, #1
 8042264:	9304      	str	r3, [sp, #16]
 8042266:	9307      	str	r3, [sp, #28]
 8042268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804226c:	931a      	str	r3, [sp, #104]	; 0x68
 804226e:	4654      	mov	r4, sl
 8042270:	2205      	movs	r2, #5
 8042272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8042276:	4858      	ldr	r0, [pc, #352]	; (80423d8 <_vfiprintf_r+0x24c>)
 8042278:	f7fd ffb2 	bl	80401e0 <memchr>
 804227c:	9a04      	ldr	r2, [sp, #16]
 804227e:	b9d8      	cbnz	r0, 80422b8 <_vfiprintf_r+0x12c>
 8042280:	06d1      	lsls	r1, r2, #27
 8042282:	bf44      	itt	mi
 8042284:	2320      	movmi	r3, #32
 8042286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804228a:	0713      	lsls	r3, r2, #28
 804228c:	bf44      	itt	mi
 804228e:	232b      	movmi	r3, #43	; 0x2b
 8042290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8042294:	f89a 3000 	ldrb.w	r3, [sl]
 8042298:	2b2a      	cmp	r3, #42	; 0x2a
 804229a:	d015      	beq.n	80422c8 <_vfiprintf_r+0x13c>
 804229c:	9a07      	ldr	r2, [sp, #28]
 804229e:	4654      	mov	r4, sl
 80422a0:	2000      	movs	r0, #0
 80422a2:	f04f 0c0a 	mov.w	ip, #10
 80422a6:	4621      	mov	r1, r4
 80422a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80422ac:	3b30      	subs	r3, #48	; 0x30
 80422ae:	2b09      	cmp	r3, #9
 80422b0:	d94e      	bls.n	8042350 <_vfiprintf_r+0x1c4>
 80422b2:	b1b0      	cbz	r0, 80422e2 <_vfiprintf_r+0x156>
 80422b4:	9207      	str	r2, [sp, #28]
 80422b6:	e014      	b.n	80422e2 <_vfiprintf_r+0x156>
 80422b8:	eba0 0308 	sub.w	r3, r0, r8
 80422bc:	fa09 f303 	lsl.w	r3, r9, r3
 80422c0:	4313      	orrs	r3, r2
 80422c2:	9304      	str	r3, [sp, #16]
 80422c4:	46a2      	mov	sl, r4
 80422c6:	e7d2      	b.n	804226e <_vfiprintf_r+0xe2>
 80422c8:	9b03      	ldr	r3, [sp, #12]
 80422ca:	1d19      	adds	r1, r3, #4
 80422cc:	681b      	ldr	r3, [r3, #0]
 80422ce:	9103      	str	r1, [sp, #12]
 80422d0:	2b00      	cmp	r3, #0
 80422d2:	bfbb      	ittet	lt
 80422d4:	425b      	neglt	r3, r3
 80422d6:	f042 0202 	orrlt.w	r2, r2, #2
 80422da:	9307      	strge	r3, [sp, #28]
 80422dc:	9307      	strlt	r3, [sp, #28]
 80422de:	bfb8      	it	lt
 80422e0:	9204      	strlt	r2, [sp, #16]
 80422e2:	7823      	ldrb	r3, [r4, #0]
 80422e4:	2b2e      	cmp	r3, #46	; 0x2e
 80422e6:	d10c      	bne.n	8042302 <_vfiprintf_r+0x176>
 80422e8:	7863      	ldrb	r3, [r4, #1]
 80422ea:	2b2a      	cmp	r3, #42	; 0x2a
 80422ec:	d135      	bne.n	804235a <_vfiprintf_r+0x1ce>
 80422ee:	9b03      	ldr	r3, [sp, #12]
 80422f0:	1d1a      	adds	r2, r3, #4
 80422f2:	681b      	ldr	r3, [r3, #0]
 80422f4:	9203      	str	r2, [sp, #12]
 80422f6:	2b00      	cmp	r3, #0
 80422f8:	bfb8      	it	lt
 80422fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80422fe:	3402      	adds	r4, #2
 8042300:	9305      	str	r3, [sp, #20]
 8042302:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80423e8 <_vfiprintf_r+0x25c>
 8042306:	7821      	ldrb	r1, [r4, #0]
 8042308:	2203      	movs	r2, #3
 804230a:	4650      	mov	r0, sl
 804230c:	f7fd ff68 	bl	80401e0 <memchr>
 8042310:	b140      	cbz	r0, 8042324 <_vfiprintf_r+0x198>
 8042312:	2340      	movs	r3, #64	; 0x40
 8042314:	eba0 000a 	sub.w	r0, r0, sl
 8042318:	fa03 f000 	lsl.w	r0, r3, r0
 804231c:	9b04      	ldr	r3, [sp, #16]
 804231e:	4303      	orrs	r3, r0
 8042320:	3401      	adds	r4, #1
 8042322:	9304      	str	r3, [sp, #16]
 8042324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8042328:	482c      	ldr	r0, [pc, #176]	; (80423dc <_vfiprintf_r+0x250>)
 804232a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804232e:	2206      	movs	r2, #6
 8042330:	f7fd ff56 	bl	80401e0 <memchr>
 8042334:	2800      	cmp	r0, #0
 8042336:	d03f      	beq.n	80423b8 <_vfiprintf_r+0x22c>
 8042338:	4b29      	ldr	r3, [pc, #164]	; (80423e0 <_vfiprintf_r+0x254>)
 804233a:	bb1b      	cbnz	r3, 8042384 <_vfiprintf_r+0x1f8>
 804233c:	9b03      	ldr	r3, [sp, #12]
 804233e:	3307      	adds	r3, #7
 8042340:	f023 0307 	bic.w	r3, r3, #7
 8042344:	3308      	adds	r3, #8
 8042346:	9303      	str	r3, [sp, #12]
 8042348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804234a:	443b      	add	r3, r7
 804234c:	9309      	str	r3, [sp, #36]	; 0x24
 804234e:	e767      	b.n	8042220 <_vfiprintf_r+0x94>
 8042350:	fb0c 3202 	mla	r2, ip, r2, r3
 8042354:	460c      	mov	r4, r1
 8042356:	2001      	movs	r0, #1
 8042358:	e7a5      	b.n	80422a6 <_vfiprintf_r+0x11a>
 804235a:	2300      	movs	r3, #0
 804235c:	3401      	adds	r4, #1
 804235e:	9305      	str	r3, [sp, #20]
 8042360:	4619      	mov	r1, r3
 8042362:	f04f 0c0a 	mov.w	ip, #10
 8042366:	4620      	mov	r0, r4
 8042368:	f810 2b01 	ldrb.w	r2, [r0], #1
 804236c:	3a30      	subs	r2, #48	; 0x30
 804236e:	2a09      	cmp	r2, #9
 8042370:	d903      	bls.n	804237a <_vfiprintf_r+0x1ee>
 8042372:	2b00      	cmp	r3, #0
 8042374:	d0c5      	beq.n	8042302 <_vfiprintf_r+0x176>
 8042376:	9105      	str	r1, [sp, #20]
 8042378:	e7c3      	b.n	8042302 <_vfiprintf_r+0x176>
 804237a:	fb0c 2101 	mla	r1, ip, r1, r2
 804237e:	4604      	mov	r4, r0
 8042380:	2301      	movs	r3, #1
 8042382:	e7f0      	b.n	8042366 <_vfiprintf_r+0x1da>
 8042384:	ab03      	add	r3, sp, #12
 8042386:	9300      	str	r3, [sp, #0]
 8042388:	462a      	mov	r2, r5
 804238a:	4b16      	ldr	r3, [pc, #88]	; (80423e4 <_vfiprintf_r+0x258>)
 804238c:	a904      	add	r1, sp, #16
 804238e:	4630      	mov	r0, r6
 8042390:	f3af 8000 	nop.w
 8042394:	4607      	mov	r7, r0
 8042396:	1c78      	adds	r0, r7, #1
 8042398:	d1d6      	bne.n	8042348 <_vfiprintf_r+0x1bc>
 804239a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804239c:	07d9      	lsls	r1, r3, #31
 804239e:	d405      	bmi.n	80423ac <_vfiprintf_r+0x220>
 80423a0:	89ab      	ldrh	r3, [r5, #12]
 80423a2:	059a      	lsls	r2, r3, #22
 80423a4:	d402      	bmi.n	80423ac <_vfiprintf_r+0x220>
 80423a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80423a8:	f7ff fe31 	bl	804200e <__retarget_lock_release_recursive>
 80423ac:	89ab      	ldrh	r3, [r5, #12]
 80423ae:	065b      	lsls	r3, r3, #25
 80423b0:	f53f af12 	bmi.w	80421d8 <_vfiprintf_r+0x4c>
 80423b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80423b6:	e711      	b.n	80421dc <_vfiprintf_r+0x50>
 80423b8:	ab03      	add	r3, sp, #12
 80423ba:	9300      	str	r3, [sp, #0]
 80423bc:	462a      	mov	r2, r5
 80423be:	4b09      	ldr	r3, [pc, #36]	; (80423e4 <_vfiprintf_r+0x258>)
 80423c0:	a904      	add	r1, sp, #16
 80423c2:	4630      	mov	r0, r6
 80423c4:	f000 f880 	bl	80424c8 <_printf_i>
 80423c8:	e7e4      	b.n	8042394 <_vfiprintf_r+0x208>
 80423ca:	bf00      	nop
 80423cc:	08042d78 	.word	0x08042d78
 80423d0:	08042d98 	.word	0x08042d98
 80423d4:	08042d58 	.word	0x08042d58
 80423d8:	08042db8 	.word	0x08042db8
 80423dc:	08042dc2 	.word	0x08042dc2
 80423e0:	00000000 	.word	0x00000000
 80423e4:	08042167 	.word	0x08042167
 80423e8:	08042dbe 	.word	0x08042dbe

080423ec <_printf_common>:
 80423ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80423f0:	4616      	mov	r6, r2
 80423f2:	4699      	mov	r9, r3
 80423f4:	688a      	ldr	r2, [r1, #8]
 80423f6:	690b      	ldr	r3, [r1, #16]
 80423f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80423fc:	4293      	cmp	r3, r2
 80423fe:	bfb8      	it	lt
 8042400:	4613      	movlt	r3, r2
 8042402:	6033      	str	r3, [r6, #0]
 8042404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8042408:	4607      	mov	r7, r0
 804240a:	460c      	mov	r4, r1
 804240c:	b10a      	cbz	r2, 8042412 <_printf_common+0x26>
 804240e:	3301      	adds	r3, #1
 8042410:	6033      	str	r3, [r6, #0]
 8042412:	6823      	ldr	r3, [r4, #0]
 8042414:	0699      	lsls	r1, r3, #26
 8042416:	bf42      	ittt	mi
 8042418:	6833      	ldrmi	r3, [r6, #0]
 804241a:	3302      	addmi	r3, #2
 804241c:	6033      	strmi	r3, [r6, #0]
 804241e:	6825      	ldr	r5, [r4, #0]
 8042420:	f015 0506 	ands.w	r5, r5, #6
 8042424:	d106      	bne.n	8042434 <_printf_common+0x48>
 8042426:	f104 0a19 	add.w	sl, r4, #25
 804242a:	68e3      	ldr	r3, [r4, #12]
 804242c:	6832      	ldr	r2, [r6, #0]
 804242e:	1a9b      	subs	r3, r3, r2
 8042430:	42ab      	cmp	r3, r5
 8042432:	dc26      	bgt.n	8042482 <_printf_common+0x96>
 8042434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8042438:	1e13      	subs	r3, r2, #0
 804243a:	6822      	ldr	r2, [r4, #0]
 804243c:	bf18      	it	ne
 804243e:	2301      	movne	r3, #1
 8042440:	0692      	lsls	r2, r2, #26
 8042442:	d42b      	bmi.n	804249c <_printf_common+0xb0>
 8042444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8042448:	4649      	mov	r1, r9
 804244a:	4638      	mov	r0, r7
 804244c:	47c0      	blx	r8
 804244e:	3001      	adds	r0, #1
 8042450:	d01e      	beq.n	8042490 <_printf_common+0xa4>
 8042452:	6823      	ldr	r3, [r4, #0]
 8042454:	68e5      	ldr	r5, [r4, #12]
 8042456:	6832      	ldr	r2, [r6, #0]
 8042458:	f003 0306 	and.w	r3, r3, #6
 804245c:	2b04      	cmp	r3, #4
 804245e:	bf08      	it	eq
 8042460:	1aad      	subeq	r5, r5, r2
 8042462:	68a3      	ldr	r3, [r4, #8]
 8042464:	6922      	ldr	r2, [r4, #16]
 8042466:	bf0c      	ite	eq
 8042468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804246c:	2500      	movne	r5, #0
 804246e:	4293      	cmp	r3, r2
 8042470:	bfc4      	itt	gt
 8042472:	1a9b      	subgt	r3, r3, r2
 8042474:	18ed      	addgt	r5, r5, r3
 8042476:	2600      	movs	r6, #0
 8042478:	341a      	adds	r4, #26
 804247a:	42b5      	cmp	r5, r6
 804247c:	d11a      	bne.n	80424b4 <_printf_common+0xc8>
 804247e:	2000      	movs	r0, #0
 8042480:	e008      	b.n	8042494 <_printf_common+0xa8>
 8042482:	2301      	movs	r3, #1
 8042484:	4652      	mov	r2, sl
 8042486:	4649      	mov	r1, r9
 8042488:	4638      	mov	r0, r7
 804248a:	47c0      	blx	r8
 804248c:	3001      	adds	r0, #1
 804248e:	d103      	bne.n	8042498 <_printf_common+0xac>
 8042490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8042494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8042498:	3501      	adds	r5, #1
 804249a:	e7c6      	b.n	804242a <_printf_common+0x3e>
 804249c:	18e1      	adds	r1, r4, r3
 804249e:	1c5a      	adds	r2, r3, #1
 80424a0:	2030      	movs	r0, #48	; 0x30
 80424a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80424a6:	4422      	add	r2, r4
 80424a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80424ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80424b0:	3302      	adds	r3, #2
 80424b2:	e7c7      	b.n	8042444 <_printf_common+0x58>
 80424b4:	2301      	movs	r3, #1
 80424b6:	4622      	mov	r2, r4
 80424b8:	4649      	mov	r1, r9
 80424ba:	4638      	mov	r0, r7
 80424bc:	47c0      	blx	r8
 80424be:	3001      	adds	r0, #1
 80424c0:	d0e6      	beq.n	8042490 <_printf_common+0xa4>
 80424c2:	3601      	adds	r6, #1
 80424c4:	e7d9      	b.n	804247a <_printf_common+0x8e>
	...

080424c8 <_printf_i>:
 80424c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80424cc:	7e0f      	ldrb	r7, [r1, #24]
 80424ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80424d0:	2f78      	cmp	r7, #120	; 0x78
 80424d2:	4691      	mov	r9, r2
 80424d4:	4680      	mov	r8, r0
 80424d6:	460c      	mov	r4, r1
 80424d8:	469a      	mov	sl, r3
 80424da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80424de:	d807      	bhi.n	80424f0 <_printf_i+0x28>
 80424e0:	2f62      	cmp	r7, #98	; 0x62
 80424e2:	d80a      	bhi.n	80424fa <_printf_i+0x32>
 80424e4:	2f00      	cmp	r7, #0
 80424e6:	f000 80d8 	beq.w	804269a <_printf_i+0x1d2>
 80424ea:	2f58      	cmp	r7, #88	; 0x58
 80424ec:	f000 80a3 	beq.w	8042636 <_printf_i+0x16e>
 80424f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80424f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80424f8:	e03a      	b.n	8042570 <_printf_i+0xa8>
 80424fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80424fe:	2b15      	cmp	r3, #21
 8042500:	d8f6      	bhi.n	80424f0 <_printf_i+0x28>
 8042502:	a101      	add	r1, pc, #4	; (adr r1, 8042508 <_printf_i+0x40>)
 8042504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8042508:	08042561 	.word	0x08042561
 804250c:	08042575 	.word	0x08042575
 8042510:	080424f1 	.word	0x080424f1
 8042514:	080424f1 	.word	0x080424f1
 8042518:	080424f1 	.word	0x080424f1
 804251c:	080424f1 	.word	0x080424f1
 8042520:	08042575 	.word	0x08042575
 8042524:	080424f1 	.word	0x080424f1
 8042528:	080424f1 	.word	0x080424f1
 804252c:	080424f1 	.word	0x080424f1
 8042530:	080424f1 	.word	0x080424f1
 8042534:	08042681 	.word	0x08042681
 8042538:	080425a5 	.word	0x080425a5
 804253c:	08042663 	.word	0x08042663
 8042540:	080424f1 	.word	0x080424f1
 8042544:	080424f1 	.word	0x080424f1
 8042548:	080426a3 	.word	0x080426a3
 804254c:	080424f1 	.word	0x080424f1
 8042550:	080425a5 	.word	0x080425a5
 8042554:	080424f1 	.word	0x080424f1
 8042558:	080424f1 	.word	0x080424f1
 804255c:	0804266b 	.word	0x0804266b
 8042560:	682b      	ldr	r3, [r5, #0]
 8042562:	1d1a      	adds	r2, r3, #4
 8042564:	681b      	ldr	r3, [r3, #0]
 8042566:	602a      	str	r2, [r5, #0]
 8042568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 804256c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8042570:	2301      	movs	r3, #1
 8042572:	e0a3      	b.n	80426bc <_printf_i+0x1f4>
 8042574:	6820      	ldr	r0, [r4, #0]
 8042576:	6829      	ldr	r1, [r5, #0]
 8042578:	0606      	lsls	r6, r0, #24
 804257a:	f101 0304 	add.w	r3, r1, #4
 804257e:	d50a      	bpl.n	8042596 <_printf_i+0xce>
 8042580:	680e      	ldr	r6, [r1, #0]
 8042582:	602b      	str	r3, [r5, #0]
 8042584:	2e00      	cmp	r6, #0
 8042586:	da03      	bge.n	8042590 <_printf_i+0xc8>
 8042588:	232d      	movs	r3, #45	; 0x2d
 804258a:	4276      	negs	r6, r6
 804258c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8042590:	485e      	ldr	r0, [pc, #376]	; (804270c <_printf_i+0x244>)
 8042592:	230a      	movs	r3, #10
 8042594:	e019      	b.n	80425ca <_printf_i+0x102>
 8042596:	680e      	ldr	r6, [r1, #0]
 8042598:	602b      	str	r3, [r5, #0]
 804259a:	f010 0f40 	tst.w	r0, #64	; 0x40
 804259e:	bf18      	it	ne
 80425a0:	b236      	sxthne	r6, r6
 80425a2:	e7ef      	b.n	8042584 <_printf_i+0xbc>
 80425a4:	682b      	ldr	r3, [r5, #0]
 80425a6:	6820      	ldr	r0, [r4, #0]
 80425a8:	1d19      	adds	r1, r3, #4
 80425aa:	6029      	str	r1, [r5, #0]
 80425ac:	0601      	lsls	r1, r0, #24
 80425ae:	d501      	bpl.n	80425b4 <_printf_i+0xec>
 80425b0:	681e      	ldr	r6, [r3, #0]
 80425b2:	e002      	b.n	80425ba <_printf_i+0xf2>
 80425b4:	0646      	lsls	r6, r0, #25
 80425b6:	d5fb      	bpl.n	80425b0 <_printf_i+0xe8>
 80425b8:	881e      	ldrh	r6, [r3, #0]
 80425ba:	4854      	ldr	r0, [pc, #336]	; (804270c <_printf_i+0x244>)
 80425bc:	2f6f      	cmp	r7, #111	; 0x6f
 80425be:	bf0c      	ite	eq
 80425c0:	2308      	moveq	r3, #8
 80425c2:	230a      	movne	r3, #10
 80425c4:	2100      	movs	r1, #0
 80425c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80425ca:	6865      	ldr	r5, [r4, #4]
 80425cc:	60a5      	str	r5, [r4, #8]
 80425ce:	2d00      	cmp	r5, #0
 80425d0:	bfa2      	ittt	ge
 80425d2:	6821      	ldrge	r1, [r4, #0]
 80425d4:	f021 0104 	bicge.w	r1, r1, #4
 80425d8:	6021      	strge	r1, [r4, #0]
 80425da:	b90e      	cbnz	r6, 80425e0 <_printf_i+0x118>
 80425dc:	2d00      	cmp	r5, #0
 80425de:	d04d      	beq.n	804267c <_printf_i+0x1b4>
 80425e0:	4615      	mov	r5, r2
 80425e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80425e6:	fb03 6711 	mls	r7, r3, r1, r6
 80425ea:	5dc7      	ldrb	r7, [r0, r7]
 80425ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80425f0:	4637      	mov	r7, r6
 80425f2:	42bb      	cmp	r3, r7
 80425f4:	460e      	mov	r6, r1
 80425f6:	d9f4      	bls.n	80425e2 <_printf_i+0x11a>
 80425f8:	2b08      	cmp	r3, #8
 80425fa:	d10b      	bne.n	8042614 <_printf_i+0x14c>
 80425fc:	6823      	ldr	r3, [r4, #0]
 80425fe:	07de      	lsls	r6, r3, #31
 8042600:	d508      	bpl.n	8042614 <_printf_i+0x14c>
 8042602:	6923      	ldr	r3, [r4, #16]
 8042604:	6861      	ldr	r1, [r4, #4]
 8042606:	4299      	cmp	r1, r3
 8042608:	bfde      	ittt	le
 804260a:	2330      	movle	r3, #48	; 0x30
 804260c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8042610:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8042614:	1b52      	subs	r2, r2, r5
 8042616:	6122      	str	r2, [r4, #16]
 8042618:	f8cd a000 	str.w	sl, [sp]
 804261c:	464b      	mov	r3, r9
 804261e:	aa03      	add	r2, sp, #12
 8042620:	4621      	mov	r1, r4
 8042622:	4640      	mov	r0, r8
 8042624:	f7ff fee2 	bl	80423ec <_printf_common>
 8042628:	3001      	adds	r0, #1
 804262a:	d14c      	bne.n	80426c6 <_printf_i+0x1fe>
 804262c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8042630:	b004      	add	sp, #16
 8042632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8042636:	4835      	ldr	r0, [pc, #212]	; (804270c <_printf_i+0x244>)
 8042638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 804263c:	6829      	ldr	r1, [r5, #0]
 804263e:	6823      	ldr	r3, [r4, #0]
 8042640:	f851 6b04 	ldr.w	r6, [r1], #4
 8042644:	6029      	str	r1, [r5, #0]
 8042646:	061d      	lsls	r5, r3, #24
 8042648:	d514      	bpl.n	8042674 <_printf_i+0x1ac>
 804264a:	07df      	lsls	r7, r3, #31
 804264c:	bf44      	itt	mi
 804264e:	f043 0320 	orrmi.w	r3, r3, #32
 8042652:	6023      	strmi	r3, [r4, #0]
 8042654:	b91e      	cbnz	r6, 804265e <_printf_i+0x196>
 8042656:	6823      	ldr	r3, [r4, #0]
 8042658:	f023 0320 	bic.w	r3, r3, #32
 804265c:	6023      	str	r3, [r4, #0]
 804265e:	2310      	movs	r3, #16
 8042660:	e7b0      	b.n	80425c4 <_printf_i+0xfc>
 8042662:	6823      	ldr	r3, [r4, #0]
 8042664:	f043 0320 	orr.w	r3, r3, #32
 8042668:	6023      	str	r3, [r4, #0]
 804266a:	2378      	movs	r3, #120	; 0x78
 804266c:	4828      	ldr	r0, [pc, #160]	; (8042710 <_printf_i+0x248>)
 804266e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8042672:	e7e3      	b.n	804263c <_printf_i+0x174>
 8042674:	0659      	lsls	r1, r3, #25
 8042676:	bf48      	it	mi
 8042678:	b2b6      	uxthmi	r6, r6
 804267a:	e7e6      	b.n	804264a <_printf_i+0x182>
 804267c:	4615      	mov	r5, r2
 804267e:	e7bb      	b.n	80425f8 <_printf_i+0x130>
 8042680:	682b      	ldr	r3, [r5, #0]
 8042682:	6826      	ldr	r6, [r4, #0]
 8042684:	6961      	ldr	r1, [r4, #20]
 8042686:	1d18      	adds	r0, r3, #4
 8042688:	6028      	str	r0, [r5, #0]
 804268a:	0635      	lsls	r5, r6, #24
 804268c:	681b      	ldr	r3, [r3, #0]
 804268e:	d501      	bpl.n	8042694 <_printf_i+0x1cc>
 8042690:	6019      	str	r1, [r3, #0]
 8042692:	e002      	b.n	804269a <_printf_i+0x1d2>
 8042694:	0670      	lsls	r0, r6, #25
 8042696:	d5fb      	bpl.n	8042690 <_printf_i+0x1c8>
 8042698:	8019      	strh	r1, [r3, #0]
 804269a:	2300      	movs	r3, #0
 804269c:	6123      	str	r3, [r4, #16]
 804269e:	4615      	mov	r5, r2
 80426a0:	e7ba      	b.n	8042618 <_printf_i+0x150>
 80426a2:	682b      	ldr	r3, [r5, #0]
 80426a4:	1d1a      	adds	r2, r3, #4
 80426a6:	602a      	str	r2, [r5, #0]
 80426a8:	681d      	ldr	r5, [r3, #0]
 80426aa:	6862      	ldr	r2, [r4, #4]
 80426ac:	2100      	movs	r1, #0
 80426ae:	4628      	mov	r0, r5
 80426b0:	f7fd fd96 	bl	80401e0 <memchr>
 80426b4:	b108      	cbz	r0, 80426ba <_printf_i+0x1f2>
 80426b6:	1b40      	subs	r0, r0, r5
 80426b8:	6060      	str	r0, [r4, #4]
 80426ba:	6863      	ldr	r3, [r4, #4]
 80426bc:	6123      	str	r3, [r4, #16]
 80426be:	2300      	movs	r3, #0
 80426c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80426c4:	e7a8      	b.n	8042618 <_printf_i+0x150>
 80426c6:	6923      	ldr	r3, [r4, #16]
 80426c8:	462a      	mov	r2, r5
 80426ca:	4649      	mov	r1, r9
 80426cc:	4640      	mov	r0, r8
 80426ce:	47d0      	blx	sl
 80426d0:	3001      	adds	r0, #1
 80426d2:	d0ab      	beq.n	804262c <_printf_i+0x164>
 80426d4:	6823      	ldr	r3, [r4, #0]
 80426d6:	079b      	lsls	r3, r3, #30
 80426d8:	d413      	bmi.n	8042702 <_printf_i+0x23a>
 80426da:	68e0      	ldr	r0, [r4, #12]
 80426dc:	9b03      	ldr	r3, [sp, #12]
 80426de:	4298      	cmp	r0, r3
 80426e0:	bfb8      	it	lt
 80426e2:	4618      	movlt	r0, r3
 80426e4:	e7a4      	b.n	8042630 <_printf_i+0x168>
 80426e6:	2301      	movs	r3, #1
 80426e8:	4632      	mov	r2, r6
 80426ea:	4649      	mov	r1, r9
 80426ec:	4640      	mov	r0, r8
 80426ee:	47d0      	blx	sl
 80426f0:	3001      	adds	r0, #1
 80426f2:	d09b      	beq.n	804262c <_printf_i+0x164>
 80426f4:	3501      	adds	r5, #1
 80426f6:	68e3      	ldr	r3, [r4, #12]
 80426f8:	9903      	ldr	r1, [sp, #12]
 80426fa:	1a5b      	subs	r3, r3, r1
 80426fc:	42ab      	cmp	r3, r5
 80426fe:	dcf2      	bgt.n	80426e6 <_printf_i+0x21e>
 8042700:	e7eb      	b.n	80426da <_printf_i+0x212>
 8042702:	2500      	movs	r5, #0
 8042704:	f104 0619 	add.w	r6, r4, #25
 8042708:	e7f5      	b.n	80426f6 <_printf_i+0x22e>
 804270a:	bf00      	nop
 804270c:	08042dc9 	.word	0x08042dc9
 8042710:	08042dda 	.word	0x08042dda

08042714 <_sbrk_r>:
 8042714:	b538      	push	{r3, r4, r5, lr}
 8042716:	4d06      	ldr	r5, [pc, #24]	; (8042730 <_sbrk_r+0x1c>)
 8042718:	2300      	movs	r3, #0
 804271a:	4604      	mov	r4, r0
 804271c:	4608      	mov	r0, r1
 804271e:	602b      	str	r3, [r5, #0]
 8042720:	f7fe fbf0 	bl	8040f04 <_sbrk>
 8042724:	1c43      	adds	r3, r0, #1
 8042726:	d102      	bne.n	804272e <_sbrk_r+0x1a>
 8042728:	682b      	ldr	r3, [r5, #0]
 804272a:	b103      	cbz	r3, 804272e <_sbrk_r+0x1a>
 804272c:	6023      	str	r3, [r4, #0]
 804272e:	bd38      	pop	{r3, r4, r5, pc}
 8042730:	2000009c 	.word	0x2000009c

08042734 <__sread>:
 8042734:	b510      	push	{r4, lr}
 8042736:	460c      	mov	r4, r1
 8042738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804273c:	f000 fab2 	bl	8042ca4 <_read_r>
 8042740:	2800      	cmp	r0, #0
 8042742:	bfab      	itete	ge
 8042744:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8042746:	89a3      	ldrhlt	r3, [r4, #12]
 8042748:	181b      	addge	r3, r3, r0
 804274a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804274e:	bfac      	ite	ge
 8042750:	6563      	strge	r3, [r4, #84]	; 0x54
 8042752:	81a3      	strhlt	r3, [r4, #12]
 8042754:	bd10      	pop	{r4, pc}

08042756 <__swrite>:
 8042756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804275a:	461f      	mov	r7, r3
 804275c:	898b      	ldrh	r3, [r1, #12]
 804275e:	05db      	lsls	r3, r3, #23
 8042760:	4605      	mov	r5, r0
 8042762:	460c      	mov	r4, r1
 8042764:	4616      	mov	r6, r2
 8042766:	d505      	bpl.n	8042774 <__swrite+0x1e>
 8042768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804276c:	2302      	movs	r3, #2
 804276e:	2200      	movs	r2, #0
 8042770:	f000 f9c8 	bl	8042b04 <_lseek_r>
 8042774:	89a3      	ldrh	r3, [r4, #12]
 8042776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804277a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804277e:	81a3      	strh	r3, [r4, #12]
 8042780:	4632      	mov	r2, r6
 8042782:	463b      	mov	r3, r7
 8042784:	4628      	mov	r0, r5
 8042786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804278a:	f000 b869 	b.w	8042860 <_write_r>

0804278e <__sseek>:
 804278e:	b510      	push	{r4, lr}
 8042790:	460c      	mov	r4, r1
 8042792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042796:	f000 f9b5 	bl	8042b04 <_lseek_r>
 804279a:	1c43      	adds	r3, r0, #1
 804279c:	89a3      	ldrh	r3, [r4, #12]
 804279e:	bf15      	itete	ne
 80427a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80427a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80427a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80427aa:	81a3      	strheq	r3, [r4, #12]
 80427ac:	bf18      	it	ne
 80427ae:	81a3      	strhne	r3, [r4, #12]
 80427b0:	bd10      	pop	{r4, pc}

080427b2 <__sclose>:
 80427b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80427b6:	f000 b8d3 	b.w	8042960 <_close_r>
	...

080427bc <__swbuf_r>:
 80427bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80427be:	460e      	mov	r6, r1
 80427c0:	4614      	mov	r4, r2
 80427c2:	4605      	mov	r5, r0
 80427c4:	b118      	cbz	r0, 80427ce <__swbuf_r+0x12>
 80427c6:	6983      	ldr	r3, [r0, #24]
 80427c8:	b90b      	cbnz	r3, 80427ce <__swbuf_r+0x12>
 80427ca:	f7ff fb81 	bl	8041ed0 <__sinit>
 80427ce:	4b21      	ldr	r3, [pc, #132]	; (8042854 <__swbuf_r+0x98>)
 80427d0:	429c      	cmp	r4, r3
 80427d2:	d12b      	bne.n	804282c <__swbuf_r+0x70>
 80427d4:	686c      	ldr	r4, [r5, #4]
 80427d6:	69a3      	ldr	r3, [r4, #24]
 80427d8:	60a3      	str	r3, [r4, #8]
 80427da:	89a3      	ldrh	r3, [r4, #12]
 80427dc:	071a      	lsls	r2, r3, #28
 80427de:	d52f      	bpl.n	8042840 <__swbuf_r+0x84>
 80427e0:	6923      	ldr	r3, [r4, #16]
 80427e2:	b36b      	cbz	r3, 8042840 <__swbuf_r+0x84>
 80427e4:	6923      	ldr	r3, [r4, #16]
 80427e6:	6820      	ldr	r0, [r4, #0]
 80427e8:	1ac0      	subs	r0, r0, r3
 80427ea:	6963      	ldr	r3, [r4, #20]
 80427ec:	b2f6      	uxtb	r6, r6
 80427ee:	4283      	cmp	r3, r0
 80427f0:	4637      	mov	r7, r6
 80427f2:	dc04      	bgt.n	80427fe <__swbuf_r+0x42>
 80427f4:	4621      	mov	r1, r4
 80427f6:	4628      	mov	r0, r5
 80427f8:	f000 f948 	bl	8042a8c <_fflush_r>
 80427fc:	bb30      	cbnz	r0, 804284c <__swbuf_r+0x90>
 80427fe:	68a3      	ldr	r3, [r4, #8]
 8042800:	3b01      	subs	r3, #1
 8042802:	60a3      	str	r3, [r4, #8]
 8042804:	6823      	ldr	r3, [r4, #0]
 8042806:	1c5a      	adds	r2, r3, #1
 8042808:	6022      	str	r2, [r4, #0]
 804280a:	701e      	strb	r6, [r3, #0]
 804280c:	6963      	ldr	r3, [r4, #20]
 804280e:	3001      	adds	r0, #1
 8042810:	4283      	cmp	r3, r0
 8042812:	d004      	beq.n	804281e <__swbuf_r+0x62>
 8042814:	89a3      	ldrh	r3, [r4, #12]
 8042816:	07db      	lsls	r3, r3, #31
 8042818:	d506      	bpl.n	8042828 <__swbuf_r+0x6c>
 804281a:	2e0a      	cmp	r6, #10
 804281c:	d104      	bne.n	8042828 <__swbuf_r+0x6c>
 804281e:	4621      	mov	r1, r4
 8042820:	4628      	mov	r0, r5
 8042822:	f000 f933 	bl	8042a8c <_fflush_r>
 8042826:	b988      	cbnz	r0, 804284c <__swbuf_r+0x90>
 8042828:	4638      	mov	r0, r7
 804282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804282c:	4b0a      	ldr	r3, [pc, #40]	; (8042858 <__swbuf_r+0x9c>)
 804282e:	429c      	cmp	r4, r3
 8042830:	d101      	bne.n	8042836 <__swbuf_r+0x7a>
 8042832:	68ac      	ldr	r4, [r5, #8]
 8042834:	e7cf      	b.n	80427d6 <__swbuf_r+0x1a>
 8042836:	4b09      	ldr	r3, [pc, #36]	; (804285c <__swbuf_r+0xa0>)
 8042838:	429c      	cmp	r4, r3
 804283a:	bf08      	it	eq
 804283c:	68ec      	ldreq	r4, [r5, #12]
 804283e:	e7ca      	b.n	80427d6 <__swbuf_r+0x1a>
 8042840:	4621      	mov	r1, r4
 8042842:	4628      	mov	r0, r5
 8042844:	f000 f81e 	bl	8042884 <__swsetup_r>
 8042848:	2800      	cmp	r0, #0
 804284a:	d0cb      	beq.n	80427e4 <__swbuf_r+0x28>
 804284c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8042850:	e7ea      	b.n	8042828 <__swbuf_r+0x6c>
 8042852:	bf00      	nop
 8042854:	08042d78 	.word	0x08042d78
 8042858:	08042d98 	.word	0x08042d98
 804285c:	08042d58 	.word	0x08042d58

08042860 <_write_r>:
 8042860:	b538      	push	{r3, r4, r5, lr}
 8042862:	4d07      	ldr	r5, [pc, #28]	; (8042880 <_write_r+0x20>)
 8042864:	4604      	mov	r4, r0
 8042866:	4608      	mov	r0, r1
 8042868:	4611      	mov	r1, r2
 804286a:	2200      	movs	r2, #0
 804286c:	602a      	str	r2, [r5, #0]
 804286e:	461a      	mov	r2, r3
 8042870:	f7fe faf7 	bl	8040e62 <_write>
 8042874:	1c43      	adds	r3, r0, #1
 8042876:	d102      	bne.n	804287e <_write_r+0x1e>
 8042878:	682b      	ldr	r3, [r5, #0]
 804287a:	b103      	cbz	r3, 804287e <_write_r+0x1e>
 804287c:	6023      	str	r3, [r4, #0]
 804287e:	bd38      	pop	{r3, r4, r5, pc}
 8042880:	2000009c 	.word	0x2000009c

08042884 <__swsetup_r>:
 8042884:	4b32      	ldr	r3, [pc, #200]	; (8042950 <__swsetup_r+0xcc>)
 8042886:	b570      	push	{r4, r5, r6, lr}
 8042888:	681d      	ldr	r5, [r3, #0]
 804288a:	4606      	mov	r6, r0
 804288c:	460c      	mov	r4, r1
 804288e:	b125      	cbz	r5, 804289a <__swsetup_r+0x16>
 8042890:	69ab      	ldr	r3, [r5, #24]
 8042892:	b913      	cbnz	r3, 804289a <__swsetup_r+0x16>
 8042894:	4628      	mov	r0, r5
 8042896:	f7ff fb1b 	bl	8041ed0 <__sinit>
 804289a:	4b2e      	ldr	r3, [pc, #184]	; (8042954 <__swsetup_r+0xd0>)
 804289c:	429c      	cmp	r4, r3
 804289e:	d10f      	bne.n	80428c0 <__swsetup_r+0x3c>
 80428a0:	686c      	ldr	r4, [r5, #4]
 80428a2:	89a3      	ldrh	r3, [r4, #12]
 80428a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80428a8:	0719      	lsls	r1, r3, #28
 80428aa:	d42c      	bmi.n	8042906 <__swsetup_r+0x82>
 80428ac:	06dd      	lsls	r5, r3, #27
 80428ae:	d411      	bmi.n	80428d4 <__swsetup_r+0x50>
 80428b0:	2309      	movs	r3, #9
 80428b2:	6033      	str	r3, [r6, #0]
 80428b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80428b8:	81a3      	strh	r3, [r4, #12]
 80428ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80428be:	e03e      	b.n	804293e <__swsetup_r+0xba>
 80428c0:	4b25      	ldr	r3, [pc, #148]	; (8042958 <__swsetup_r+0xd4>)
 80428c2:	429c      	cmp	r4, r3
 80428c4:	d101      	bne.n	80428ca <__swsetup_r+0x46>
 80428c6:	68ac      	ldr	r4, [r5, #8]
 80428c8:	e7eb      	b.n	80428a2 <__swsetup_r+0x1e>
 80428ca:	4b24      	ldr	r3, [pc, #144]	; (804295c <__swsetup_r+0xd8>)
 80428cc:	429c      	cmp	r4, r3
 80428ce:	bf08      	it	eq
 80428d0:	68ec      	ldreq	r4, [r5, #12]
 80428d2:	e7e6      	b.n	80428a2 <__swsetup_r+0x1e>
 80428d4:	0758      	lsls	r0, r3, #29
 80428d6:	d512      	bpl.n	80428fe <__swsetup_r+0x7a>
 80428d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80428da:	b141      	cbz	r1, 80428ee <__swsetup_r+0x6a>
 80428dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80428e0:	4299      	cmp	r1, r3
 80428e2:	d002      	beq.n	80428ea <__swsetup_r+0x66>
 80428e4:	4630      	mov	r0, r6
 80428e6:	f000 f991 	bl	8042c0c <_free_r>
 80428ea:	2300      	movs	r3, #0
 80428ec:	6363      	str	r3, [r4, #52]	; 0x34
 80428ee:	89a3      	ldrh	r3, [r4, #12]
 80428f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80428f4:	81a3      	strh	r3, [r4, #12]
 80428f6:	2300      	movs	r3, #0
 80428f8:	6063      	str	r3, [r4, #4]
 80428fa:	6923      	ldr	r3, [r4, #16]
 80428fc:	6023      	str	r3, [r4, #0]
 80428fe:	89a3      	ldrh	r3, [r4, #12]
 8042900:	f043 0308 	orr.w	r3, r3, #8
 8042904:	81a3      	strh	r3, [r4, #12]
 8042906:	6923      	ldr	r3, [r4, #16]
 8042908:	b94b      	cbnz	r3, 804291e <__swsetup_r+0x9a>
 804290a:	89a3      	ldrh	r3, [r4, #12]
 804290c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8042910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042914:	d003      	beq.n	804291e <__swsetup_r+0x9a>
 8042916:	4621      	mov	r1, r4
 8042918:	4630      	mov	r0, r6
 804291a:	f000 f92b 	bl	8042b74 <__smakebuf_r>
 804291e:	89a0      	ldrh	r0, [r4, #12]
 8042920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8042924:	f010 0301 	ands.w	r3, r0, #1
 8042928:	d00a      	beq.n	8042940 <__swsetup_r+0xbc>
 804292a:	2300      	movs	r3, #0
 804292c:	60a3      	str	r3, [r4, #8]
 804292e:	6963      	ldr	r3, [r4, #20]
 8042930:	425b      	negs	r3, r3
 8042932:	61a3      	str	r3, [r4, #24]
 8042934:	6923      	ldr	r3, [r4, #16]
 8042936:	b943      	cbnz	r3, 804294a <__swsetup_r+0xc6>
 8042938:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804293c:	d1ba      	bne.n	80428b4 <__swsetup_r+0x30>
 804293e:	bd70      	pop	{r4, r5, r6, pc}
 8042940:	0781      	lsls	r1, r0, #30
 8042942:	bf58      	it	pl
 8042944:	6963      	ldrpl	r3, [r4, #20]
 8042946:	60a3      	str	r3, [r4, #8]
 8042948:	e7f4      	b.n	8042934 <__swsetup_r+0xb0>
 804294a:	2000      	movs	r0, #0
 804294c:	e7f7      	b.n	804293e <__swsetup_r+0xba>
 804294e:	bf00      	nop
 8042950:	20000004 	.word	0x20000004
 8042954:	08042d78 	.word	0x08042d78
 8042958:	08042d98 	.word	0x08042d98
 804295c:	08042d58 	.word	0x08042d58

08042960 <_close_r>:
 8042960:	b538      	push	{r3, r4, r5, lr}
 8042962:	4d06      	ldr	r5, [pc, #24]	; (804297c <_close_r+0x1c>)
 8042964:	2300      	movs	r3, #0
 8042966:	4604      	mov	r4, r0
 8042968:	4608      	mov	r0, r1
 804296a:	602b      	str	r3, [r5, #0]
 804296c:	f7fe fa95 	bl	8040e9a <_close>
 8042970:	1c43      	adds	r3, r0, #1
 8042972:	d102      	bne.n	804297a <_close_r+0x1a>
 8042974:	682b      	ldr	r3, [r5, #0]
 8042976:	b103      	cbz	r3, 804297a <_close_r+0x1a>
 8042978:	6023      	str	r3, [r4, #0]
 804297a:	bd38      	pop	{r3, r4, r5, pc}
 804297c:	2000009c 	.word	0x2000009c

08042980 <__sflush_r>:
 8042980:	898a      	ldrh	r2, [r1, #12]
 8042982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042986:	4605      	mov	r5, r0
 8042988:	0710      	lsls	r0, r2, #28
 804298a:	460c      	mov	r4, r1
 804298c:	d458      	bmi.n	8042a40 <__sflush_r+0xc0>
 804298e:	684b      	ldr	r3, [r1, #4]
 8042990:	2b00      	cmp	r3, #0
 8042992:	dc05      	bgt.n	80429a0 <__sflush_r+0x20>
 8042994:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8042996:	2b00      	cmp	r3, #0
 8042998:	dc02      	bgt.n	80429a0 <__sflush_r+0x20>
 804299a:	2000      	movs	r0, #0
 804299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80429a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80429a2:	2e00      	cmp	r6, #0
 80429a4:	d0f9      	beq.n	804299a <__sflush_r+0x1a>
 80429a6:	2300      	movs	r3, #0
 80429a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80429ac:	682f      	ldr	r7, [r5, #0]
 80429ae:	602b      	str	r3, [r5, #0]
 80429b0:	d032      	beq.n	8042a18 <__sflush_r+0x98>
 80429b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80429b4:	89a3      	ldrh	r3, [r4, #12]
 80429b6:	075a      	lsls	r2, r3, #29
 80429b8:	d505      	bpl.n	80429c6 <__sflush_r+0x46>
 80429ba:	6863      	ldr	r3, [r4, #4]
 80429bc:	1ac0      	subs	r0, r0, r3
 80429be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80429c0:	b10b      	cbz	r3, 80429c6 <__sflush_r+0x46>
 80429c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80429c4:	1ac0      	subs	r0, r0, r3
 80429c6:	2300      	movs	r3, #0
 80429c8:	4602      	mov	r2, r0
 80429ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80429cc:	6a21      	ldr	r1, [r4, #32]
 80429ce:	4628      	mov	r0, r5
 80429d0:	47b0      	blx	r6
 80429d2:	1c43      	adds	r3, r0, #1
 80429d4:	89a3      	ldrh	r3, [r4, #12]
 80429d6:	d106      	bne.n	80429e6 <__sflush_r+0x66>
 80429d8:	6829      	ldr	r1, [r5, #0]
 80429da:	291d      	cmp	r1, #29
 80429dc:	d82c      	bhi.n	8042a38 <__sflush_r+0xb8>
 80429de:	4a2a      	ldr	r2, [pc, #168]	; (8042a88 <__sflush_r+0x108>)
 80429e0:	40ca      	lsrs	r2, r1
 80429e2:	07d6      	lsls	r6, r2, #31
 80429e4:	d528      	bpl.n	8042a38 <__sflush_r+0xb8>
 80429e6:	2200      	movs	r2, #0
 80429e8:	6062      	str	r2, [r4, #4]
 80429ea:	04d9      	lsls	r1, r3, #19
 80429ec:	6922      	ldr	r2, [r4, #16]
 80429ee:	6022      	str	r2, [r4, #0]
 80429f0:	d504      	bpl.n	80429fc <__sflush_r+0x7c>
 80429f2:	1c42      	adds	r2, r0, #1
 80429f4:	d101      	bne.n	80429fa <__sflush_r+0x7a>
 80429f6:	682b      	ldr	r3, [r5, #0]
 80429f8:	b903      	cbnz	r3, 80429fc <__sflush_r+0x7c>
 80429fa:	6560      	str	r0, [r4, #84]	; 0x54
 80429fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80429fe:	602f      	str	r7, [r5, #0]
 8042a00:	2900      	cmp	r1, #0
 8042a02:	d0ca      	beq.n	804299a <__sflush_r+0x1a>
 8042a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8042a08:	4299      	cmp	r1, r3
 8042a0a:	d002      	beq.n	8042a12 <__sflush_r+0x92>
 8042a0c:	4628      	mov	r0, r5
 8042a0e:	f000 f8fd 	bl	8042c0c <_free_r>
 8042a12:	2000      	movs	r0, #0
 8042a14:	6360      	str	r0, [r4, #52]	; 0x34
 8042a16:	e7c1      	b.n	804299c <__sflush_r+0x1c>
 8042a18:	6a21      	ldr	r1, [r4, #32]
 8042a1a:	2301      	movs	r3, #1
 8042a1c:	4628      	mov	r0, r5
 8042a1e:	47b0      	blx	r6
 8042a20:	1c41      	adds	r1, r0, #1
 8042a22:	d1c7      	bne.n	80429b4 <__sflush_r+0x34>
 8042a24:	682b      	ldr	r3, [r5, #0]
 8042a26:	2b00      	cmp	r3, #0
 8042a28:	d0c4      	beq.n	80429b4 <__sflush_r+0x34>
 8042a2a:	2b1d      	cmp	r3, #29
 8042a2c:	d001      	beq.n	8042a32 <__sflush_r+0xb2>
 8042a2e:	2b16      	cmp	r3, #22
 8042a30:	d101      	bne.n	8042a36 <__sflush_r+0xb6>
 8042a32:	602f      	str	r7, [r5, #0]
 8042a34:	e7b1      	b.n	804299a <__sflush_r+0x1a>
 8042a36:	89a3      	ldrh	r3, [r4, #12]
 8042a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042a3c:	81a3      	strh	r3, [r4, #12]
 8042a3e:	e7ad      	b.n	804299c <__sflush_r+0x1c>
 8042a40:	690f      	ldr	r7, [r1, #16]
 8042a42:	2f00      	cmp	r7, #0
 8042a44:	d0a9      	beq.n	804299a <__sflush_r+0x1a>
 8042a46:	0793      	lsls	r3, r2, #30
 8042a48:	680e      	ldr	r6, [r1, #0]
 8042a4a:	bf08      	it	eq
 8042a4c:	694b      	ldreq	r3, [r1, #20]
 8042a4e:	600f      	str	r7, [r1, #0]
 8042a50:	bf18      	it	ne
 8042a52:	2300      	movne	r3, #0
 8042a54:	eba6 0807 	sub.w	r8, r6, r7
 8042a58:	608b      	str	r3, [r1, #8]
 8042a5a:	f1b8 0f00 	cmp.w	r8, #0
 8042a5e:	dd9c      	ble.n	804299a <__sflush_r+0x1a>
 8042a60:	6a21      	ldr	r1, [r4, #32]
 8042a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8042a64:	4643      	mov	r3, r8
 8042a66:	463a      	mov	r2, r7
 8042a68:	4628      	mov	r0, r5
 8042a6a:	47b0      	blx	r6
 8042a6c:	2800      	cmp	r0, #0
 8042a6e:	dc06      	bgt.n	8042a7e <__sflush_r+0xfe>
 8042a70:	89a3      	ldrh	r3, [r4, #12]
 8042a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042a76:	81a3      	strh	r3, [r4, #12]
 8042a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8042a7c:	e78e      	b.n	804299c <__sflush_r+0x1c>
 8042a7e:	4407      	add	r7, r0
 8042a80:	eba8 0800 	sub.w	r8, r8, r0
 8042a84:	e7e9      	b.n	8042a5a <__sflush_r+0xda>
 8042a86:	bf00      	nop
 8042a88:	20400001 	.word	0x20400001

08042a8c <_fflush_r>:
 8042a8c:	b538      	push	{r3, r4, r5, lr}
 8042a8e:	690b      	ldr	r3, [r1, #16]
 8042a90:	4605      	mov	r5, r0
 8042a92:	460c      	mov	r4, r1
 8042a94:	b913      	cbnz	r3, 8042a9c <_fflush_r+0x10>
 8042a96:	2500      	movs	r5, #0
 8042a98:	4628      	mov	r0, r5
 8042a9a:	bd38      	pop	{r3, r4, r5, pc}
 8042a9c:	b118      	cbz	r0, 8042aa6 <_fflush_r+0x1a>
 8042a9e:	6983      	ldr	r3, [r0, #24]
 8042aa0:	b90b      	cbnz	r3, 8042aa6 <_fflush_r+0x1a>
 8042aa2:	f7ff fa15 	bl	8041ed0 <__sinit>
 8042aa6:	4b14      	ldr	r3, [pc, #80]	; (8042af8 <_fflush_r+0x6c>)
 8042aa8:	429c      	cmp	r4, r3
 8042aaa:	d11b      	bne.n	8042ae4 <_fflush_r+0x58>
 8042aac:	686c      	ldr	r4, [r5, #4]
 8042aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8042ab2:	2b00      	cmp	r3, #0
 8042ab4:	d0ef      	beq.n	8042a96 <_fflush_r+0xa>
 8042ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8042ab8:	07d0      	lsls	r0, r2, #31
 8042aba:	d404      	bmi.n	8042ac6 <_fflush_r+0x3a>
 8042abc:	0599      	lsls	r1, r3, #22
 8042abe:	d402      	bmi.n	8042ac6 <_fflush_r+0x3a>
 8042ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042ac2:	f7ff faa3 	bl	804200c <__retarget_lock_acquire_recursive>
 8042ac6:	4628      	mov	r0, r5
 8042ac8:	4621      	mov	r1, r4
 8042aca:	f7ff ff59 	bl	8042980 <__sflush_r>
 8042ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8042ad0:	07da      	lsls	r2, r3, #31
 8042ad2:	4605      	mov	r5, r0
 8042ad4:	d4e0      	bmi.n	8042a98 <_fflush_r+0xc>
 8042ad6:	89a3      	ldrh	r3, [r4, #12]
 8042ad8:	059b      	lsls	r3, r3, #22
 8042ada:	d4dd      	bmi.n	8042a98 <_fflush_r+0xc>
 8042adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042ade:	f7ff fa96 	bl	804200e <__retarget_lock_release_recursive>
 8042ae2:	e7d9      	b.n	8042a98 <_fflush_r+0xc>
 8042ae4:	4b05      	ldr	r3, [pc, #20]	; (8042afc <_fflush_r+0x70>)
 8042ae6:	429c      	cmp	r4, r3
 8042ae8:	d101      	bne.n	8042aee <_fflush_r+0x62>
 8042aea:	68ac      	ldr	r4, [r5, #8]
 8042aec:	e7df      	b.n	8042aae <_fflush_r+0x22>
 8042aee:	4b04      	ldr	r3, [pc, #16]	; (8042b00 <_fflush_r+0x74>)
 8042af0:	429c      	cmp	r4, r3
 8042af2:	bf08      	it	eq
 8042af4:	68ec      	ldreq	r4, [r5, #12]
 8042af6:	e7da      	b.n	8042aae <_fflush_r+0x22>
 8042af8:	08042d78 	.word	0x08042d78
 8042afc:	08042d98 	.word	0x08042d98
 8042b00:	08042d58 	.word	0x08042d58

08042b04 <_lseek_r>:
 8042b04:	b538      	push	{r3, r4, r5, lr}
 8042b06:	4d07      	ldr	r5, [pc, #28]	; (8042b24 <_lseek_r+0x20>)
 8042b08:	4604      	mov	r4, r0
 8042b0a:	4608      	mov	r0, r1
 8042b0c:	4611      	mov	r1, r2
 8042b0e:	2200      	movs	r2, #0
 8042b10:	602a      	str	r2, [r5, #0]
 8042b12:	461a      	mov	r2, r3
 8042b14:	f7fe f9e8 	bl	8040ee8 <_lseek>
 8042b18:	1c43      	adds	r3, r0, #1
 8042b1a:	d102      	bne.n	8042b22 <_lseek_r+0x1e>
 8042b1c:	682b      	ldr	r3, [r5, #0]
 8042b1e:	b103      	cbz	r3, 8042b22 <_lseek_r+0x1e>
 8042b20:	6023      	str	r3, [r4, #0]
 8042b22:	bd38      	pop	{r3, r4, r5, pc}
 8042b24:	2000009c 	.word	0x2000009c

08042b28 <__swhatbuf_r>:
 8042b28:	b570      	push	{r4, r5, r6, lr}
 8042b2a:	460e      	mov	r6, r1
 8042b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042b30:	2900      	cmp	r1, #0
 8042b32:	b096      	sub	sp, #88	; 0x58
 8042b34:	4614      	mov	r4, r2
 8042b36:	461d      	mov	r5, r3
 8042b38:	da08      	bge.n	8042b4c <__swhatbuf_r+0x24>
 8042b3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8042b3e:	2200      	movs	r2, #0
 8042b40:	602a      	str	r2, [r5, #0]
 8042b42:	061a      	lsls	r2, r3, #24
 8042b44:	d410      	bmi.n	8042b68 <__swhatbuf_r+0x40>
 8042b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042b4a:	e00e      	b.n	8042b6a <__swhatbuf_r+0x42>
 8042b4c:	466a      	mov	r2, sp
 8042b4e:	f000 f8bb 	bl	8042cc8 <_fstat_r>
 8042b52:	2800      	cmp	r0, #0
 8042b54:	dbf1      	blt.n	8042b3a <__swhatbuf_r+0x12>
 8042b56:	9a01      	ldr	r2, [sp, #4]
 8042b58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8042b5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8042b60:	425a      	negs	r2, r3
 8042b62:	415a      	adcs	r2, r3
 8042b64:	602a      	str	r2, [r5, #0]
 8042b66:	e7ee      	b.n	8042b46 <__swhatbuf_r+0x1e>
 8042b68:	2340      	movs	r3, #64	; 0x40
 8042b6a:	2000      	movs	r0, #0
 8042b6c:	6023      	str	r3, [r4, #0]
 8042b6e:	b016      	add	sp, #88	; 0x58
 8042b70:	bd70      	pop	{r4, r5, r6, pc}
	...

08042b74 <__smakebuf_r>:
 8042b74:	898b      	ldrh	r3, [r1, #12]
 8042b76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8042b78:	079d      	lsls	r5, r3, #30
 8042b7a:	4606      	mov	r6, r0
 8042b7c:	460c      	mov	r4, r1
 8042b7e:	d507      	bpl.n	8042b90 <__smakebuf_r+0x1c>
 8042b80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8042b84:	6023      	str	r3, [r4, #0]
 8042b86:	6123      	str	r3, [r4, #16]
 8042b88:	2301      	movs	r3, #1
 8042b8a:	6163      	str	r3, [r4, #20]
 8042b8c:	b002      	add	sp, #8
 8042b8e:	bd70      	pop	{r4, r5, r6, pc}
 8042b90:	ab01      	add	r3, sp, #4
 8042b92:	466a      	mov	r2, sp
 8042b94:	f7ff ffc8 	bl	8042b28 <__swhatbuf_r>
 8042b98:	9900      	ldr	r1, [sp, #0]
 8042b9a:	4605      	mov	r5, r0
 8042b9c:	4630      	mov	r0, r6
 8042b9e:	f7ff fa57 	bl	8042050 <_malloc_r>
 8042ba2:	b948      	cbnz	r0, 8042bb8 <__smakebuf_r+0x44>
 8042ba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8042ba8:	059a      	lsls	r2, r3, #22
 8042baa:	d4ef      	bmi.n	8042b8c <__smakebuf_r+0x18>
 8042bac:	f023 0303 	bic.w	r3, r3, #3
 8042bb0:	f043 0302 	orr.w	r3, r3, #2
 8042bb4:	81a3      	strh	r3, [r4, #12]
 8042bb6:	e7e3      	b.n	8042b80 <__smakebuf_r+0xc>
 8042bb8:	4b0d      	ldr	r3, [pc, #52]	; (8042bf0 <__smakebuf_r+0x7c>)
 8042bba:	62b3      	str	r3, [r6, #40]	; 0x28
 8042bbc:	89a3      	ldrh	r3, [r4, #12]
 8042bbe:	6020      	str	r0, [r4, #0]
 8042bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8042bc4:	81a3      	strh	r3, [r4, #12]
 8042bc6:	9b00      	ldr	r3, [sp, #0]
 8042bc8:	6163      	str	r3, [r4, #20]
 8042bca:	9b01      	ldr	r3, [sp, #4]
 8042bcc:	6120      	str	r0, [r4, #16]
 8042bce:	b15b      	cbz	r3, 8042be8 <__smakebuf_r+0x74>
 8042bd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8042bd4:	4630      	mov	r0, r6
 8042bd6:	f000 f889 	bl	8042cec <_isatty_r>
 8042bda:	b128      	cbz	r0, 8042be8 <__smakebuf_r+0x74>
 8042bdc:	89a3      	ldrh	r3, [r4, #12]
 8042bde:	f023 0303 	bic.w	r3, r3, #3
 8042be2:	f043 0301 	orr.w	r3, r3, #1
 8042be6:	81a3      	strh	r3, [r4, #12]
 8042be8:	89a0      	ldrh	r0, [r4, #12]
 8042bea:	4305      	orrs	r5, r0
 8042bec:	81a5      	strh	r5, [r4, #12]
 8042bee:	e7cd      	b.n	8042b8c <__smakebuf_r+0x18>
 8042bf0:	08041e69 	.word	0x08041e69

08042bf4 <__malloc_lock>:
 8042bf4:	4801      	ldr	r0, [pc, #4]	; (8042bfc <__malloc_lock+0x8>)
 8042bf6:	f7ff ba09 	b.w	804200c <__retarget_lock_acquire_recursive>
 8042bfa:	bf00      	nop
 8042bfc:	20000090 	.word	0x20000090

08042c00 <__malloc_unlock>:
 8042c00:	4801      	ldr	r0, [pc, #4]	; (8042c08 <__malloc_unlock+0x8>)
 8042c02:	f7ff ba04 	b.w	804200e <__retarget_lock_release_recursive>
 8042c06:	bf00      	nop
 8042c08:	20000090 	.word	0x20000090

08042c0c <_free_r>:
 8042c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8042c0e:	2900      	cmp	r1, #0
 8042c10:	d044      	beq.n	8042c9c <_free_r+0x90>
 8042c12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8042c16:	9001      	str	r0, [sp, #4]
 8042c18:	2b00      	cmp	r3, #0
 8042c1a:	f1a1 0404 	sub.w	r4, r1, #4
 8042c1e:	bfb8      	it	lt
 8042c20:	18e4      	addlt	r4, r4, r3
 8042c22:	f7ff ffe7 	bl	8042bf4 <__malloc_lock>
 8042c26:	4a1e      	ldr	r2, [pc, #120]	; (8042ca0 <_free_r+0x94>)
 8042c28:	9801      	ldr	r0, [sp, #4]
 8042c2a:	6813      	ldr	r3, [r2, #0]
 8042c2c:	b933      	cbnz	r3, 8042c3c <_free_r+0x30>
 8042c2e:	6063      	str	r3, [r4, #4]
 8042c30:	6014      	str	r4, [r2, #0]
 8042c32:	b003      	add	sp, #12
 8042c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8042c38:	f7ff bfe2 	b.w	8042c00 <__malloc_unlock>
 8042c3c:	42a3      	cmp	r3, r4
 8042c3e:	d908      	bls.n	8042c52 <_free_r+0x46>
 8042c40:	6825      	ldr	r5, [r4, #0]
 8042c42:	1961      	adds	r1, r4, r5
 8042c44:	428b      	cmp	r3, r1
 8042c46:	bf01      	itttt	eq
 8042c48:	6819      	ldreq	r1, [r3, #0]
 8042c4a:	685b      	ldreq	r3, [r3, #4]
 8042c4c:	1949      	addeq	r1, r1, r5
 8042c4e:	6021      	streq	r1, [r4, #0]
 8042c50:	e7ed      	b.n	8042c2e <_free_r+0x22>
 8042c52:	461a      	mov	r2, r3
 8042c54:	685b      	ldr	r3, [r3, #4]
 8042c56:	b10b      	cbz	r3, 8042c5c <_free_r+0x50>
 8042c58:	42a3      	cmp	r3, r4
 8042c5a:	d9fa      	bls.n	8042c52 <_free_r+0x46>
 8042c5c:	6811      	ldr	r1, [r2, #0]
 8042c5e:	1855      	adds	r5, r2, r1
 8042c60:	42a5      	cmp	r5, r4
 8042c62:	d10b      	bne.n	8042c7c <_free_r+0x70>
 8042c64:	6824      	ldr	r4, [r4, #0]
 8042c66:	4421      	add	r1, r4
 8042c68:	1854      	adds	r4, r2, r1
 8042c6a:	42a3      	cmp	r3, r4
 8042c6c:	6011      	str	r1, [r2, #0]
 8042c6e:	d1e0      	bne.n	8042c32 <_free_r+0x26>
 8042c70:	681c      	ldr	r4, [r3, #0]
 8042c72:	685b      	ldr	r3, [r3, #4]
 8042c74:	6053      	str	r3, [r2, #4]
 8042c76:	4421      	add	r1, r4
 8042c78:	6011      	str	r1, [r2, #0]
 8042c7a:	e7da      	b.n	8042c32 <_free_r+0x26>
 8042c7c:	d902      	bls.n	8042c84 <_free_r+0x78>
 8042c7e:	230c      	movs	r3, #12
 8042c80:	6003      	str	r3, [r0, #0]
 8042c82:	e7d6      	b.n	8042c32 <_free_r+0x26>
 8042c84:	6825      	ldr	r5, [r4, #0]
 8042c86:	1961      	adds	r1, r4, r5
 8042c88:	428b      	cmp	r3, r1
 8042c8a:	bf04      	itt	eq
 8042c8c:	6819      	ldreq	r1, [r3, #0]
 8042c8e:	685b      	ldreq	r3, [r3, #4]
 8042c90:	6063      	str	r3, [r4, #4]
 8042c92:	bf04      	itt	eq
 8042c94:	1949      	addeq	r1, r1, r5
 8042c96:	6021      	streq	r1, [r4, #0]
 8042c98:	6054      	str	r4, [r2, #4]
 8042c9a:	e7ca      	b.n	8042c32 <_free_r+0x26>
 8042c9c:	b003      	add	sp, #12
 8042c9e:	bd30      	pop	{r4, r5, pc}
 8042ca0:	20000094 	.word	0x20000094

08042ca4 <_read_r>:
 8042ca4:	b538      	push	{r3, r4, r5, lr}
 8042ca6:	4d07      	ldr	r5, [pc, #28]	; (8042cc4 <_read_r+0x20>)
 8042ca8:	4604      	mov	r4, r0
 8042caa:	4608      	mov	r0, r1
 8042cac:	4611      	mov	r1, r2
 8042cae:	2200      	movs	r2, #0
 8042cb0:	602a      	str	r2, [r5, #0]
 8042cb2:	461a      	mov	r2, r3
 8042cb4:	f7fe f8b8 	bl	8040e28 <_read>
 8042cb8:	1c43      	adds	r3, r0, #1
 8042cba:	d102      	bne.n	8042cc2 <_read_r+0x1e>
 8042cbc:	682b      	ldr	r3, [r5, #0]
 8042cbe:	b103      	cbz	r3, 8042cc2 <_read_r+0x1e>
 8042cc0:	6023      	str	r3, [r4, #0]
 8042cc2:	bd38      	pop	{r3, r4, r5, pc}
 8042cc4:	2000009c 	.word	0x2000009c

08042cc8 <_fstat_r>:
 8042cc8:	b538      	push	{r3, r4, r5, lr}
 8042cca:	4d07      	ldr	r5, [pc, #28]	; (8042ce8 <_fstat_r+0x20>)
 8042ccc:	2300      	movs	r3, #0
 8042cce:	4604      	mov	r4, r0
 8042cd0:	4608      	mov	r0, r1
 8042cd2:	4611      	mov	r1, r2
 8042cd4:	602b      	str	r3, [r5, #0]
 8042cd6:	f7fe f8ec 	bl	8040eb2 <_fstat>
 8042cda:	1c43      	adds	r3, r0, #1
 8042cdc:	d102      	bne.n	8042ce4 <_fstat_r+0x1c>
 8042cde:	682b      	ldr	r3, [r5, #0]
 8042ce0:	b103      	cbz	r3, 8042ce4 <_fstat_r+0x1c>
 8042ce2:	6023      	str	r3, [r4, #0]
 8042ce4:	bd38      	pop	{r3, r4, r5, pc}
 8042ce6:	bf00      	nop
 8042ce8:	2000009c 	.word	0x2000009c

08042cec <_isatty_r>:
 8042cec:	b538      	push	{r3, r4, r5, lr}
 8042cee:	4d06      	ldr	r5, [pc, #24]	; (8042d08 <_isatty_r+0x1c>)
 8042cf0:	2300      	movs	r3, #0
 8042cf2:	4604      	mov	r4, r0
 8042cf4:	4608      	mov	r0, r1
 8042cf6:	602b      	str	r3, [r5, #0]
 8042cf8:	f7fe f8eb 	bl	8040ed2 <_isatty>
 8042cfc:	1c43      	adds	r3, r0, #1
 8042cfe:	d102      	bne.n	8042d06 <_isatty_r+0x1a>
 8042d00:	682b      	ldr	r3, [r5, #0]
 8042d02:	b103      	cbz	r3, 8042d06 <_isatty_r+0x1a>
 8042d04:	6023      	str	r3, [r4, #0]
 8042d06:	bd38      	pop	{r3, r4, r5, pc}
 8042d08:	2000009c 	.word	0x2000009c

08042d0c <_init>:
 8042d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042d0e:	bf00      	nop
 8042d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042d12:	bc08      	pop	{r3}
 8042d14:	469e      	mov	lr, r3
 8042d16:	4770      	bx	lr

08042d18 <_fini>:
 8042d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042d1a:	bf00      	nop
 8042d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042d1e:	bc08      	pop	{r3}
 8042d20:	469e      	mov	lr, r3
 8042d22:	4770      	bx	lr
