
side_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  0800c1a0  0800c1a0  0000c1a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .userSection  00000000  00000000  00000000  00010068  2**0
                  CONTENTS
  3 .rodata       000000c8  0800ecb4  0800ecb4  0000ecb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ed7c  0800ed7c  00010068  2**0
                  CONTENTS
  5 .ARM          00000008  0800ed7c  0800ed7c  0000ed7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ed84  0800ed84  00010068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ed84  0800ed84  0000ed84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800ed88  0800ed88  0000ed88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000068  20000000  0800ed8c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000034  20000068  0800edf4  00010068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  0800edf4  0001009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004481  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010d1  00000000  00000000  00014519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  000155f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000580  00000000  00000000  00015c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000120e7  00000000  00000000  00016198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a68  00000000  00000000  0002827f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006305f  00000000  00000000  0002cce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0008fd46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002024  00000000  00000000  0008fd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c1a0 <__do_global_dtors_aux>:
 800c1a0:	b510      	push	{r4, lr}
 800c1a2:	4c05      	ldr	r4, [pc, #20]	; (800c1b8 <__do_global_dtors_aux+0x18>)
 800c1a4:	7823      	ldrb	r3, [r4, #0]
 800c1a6:	b933      	cbnz	r3, 800c1b6 <__do_global_dtors_aux+0x16>
 800c1a8:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <__do_global_dtors_aux+0x1c>)
 800c1aa:	b113      	cbz	r3, 800c1b2 <__do_global_dtors_aux+0x12>
 800c1ac:	4804      	ldr	r0, [pc, #16]	; (800c1c0 <__do_global_dtors_aux+0x20>)
 800c1ae:	f3af 8000 	nop.w
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	7023      	strb	r3, [r4, #0]
 800c1b6:	bd10      	pop	{r4, pc}
 800c1b8:	20000068 	.word	0x20000068
 800c1bc:	00000000 	.word	0x00000000
 800c1c0:	0800ec9c 	.word	0x0800ec9c

0800c1c4 <frame_dummy>:
 800c1c4:	b508      	push	{r3, lr}
 800c1c6:	4b03      	ldr	r3, [pc, #12]	; (800c1d4 <frame_dummy+0x10>)
 800c1c8:	b11b      	cbz	r3, 800c1d2 <frame_dummy+0xe>
 800c1ca:	4903      	ldr	r1, [pc, #12]	; (800c1d8 <frame_dummy+0x14>)
 800c1cc:	4803      	ldr	r0, [pc, #12]	; (800c1dc <frame_dummy+0x18>)
 800c1ce:	f3af 8000 	nop.w
 800c1d2:	bd08      	pop	{r3, pc}
 800c1d4:	00000000 	.word	0x00000000
 800c1d8:	2000006c 	.word	0x2000006c
 800c1dc:	0800ec9c 	.word	0x0800ec9c

0800c1e0 <memchr>:
 800c1e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c1e4:	2a10      	cmp	r2, #16
 800c1e6:	db2b      	blt.n	800c240 <memchr+0x60>
 800c1e8:	f010 0f07 	tst.w	r0, #7
 800c1ec:	d008      	beq.n	800c200 <memchr+0x20>
 800c1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c1f2:	3a01      	subs	r2, #1
 800c1f4:	428b      	cmp	r3, r1
 800c1f6:	d02d      	beq.n	800c254 <memchr+0x74>
 800c1f8:	f010 0f07 	tst.w	r0, #7
 800c1fc:	b342      	cbz	r2, 800c250 <memchr+0x70>
 800c1fe:	d1f6      	bne.n	800c1ee <memchr+0xe>
 800c200:	b4f0      	push	{r4, r5, r6, r7}
 800c202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c20a:	f022 0407 	bic.w	r4, r2, #7
 800c20e:	f07f 0700 	mvns.w	r7, #0
 800c212:	2300      	movs	r3, #0
 800c214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c218:	3c08      	subs	r4, #8
 800c21a:	ea85 0501 	eor.w	r5, r5, r1
 800c21e:	ea86 0601 	eor.w	r6, r6, r1
 800c222:	fa85 f547 	uadd8	r5, r5, r7
 800c226:	faa3 f587 	sel	r5, r3, r7
 800c22a:	fa86 f647 	uadd8	r6, r6, r7
 800c22e:	faa5 f687 	sel	r6, r5, r7
 800c232:	b98e      	cbnz	r6, 800c258 <memchr+0x78>
 800c234:	d1ee      	bne.n	800c214 <memchr+0x34>
 800c236:	bcf0      	pop	{r4, r5, r6, r7}
 800c238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800c23c:	f002 0207 	and.w	r2, r2, #7
 800c240:	b132      	cbz	r2, 800c250 <memchr+0x70>
 800c242:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c246:	3a01      	subs	r2, #1
 800c248:	ea83 0301 	eor.w	r3, r3, r1
 800c24c:	b113      	cbz	r3, 800c254 <memchr+0x74>
 800c24e:	d1f8      	bne.n	800c242 <memchr+0x62>
 800c250:	2000      	movs	r0, #0
 800c252:	4770      	bx	lr
 800c254:	3801      	subs	r0, #1
 800c256:	4770      	bx	lr
 800c258:	2d00      	cmp	r5, #0
 800c25a:	bf06      	itte	eq
 800c25c:	4635      	moveq	r5, r6
 800c25e:	3803      	subeq	r0, #3
 800c260:	3807      	subne	r0, #7
 800c262:	f015 0f01 	tst.w	r5, #1
 800c266:	d107      	bne.n	800c278 <memchr+0x98>
 800c268:	3001      	adds	r0, #1
 800c26a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800c26e:	bf02      	ittt	eq
 800c270:	3001      	addeq	r0, #1
 800c272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 800c276:	3001      	addeq	r0, #1
 800c278:	bcf0      	pop	{r4, r5, r6, r7}
 800c27a:	3801      	subs	r0, #1
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop

0800c280 <__aeabi_uldivmod>:
 800c280:	b953      	cbnz	r3, 800c298 <__aeabi_uldivmod+0x18>
 800c282:	b94a      	cbnz	r2, 800c298 <__aeabi_uldivmod+0x18>
 800c284:	2900      	cmp	r1, #0
 800c286:	bf08      	it	eq
 800c288:	2800      	cmpeq	r0, #0
 800c28a:	bf1c      	itt	ne
 800c28c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800c290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c294:	f000 b974 	b.w	800c580 <__aeabi_idiv0>
 800c298:	f1ad 0c08 	sub.w	ip, sp, #8
 800c29c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c2a0:	f000 f806 	bl	800c2b0 <__udivmoddi4>
 800c2a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2ac:	b004      	add	sp, #16
 800c2ae:	4770      	bx	lr

0800c2b0 <__udivmoddi4>:
 800c2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2b4:	9d08      	ldr	r5, [sp, #32]
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	468e      	mov	lr, r1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d14d      	bne.n	800c35a <__udivmoddi4+0xaa>
 800c2be:	428a      	cmp	r2, r1
 800c2c0:	4694      	mov	ip, r2
 800c2c2:	d969      	bls.n	800c398 <__udivmoddi4+0xe8>
 800c2c4:	fab2 f282 	clz	r2, r2
 800c2c8:	b152      	cbz	r2, 800c2e0 <__udivmoddi4+0x30>
 800c2ca:	fa01 f302 	lsl.w	r3, r1, r2
 800c2ce:	f1c2 0120 	rsb	r1, r2, #32
 800c2d2:	fa20 f101 	lsr.w	r1, r0, r1
 800c2d6:	fa0c fc02 	lsl.w	ip, ip, r2
 800c2da:	ea41 0e03 	orr.w	lr, r1, r3
 800c2de:	4094      	lsls	r4, r2
 800c2e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c2e4:	0c21      	lsrs	r1, r4, #16
 800c2e6:	fbbe f6f8 	udiv	r6, lr, r8
 800c2ea:	fa1f f78c 	uxth.w	r7, ip
 800c2ee:	fb08 e316 	mls	r3, r8, r6, lr
 800c2f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c2f6:	fb06 f107 	mul.w	r1, r6, r7
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	d90a      	bls.n	800c314 <__udivmoddi4+0x64>
 800c2fe:	eb1c 0303 	adds.w	r3, ip, r3
 800c302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800c306:	f080 811f 	bcs.w	800c548 <__udivmoddi4+0x298>
 800c30a:	4299      	cmp	r1, r3
 800c30c:	f240 811c 	bls.w	800c548 <__udivmoddi4+0x298>
 800c310:	3e02      	subs	r6, #2
 800c312:	4463      	add	r3, ip
 800c314:	1a5b      	subs	r3, r3, r1
 800c316:	b2a4      	uxth	r4, r4
 800c318:	fbb3 f0f8 	udiv	r0, r3, r8
 800c31c:	fb08 3310 	mls	r3, r8, r0, r3
 800c320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c324:	fb00 f707 	mul.w	r7, r0, r7
 800c328:	42a7      	cmp	r7, r4
 800c32a:	d90a      	bls.n	800c342 <__udivmoddi4+0x92>
 800c32c:	eb1c 0404 	adds.w	r4, ip, r4
 800c330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c334:	f080 810a 	bcs.w	800c54c <__udivmoddi4+0x29c>
 800c338:	42a7      	cmp	r7, r4
 800c33a:	f240 8107 	bls.w	800c54c <__udivmoddi4+0x29c>
 800c33e:	4464      	add	r4, ip
 800c340:	3802      	subs	r0, #2
 800c342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c346:	1be4      	subs	r4, r4, r7
 800c348:	2600      	movs	r6, #0
 800c34a:	b11d      	cbz	r5, 800c354 <__udivmoddi4+0xa4>
 800c34c:	40d4      	lsrs	r4, r2
 800c34e:	2300      	movs	r3, #0
 800c350:	e9c5 4300 	strd	r4, r3, [r5]
 800c354:	4631      	mov	r1, r6
 800c356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35a:	428b      	cmp	r3, r1
 800c35c:	d909      	bls.n	800c372 <__udivmoddi4+0xc2>
 800c35e:	2d00      	cmp	r5, #0
 800c360:	f000 80ef 	beq.w	800c542 <__udivmoddi4+0x292>
 800c364:	2600      	movs	r6, #0
 800c366:	e9c5 0100 	strd	r0, r1, [r5]
 800c36a:	4630      	mov	r0, r6
 800c36c:	4631      	mov	r1, r6
 800c36e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c372:	fab3 f683 	clz	r6, r3
 800c376:	2e00      	cmp	r6, #0
 800c378:	d14a      	bne.n	800c410 <__udivmoddi4+0x160>
 800c37a:	428b      	cmp	r3, r1
 800c37c:	d302      	bcc.n	800c384 <__udivmoddi4+0xd4>
 800c37e:	4282      	cmp	r2, r0
 800c380:	f200 80f9 	bhi.w	800c576 <__udivmoddi4+0x2c6>
 800c384:	1a84      	subs	r4, r0, r2
 800c386:	eb61 0303 	sbc.w	r3, r1, r3
 800c38a:	2001      	movs	r0, #1
 800c38c:	469e      	mov	lr, r3
 800c38e:	2d00      	cmp	r5, #0
 800c390:	d0e0      	beq.n	800c354 <__udivmoddi4+0xa4>
 800c392:	e9c5 4e00 	strd	r4, lr, [r5]
 800c396:	e7dd      	b.n	800c354 <__udivmoddi4+0xa4>
 800c398:	b902      	cbnz	r2, 800c39c <__udivmoddi4+0xec>
 800c39a:	deff      	udf	#255	; 0xff
 800c39c:	fab2 f282 	clz	r2, r2
 800c3a0:	2a00      	cmp	r2, #0
 800c3a2:	f040 8092 	bne.w	800c4ca <__udivmoddi4+0x21a>
 800c3a6:	eba1 010c 	sub.w	r1, r1, ip
 800c3aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c3ae:	fa1f fe8c 	uxth.w	lr, ip
 800c3b2:	2601      	movs	r6, #1
 800c3b4:	0c20      	lsrs	r0, r4, #16
 800c3b6:	fbb1 f3f7 	udiv	r3, r1, r7
 800c3ba:	fb07 1113 	mls	r1, r7, r3, r1
 800c3be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c3c2:	fb0e f003 	mul.w	r0, lr, r3
 800c3c6:	4288      	cmp	r0, r1
 800c3c8:	d908      	bls.n	800c3dc <__udivmoddi4+0x12c>
 800c3ca:	eb1c 0101 	adds.w	r1, ip, r1
 800c3ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800c3d2:	d202      	bcs.n	800c3da <__udivmoddi4+0x12a>
 800c3d4:	4288      	cmp	r0, r1
 800c3d6:	f200 80cb 	bhi.w	800c570 <__udivmoddi4+0x2c0>
 800c3da:	4643      	mov	r3, r8
 800c3dc:	1a09      	subs	r1, r1, r0
 800c3de:	b2a4      	uxth	r4, r4
 800c3e0:	fbb1 f0f7 	udiv	r0, r1, r7
 800c3e4:	fb07 1110 	mls	r1, r7, r0, r1
 800c3e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800c3ec:	fb0e fe00 	mul.w	lr, lr, r0
 800c3f0:	45a6      	cmp	lr, r4
 800c3f2:	d908      	bls.n	800c406 <__udivmoddi4+0x156>
 800c3f4:	eb1c 0404 	adds.w	r4, ip, r4
 800c3f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800c3fc:	d202      	bcs.n	800c404 <__udivmoddi4+0x154>
 800c3fe:	45a6      	cmp	lr, r4
 800c400:	f200 80bb 	bhi.w	800c57a <__udivmoddi4+0x2ca>
 800c404:	4608      	mov	r0, r1
 800c406:	eba4 040e 	sub.w	r4, r4, lr
 800c40a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c40e:	e79c      	b.n	800c34a <__udivmoddi4+0x9a>
 800c410:	f1c6 0720 	rsb	r7, r6, #32
 800c414:	40b3      	lsls	r3, r6
 800c416:	fa22 fc07 	lsr.w	ip, r2, r7
 800c41a:	ea4c 0c03 	orr.w	ip, ip, r3
 800c41e:	fa20 f407 	lsr.w	r4, r0, r7
 800c422:	fa01 f306 	lsl.w	r3, r1, r6
 800c426:	431c      	orrs	r4, r3
 800c428:	40f9      	lsrs	r1, r7
 800c42a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800c42e:	fa00 f306 	lsl.w	r3, r0, r6
 800c432:	fbb1 f8f9 	udiv	r8, r1, r9
 800c436:	0c20      	lsrs	r0, r4, #16
 800c438:	fa1f fe8c 	uxth.w	lr, ip
 800c43c:	fb09 1118 	mls	r1, r9, r8, r1
 800c440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800c444:	fb08 f00e 	mul.w	r0, r8, lr
 800c448:	4288      	cmp	r0, r1
 800c44a:	fa02 f206 	lsl.w	r2, r2, r6
 800c44e:	d90b      	bls.n	800c468 <__udivmoddi4+0x1b8>
 800c450:	eb1c 0101 	adds.w	r1, ip, r1
 800c454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800c458:	f080 8088 	bcs.w	800c56c <__udivmoddi4+0x2bc>
 800c45c:	4288      	cmp	r0, r1
 800c45e:	f240 8085 	bls.w	800c56c <__udivmoddi4+0x2bc>
 800c462:	f1a8 0802 	sub.w	r8, r8, #2
 800c466:	4461      	add	r1, ip
 800c468:	1a09      	subs	r1, r1, r0
 800c46a:	b2a4      	uxth	r4, r4
 800c46c:	fbb1 f0f9 	udiv	r0, r1, r9
 800c470:	fb09 1110 	mls	r1, r9, r0, r1
 800c474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800c478:	fb00 fe0e 	mul.w	lr, r0, lr
 800c47c:	458e      	cmp	lr, r1
 800c47e:	d908      	bls.n	800c492 <__udivmoddi4+0x1e2>
 800c480:	eb1c 0101 	adds.w	r1, ip, r1
 800c484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800c488:	d26c      	bcs.n	800c564 <__udivmoddi4+0x2b4>
 800c48a:	458e      	cmp	lr, r1
 800c48c:	d96a      	bls.n	800c564 <__udivmoddi4+0x2b4>
 800c48e:	3802      	subs	r0, #2
 800c490:	4461      	add	r1, ip
 800c492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800c496:	fba0 9402 	umull	r9, r4, r0, r2
 800c49a:	eba1 010e 	sub.w	r1, r1, lr
 800c49e:	42a1      	cmp	r1, r4
 800c4a0:	46c8      	mov	r8, r9
 800c4a2:	46a6      	mov	lr, r4
 800c4a4:	d356      	bcc.n	800c554 <__udivmoddi4+0x2a4>
 800c4a6:	d053      	beq.n	800c550 <__udivmoddi4+0x2a0>
 800c4a8:	b15d      	cbz	r5, 800c4c2 <__udivmoddi4+0x212>
 800c4aa:	ebb3 0208 	subs.w	r2, r3, r8
 800c4ae:	eb61 010e 	sbc.w	r1, r1, lr
 800c4b2:	fa01 f707 	lsl.w	r7, r1, r7
 800c4b6:	fa22 f306 	lsr.w	r3, r2, r6
 800c4ba:	40f1      	lsrs	r1, r6
 800c4bc:	431f      	orrs	r7, r3
 800c4be:	e9c5 7100 	strd	r7, r1, [r5]
 800c4c2:	2600      	movs	r6, #0
 800c4c4:	4631      	mov	r1, r6
 800c4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4ca:	f1c2 0320 	rsb	r3, r2, #32
 800c4ce:	40d8      	lsrs	r0, r3
 800c4d0:	fa0c fc02 	lsl.w	ip, ip, r2
 800c4d4:	fa21 f303 	lsr.w	r3, r1, r3
 800c4d8:	4091      	lsls	r1, r2
 800c4da:	4301      	orrs	r1, r0
 800c4dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c4e0:	fa1f fe8c 	uxth.w	lr, ip
 800c4e4:	fbb3 f0f7 	udiv	r0, r3, r7
 800c4e8:	fb07 3610 	mls	r6, r7, r0, r3
 800c4ec:	0c0b      	lsrs	r3, r1, #16
 800c4ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800c4f2:	fb00 f60e 	mul.w	r6, r0, lr
 800c4f6:	429e      	cmp	r6, r3
 800c4f8:	fa04 f402 	lsl.w	r4, r4, r2
 800c4fc:	d908      	bls.n	800c510 <__udivmoddi4+0x260>
 800c4fe:	eb1c 0303 	adds.w	r3, ip, r3
 800c502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800c506:	d22f      	bcs.n	800c568 <__udivmoddi4+0x2b8>
 800c508:	429e      	cmp	r6, r3
 800c50a:	d92d      	bls.n	800c568 <__udivmoddi4+0x2b8>
 800c50c:	3802      	subs	r0, #2
 800c50e:	4463      	add	r3, ip
 800c510:	1b9b      	subs	r3, r3, r6
 800c512:	b289      	uxth	r1, r1
 800c514:	fbb3 f6f7 	udiv	r6, r3, r7
 800c518:	fb07 3316 	mls	r3, r7, r6, r3
 800c51c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c520:	fb06 f30e 	mul.w	r3, r6, lr
 800c524:	428b      	cmp	r3, r1
 800c526:	d908      	bls.n	800c53a <__udivmoddi4+0x28a>
 800c528:	eb1c 0101 	adds.w	r1, ip, r1
 800c52c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800c530:	d216      	bcs.n	800c560 <__udivmoddi4+0x2b0>
 800c532:	428b      	cmp	r3, r1
 800c534:	d914      	bls.n	800c560 <__udivmoddi4+0x2b0>
 800c536:	3e02      	subs	r6, #2
 800c538:	4461      	add	r1, ip
 800c53a:	1ac9      	subs	r1, r1, r3
 800c53c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800c540:	e738      	b.n	800c3b4 <__udivmoddi4+0x104>
 800c542:	462e      	mov	r6, r5
 800c544:	4628      	mov	r0, r5
 800c546:	e705      	b.n	800c354 <__udivmoddi4+0xa4>
 800c548:	4606      	mov	r6, r0
 800c54a:	e6e3      	b.n	800c314 <__udivmoddi4+0x64>
 800c54c:	4618      	mov	r0, r3
 800c54e:	e6f8      	b.n	800c342 <__udivmoddi4+0x92>
 800c550:	454b      	cmp	r3, r9
 800c552:	d2a9      	bcs.n	800c4a8 <__udivmoddi4+0x1f8>
 800c554:	ebb9 0802 	subs.w	r8, r9, r2
 800c558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800c55c:	3801      	subs	r0, #1
 800c55e:	e7a3      	b.n	800c4a8 <__udivmoddi4+0x1f8>
 800c560:	4646      	mov	r6, r8
 800c562:	e7ea      	b.n	800c53a <__udivmoddi4+0x28a>
 800c564:	4620      	mov	r0, r4
 800c566:	e794      	b.n	800c492 <__udivmoddi4+0x1e2>
 800c568:	4640      	mov	r0, r8
 800c56a:	e7d1      	b.n	800c510 <__udivmoddi4+0x260>
 800c56c:	46d0      	mov	r8, sl
 800c56e:	e77b      	b.n	800c468 <__udivmoddi4+0x1b8>
 800c570:	3b02      	subs	r3, #2
 800c572:	4461      	add	r1, ip
 800c574:	e732      	b.n	800c3dc <__udivmoddi4+0x12c>
 800c576:	4630      	mov	r0, r6
 800c578:	e709      	b.n	800c38e <__udivmoddi4+0xde>
 800c57a:	4464      	add	r4, ip
 800c57c:	3802      	subs	r0, #2
 800c57e:	e742      	b.n	800c406 <__udivmoddi4+0x156>

0800c580 <__aeabi_idiv0>:
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop

0800c584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f003 0307 	and.w	r3, r3, #7
 800c592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c594:	4b0c      	ldr	r3, [pc, #48]	; (800c5c8 <__NVIC_SetPriorityGrouping+0x44>)
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c5ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c5b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c5b6:	4a04      	ldr	r2, [pc, #16]	; (800c5c8 <__NVIC_SetPriorityGrouping+0x44>)
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	60d3      	str	r3, [r2, #12]
}
 800c5bc:	bf00      	nop
 800c5be:	3714      	adds	r7, #20
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr
 800c5c8:	e000ed00 	.word	0xe000ed00

0800c5cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800c5d0:	4b05      	ldr	r3, [pc, #20]	; (800c5e8 <LL_RCC_HSI_Enable+0x1c>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a04      	ldr	r2, [pc, #16]	; (800c5e8 <LL_RCC_HSI_Enable+0x1c>)
 800c5d6:	f043 0301 	orr.w	r3, r3, #1
 800c5da:	6013      	str	r3, [r2, #0]
}
 800c5dc:	bf00      	nop
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	40023800 	.word	0x40023800

0800c5ec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800c5f0:	4b06      	ldr	r3, [pc, #24]	; (800c60c <LL_RCC_HSI_IsReady+0x20>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f003 0302 	and.w	r3, r3, #2
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	bf0c      	ite	eq
 800c5fc:	2301      	moveq	r3, #1
 800c5fe:	2300      	movne	r3, #0
 800c600:	b2db      	uxtb	r3, r3
}
 800c602:	4618      	mov	r0, r3
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	40023800 	.word	0x40023800

0800c610 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800c618:	4b07      	ldr	r3, [pc, #28]	; (800c638 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	4904      	ldr	r1, [pc, #16]	; (800c638 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800c626:	4313      	orrs	r3, r2
 800c628:	600b      	str	r3, [r1, #0]
}
 800c62a:	bf00      	nop
 800c62c:	370c      	adds	r7, #12
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	40023800 	.word	0x40023800

0800c63c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800c644:	4b06      	ldr	r3, [pc, #24]	; (800c660 <LL_RCC_SetSysClkSource+0x24>)
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f023 0203 	bic.w	r2, r3, #3
 800c64c:	4904      	ldr	r1, [pc, #16]	; (800c660 <LL_RCC_SetSysClkSource+0x24>)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4313      	orrs	r3, r2
 800c652:	608b      	str	r3, [r1, #8]
}
 800c654:	bf00      	nop
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	40023800 	.word	0x40023800

0800c664 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800c664:	b480      	push	{r7}
 800c666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800c668:	4b04      	ldr	r3, [pc, #16]	; (800c67c <LL_RCC_GetSysClkSource+0x18>)
 800c66a:	689b      	ldr	r3, [r3, #8]
 800c66c:	f003 030c 	and.w	r3, r3, #12
}
 800c670:	4618      	mov	r0, r3
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	40023800 	.word	0x40023800

0800c680 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800c688:	4b06      	ldr	r3, [pc, #24]	; (800c6a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800c68a:	689b      	ldr	r3, [r3, #8]
 800c68c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c690:	4904      	ldr	r1, [pc, #16]	; (800c6a4 <LL_RCC_SetAHBPrescaler+0x24>)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4313      	orrs	r3, r2
 800c696:	608b      	str	r3, [r1, #8]
}
 800c698:	bf00      	nop
 800c69a:	370c      	adds	r7, #12
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr
 800c6a4:	40023800 	.word	0x40023800

0800c6a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b083      	sub	sp, #12
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800c6b0:	4b06      	ldr	r3, [pc, #24]	; (800c6cc <LL_RCC_SetAPB1Prescaler+0x24>)
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c6b8:	4904      	ldr	r1, [pc, #16]	; (800c6cc <LL_RCC_SetAPB1Prescaler+0x24>)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	608b      	str	r3, [r1, #8]
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ca:	4770      	bx	lr
 800c6cc:	40023800 	.word	0x40023800

0800c6d0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c6d8:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c6e0:	4904      	ldr	r1, [pc, #16]	; (800c6f4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	608b      	str	r3, [r1, #8]
}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr
 800c6f4:	40023800 	.word	0x40023800

0800c6f8 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 800c700:	4b07      	ldr	r3, [pc, #28]	; (800c720 <LL_RCC_SetTIMPrescaler+0x28>)
 800c702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c706:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c70a:	4905      	ldr	r1, [pc, #20]	; (800c720 <LL_RCC_SetTIMPrescaler+0x28>)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4313      	orrs	r3, r2
 800c710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	40023800 	.word	0x40023800

0800c724 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c724:	b480      	push	{r7}
 800c726:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c728:	4b05      	ldr	r3, [pc, #20]	; (800c740 <LL_RCC_PLL_Enable+0x1c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a04      	ldr	r2, [pc, #16]	; (800c740 <LL_RCC_PLL_Enable+0x1c>)
 800c72e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c732:	6013      	str	r3, [r2, #0]
}
 800c734:	bf00      	nop
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr
 800c73e:	bf00      	nop
 800c740:	40023800 	.word	0x40023800

0800c744 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c744:	b480      	push	{r7}
 800c746:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800c748:	4b07      	ldr	r3, [pc, #28]	; (800c768 <LL_RCC_PLL_IsReady+0x24>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c754:	bf0c      	ite	eq
 800c756:	2301      	moveq	r3, #1
 800c758:	2300      	movne	r3, #0
 800c75a:	b2db      	uxtb	r3, r3
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	40023800 	.word	0x40023800

0800c76c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
 800c778:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800c77a:	4b0d      	ldr	r3, [pc, #52]	; (800c7b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	4b0d      	ldr	r3, [pc, #52]	; (800c7b4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 800c780:	4013      	ands	r3, r2
 800c782:	68f9      	ldr	r1, [r7, #12]
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	4311      	orrs	r1, r2
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	0192      	lsls	r2, r2, #6
 800c78c:	430a      	orrs	r2, r1
 800c78e:	4908      	ldr	r1, [pc, #32]	; (800c7b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800c790:	4313      	orrs	r3, r2
 800c792:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800c794:	4b06      	ldr	r3, [pc, #24]	; (800c7b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c79c:	4904      	ldr	r1, [pc, #16]	; (800c7b0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	4313      	orrs	r3, r2
 800c7a2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800c7a4:	bf00      	nop
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	40023800 	.word	0x40023800
 800c7b4:	ffbf8000 	.word	0xffbf8000

0800c7b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800c7c0:	4b08      	ldr	r3, [pc, #32]	; (800c7e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c7c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7c4:	4907      	ldr	r1, [pc, #28]	; (800c7e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4313      	orrs	r3, r2
 800c7ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800c7cc:	4b05      	ldr	r3, [pc, #20]	; (800c7e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800c7ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4013      	ands	r3, r2
 800c7d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
}
 800c7d8:	bf00      	nop
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	40023800 	.word	0x40023800

0800c7e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b085      	sub	sp, #20
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800c7f0:	4b08      	ldr	r3, [pc, #32]	; (800c814 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c7f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7f4:	4907      	ldr	r1, [pc, #28]	; (800c814 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800c7fc:	4b05      	ldr	r3, [pc, #20]	; (800c814 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c7fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	4013      	ands	r3, r2
 800c804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c806:	68fb      	ldr	r3, [r7, #12]
}
 800c808:	bf00      	nop
 800c80a:	3714      	adds	r7, #20
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr
 800c814:	40023800 	.word	0x40023800

0800c818 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800c820:	4b08      	ldr	r3, [pc, #32]	; (800c844 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c824:	4907      	ldr	r1, [pc, #28]	; (800c844 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4313      	orrs	r3, r2
 800c82a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800c82c:	4b05      	ldr	r3, [pc, #20]	; (800c844 <LL_APB2_GRP1_EnableClock+0x2c>)
 800c82e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4013      	ands	r3, r2
 800c834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c836:	68fb      	ldr	r3, [r7, #12]
}
 800c838:	bf00      	nop
 800c83a:	3714      	adds	r7, #20
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	40023800 	.word	0x40023800

0800c848 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800c852:	4a13      	ldr	r2, [pc, #76]	; (800c8a0 <LL_SYSCFG_SetEXTISource+0x58>)
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	b2db      	uxtb	r3, r3
 800c858:	3302      	adds	r3, #2
 800c85a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	0c1b      	lsrs	r3, r3, #16
 800c862:	43db      	mvns	r3, r3
 800c864:	ea02 0103 	and.w	r1, r2, r3
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	0c1b      	lsrs	r3, r3, #16
 800c86c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	fa93 f3a3 	rbit	r3, r3
 800c874:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	fab3 f383 	clz	r3, r3
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	461a      	mov	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	fa03 f202 	lsl.w	r2, r3, r2
 800c886:	4806      	ldr	r0, [pc, #24]	; (800c8a0 <LL_SYSCFG_SetEXTISource+0x58>)
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	430a      	orrs	r2, r1
 800c88e:	3302      	adds	r3, #2
 800c890:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800c894:	bf00      	nop
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	40013800 	.word	0x40013800

0800c8a4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800c8ac:	4b06      	ldr	r3, [pc, #24]	; (800c8c8 <LL_FLASH_SetLatency+0x24>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f023 0207 	bic.w	r2, r3, #7
 800c8b4:	4904      	ldr	r1, [pc, #16]	; (800c8c8 <LL_FLASH_SetLatency+0x24>)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	600b      	str	r3, [r1, #0]
}
 800c8bc:	bf00      	nop
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	40023c00 	.word	0x40023c00

0800c8cc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800c8d0:	4b04      	ldr	r3, [pc, #16]	; (800c8e4 <LL_FLASH_GetLatency+0x18>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f003 0307 	and.w	r3, r3, #7
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	40023c00 	.word	0x40023c00

0800c8e8 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <LL_SYSTICK_EnableIT+0x1c>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a04      	ldr	r2, [pc, #16]	; (800c904 <LL_SYSTICK_EnableIT+0x1c>)
 800c8f2:	f043 0302 	orr.w	r3, r3, #2
 800c8f6:	6013      	str	r3, [r2, #0]
}
 800c8f8:	bf00      	nop
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	e000e010 	.word	0xe000e010

0800c908 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 800c910:	4b06      	ldr	r3, [pc, #24]	; (800c92c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c918:	4904      	ldr	r1, [pc, #16]	; (800c92c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	4313      	orrs	r3, r2
 800c91e:	600b      	str	r3, [r1, #0]
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	40007000 	.word	0x40007000

0800c930 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800c930:	b480      	push	{r7}
 800c932:	b083      	sub	sp, #12
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	60da      	str	r2, [r3, #12]
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	691b      	ldr	r3, [r3, #16]
 800c95c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	695b      	ldr	r3, [r3, #20]
 800c968:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	615a      	str	r2, [r3, #20]
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c98c:	2b40      	cmp	r3, #64	; 0x40
 800c98e:	bf0c      	ite	eq
 800c990:	2301      	moveq	r3, #1
 800c992:	2300      	movne	r3, #0
 800c994:	b2db      	uxtb	r3, r3
}
 800c996:	4618      	mov	r0, r3
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr

0800c9a2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800c9a2:	b480      	push	{r7}
 800c9a4:	b083      	sub	sp, #12
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	460b      	mov	r3, r1
 800c9ac:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800c9ae:	78fa      	ldrb	r2, [r7, #3]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	605a      	str	r2, [r3, #4]
}
 800c9b4:	bf00      	nop
 800c9b6:	370c      	adds	r7, #12
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b089      	sub	sp, #36	; 0x24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	fa93 f3a3 	rbit	r3, r3
 800c9da:	613b      	str	r3, [r7, #16]
  return result;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	fab3 f383 	clz	r3, r3
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	2103      	movs	r1, #3
 800c9e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c9ec:	43db      	mvns	r3, r3
 800c9ee:	401a      	ands	r2, r3
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9f4:	69fb      	ldr	r3, [r7, #28]
 800c9f6:	fa93 f3a3 	rbit	r3, r3
 800c9fa:	61bb      	str	r3, [r7, #24]
  return result;
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	fab3 f383 	clz	r3, r3
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	6879      	ldr	r1, [r7, #4]
 800ca08:	fa01 f303 	lsl.w	r3, r1, r3
 800ca0c:	431a      	orrs	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	601a      	str	r2, [r3, #0]
}
 800ca12:	bf00      	nop
 800ca14:	3724      	adds	r7, #36	; 0x24
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ca1e:	b480      	push	{r7}
 800ca20:	b089      	sub	sp, #36	; 0x24
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	60f8      	str	r0, [r7, #12]
 800ca26:	60b9      	str	r1, [r7, #8]
 800ca28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	68da      	ldr	r2, [r3, #12]
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	fa93 f3a3 	rbit	r3, r3
 800ca38:	613b      	str	r3, [r7, #16]
  return result;
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	fab3 f383 	clz	r3, r3
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	005b      	lsls	r3, r3, #1
 800ca44:	2103      	movs	r1, #3
 800ca46:	fa01 f303 	lsl.w	r3, r1, r3
 800ca4a:	43db      	mvns	r3, r3
 800ca4c:	401a      	ands	r2, r3
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca52:	69fb      	ldr	r3, [r7, #28]
 800ca54:	fa93 f3a3 	rbit	r3, r3
 800ca58:	61bb      	str	r3, [r7, #24]
  return result;
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	fab3 f383 	clz	r3, r3
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	6879      	ldr	r1, [r7, #4]
 800ca66:	fa01 f303 	lsl.w	r3, r1, r3
 800ca6a:	431a      	orrs	r2, r3
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	60da      	str	r2, [r3, #12]
}
 800ca70:	bf00      	nop
 800ca72:	3724      	adds	r7, #36	; 0x24
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	691a      	ldr	r2, [r3, #16]
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	683a      	ldr	r2, [r7, #0]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	bf0c      	ite	eq
 800ca94:	2301      	moveq	r3, #1
 800ca96:	2300      	movne	r3, #0
 800ca98:	b2db      	uxtb	r3, r3
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	683a      	ldr	r2, [r7, #0]
 800cab4:	619a      	str	r2, [r3, #24]
}
 800cab6:	bf00      	nop
 800cab8:	370c      	adds	r7, #12
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800cac2:	b480      	push	{r7}
 800cac4:	b083      	sub	sp, #12
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	041a      	lsls	r2, r3, #16
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	619a      	str	r2, [r3, #24]
}
 800cad4:	bf00      	nop
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800cae4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cae8:	f7ff fe96 	bl	800c818 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800caec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800caf0:	f7ff fe7a 	bl	800c7e8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800caf4:	2007      	movs	r0, #7
 800caf6:	f7ff fd45 	bl	800c584 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cafa:	f000 f81f 	bl	800cb3c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cafe:	f000 f8b9 	bl	800cc74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800cb02:	f000 f867 	bl	800cbd4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("APP 1 is running /r/n");
 800cb06:	480a      	ldr	r0, [pc, #40]	; (800cb30 <main+0x50>)
 800cb08:	f001 f93a 	bl	800dd80 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (LL_GPIO_IsInputPinSet(B1_GPIO_Port, B1_Pin))
 800cb0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cb10:	4808      	ldr	r0, [pc, #32]	; (800cb34 <main+0x54>)
 800cb12:	f7ff ffb3 	bl	800ca7c <LL_GPIO_IsInputPinSet>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d004      	beq.n	800cb26 <main+0x46>
		LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800cb1c:	2120      	movs	r1, #32
 800cb1e:	4806      	ldr	r0, [pc, #24]	; (800cb38 <main+0x58>)
 800cb20:	f7ff ffcf 	bl	800cac2 <LL_GPIO_ResetOutputPin>
 800cb24:	e7f2      	b.n	800cb0c <main+0x2c>
	else LL_GPIO_SetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800cb26:	2120      	movs	r1, #32
 800cb28:	4803      	ldr	r0, [pc, #12]	; (800cb38 <main+0x58>)
 800cb2a:	f7ff ffbc 	bl	800caa6 <LL_GPIO_SetOutputPin>
	if (LL_GPIO_IsInputPinSet(B1_GPIO_Port, B1_Pin))
 800cb2e:	e7ed      	b.n	800cb0c <main+0x2c>
 800cb30:	0800ecb4 	.word	0x0800ecb4
 800cb34:	40020800 	.word	0x40020800
 800cb38:	40020000 	.word	0x40020000

0800cb3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800cb40:	2002      	movs	r0, #2
 800cb42:	f7ff feaf 	bl	800c8a4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800cb46:	bf00      	nop
 800cb48:	f7ff fec0 	bl	800c8cc <LL_FLASH_GetLatency>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d1fa      	bne.n	800cb48 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800cb52:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 800cb56:	f7ff fed7 	bl	800c908 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 800cb5a:	2010      	movs	r0, #16
 800cb5c:	f7ff fd58 	bl	800c610 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800cb60:	f7ff fd34 	bl	800c5cc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800cb64:	bf00      	nop
 800cb66:	f7ff fd41 	bl	800c5ec <LL_RCC_HSI_IsReady>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d1fa      	bne.n	800cb66 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 800cb70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800cb74:	f44f 72a8 	mov.w	r2, #336	; 0x150
 800cb78:	2110      	movs	r1, #16
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	f7ff fdf6 	bl	800c76c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800cb80:	f7ff fdd0 	bl	800c724 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800cb84:	bf00      	nop
 800cb86:	f7ff fddd 	bl	800c744 <LL_RCC_PLL_IsReady>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d1fa      	bne.n	800cb86 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800cb90:	2000      	movs	r0, #0
 800cb92:	f7ff fd75 	bl	800c680 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800cb96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cb9a:	f7ff fd85 	bl	800c6a8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800cb9e:	2000      	movs	r0, #0
 800cba0:	f7ff fd96 	bl	800c6d0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800cba4:	2002      	movs	r0, #2
 800cba6:	f7ff fd49 	bl	800c63c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800cbaa:	bf00      	nop
 800cbac:	f7ff fd5a 	bl	800c664 <LL_RCC_GetSysClkSource>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b08      	cmp	r3, #8
 800cbb4:	d1fa      	bne.n	800cbac <SystemClock_Config+0x70>
  {

  }
  LL_Init1msTick(84000000);
 800cbb6:	4806      	ldr	r0, [pc, #24]	; (800cbd0 <SystemClock_Config+0x94>)
 800cbb8:	f001 f892 	bl	800dce0 <LL_Init1msTick>
  LL_SetSystemCoreClock(84000000);
 800cbbc:	4804      	ldr	r0, [pc, #16]	; (800cbd0 <SystemClock_Config+0x94>)
 800cbbe:	f001 f89d 	bl	800dcfc <LL_SetSystemCoreClock>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	f7ff fd98 	bl	800c6f8 <LL_RCC_SetTIMPrescaler>
  LL_SYSTICK_EnableIT();
 800cbc8:	f7ff fe8e 	bl	800c8e8 <LL_SYSTICK_EnableIT>
}
 800cbcc:	bf00      	nop
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	0501bd00 	.word	0x0501bd00

0800cbd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b08e      	sub	sp, #56	; 0x38
 800cbd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800cbda:	f107 031c 	add.w	r3, r7, #28
 800cbde:	2200      	movs	r2, #0
 800cbe0:	601a      	str	r2, [r3, #0]
 800cbe2:	605a      	str	r2, [r3, #4]
 800cbe4:	609a      	str	r2, [r3, #8]
 800cbe6:	60da      	str	r2, [r3, #12]
 800cbe8:	611a      	str	r2, [r3, #16]
 800cbea:	615a      	str	r2, [r3, #20]
 800cbec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cbee:	1d3b      	adds	r3, r7, #4
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	601a      	str	r2, [r3, #0]
 800cbf4:	605a      	str	r2, [r3, #4]
 800cbf6:	609a      	str	r2, [r3, #8]
 800cbf8:	60da      	str	r2, [r3, #12]
 800cbfa:	611a      	str	r2, [r3, #16]
 800cbfc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800cbfe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cc02:	f7ff fdf1 	bl	800c7e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800cc06:	2001      	movs	r0, #1
 800cc08:	f7ff fdd6 	bl	800c7b8 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800cc0c:	230c      	movs	r3, #12
 800cc0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800cc10:	2302      	movs	r3, #2
 800cc12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800cc14:	2303      	movs	r3, #3
 800cc16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800cc20:	2307      	movs	r3, #7
 800cc22:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc24:	1d3b      	adds	r3, r7, #4
 800cc26:	4619      	mov	r1, r3
 800cc28:	4810      	ldr	r0, [pc, #64]	; (800cc6c <MX_USART2_UART_Init+0x98>)
 800cc2a:	f000 fbc7 	bl	800d3bc <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800cc2e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800cc32:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800cc34:	2300      	movs	r3, #0
 800cc36:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800cc40:	230c      	movs	r3, #12
 800cc42:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800cc44:	2300      	movs	r3, #0
 800cc46:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800cc4c:	f107 031c 	add.w	r3, r7, #28
 800cc50:	4619      	mov	r1, r3
 800cc52:	4807      	ldr	r0, [pc, #28]	; (800cc70 <MX_USART2_UART_Init+0x9c>)
 800cc54:	f000 ffc6 	bl	800dbe4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800cc58:	4805      	ldr	r0, [pc, #20]	; (800cc70 <MX_USART2_UART_Init+0x9c>)
 800cc5a:	f7ff fe79 	bl	800c950 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800cc5e:	4804      	ldr	r0, [pc, #16]	; (800cc70 <MX_USART2_UART_Init+0x9c>)
 800cc60:	f7ff fe66 	bl	800c930 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800cc64:	bf00      	nop
 800cc66:	3738      	adds	r7, #56	; 0x38
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	40020000 	.word	0x40020000
 800cc70:	40004400 	.word	0x40004400

0800cc74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b088      	sub	sp, #32
 800cc78:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800cc7a:	f107 0318 	add.w	r3, r7, #24
 800cc7e:	2200      	movs	r2, #0
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc84:	463b      	mov	r3, r7
 800cc86:	2200      	movs	r2, #0
 800cc88:	601a      	str	r2, [r3, #0]
 800cc8a:	605a      	str	r2, [r3, #4]
 800cc8c:	609a      	str	r2, [r3, #8]
 800cc8e:	60da      	str	r2, [r3, #12]
 800cc90:	611a      	str	r2, [r3, #16]
 800cc92:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800cc94:	2004      	movs	r0, #4
 800cc96:	f7ff fd8f 	bl	800c7b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800cc9a:	2080      	movs	r0, #128	; 0x80
 800cc9c:	f7ff fd8c 	bl	800c7b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800cca0:	2001      	movs	r0, #1
 800cca2:	f7ff fd89 	bl	800c7b8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800cca6:	2002      	movs	r0, #2
 800cca8:	f7ff fd86 	bl	800c7b8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800ccac:	2120      	movs	r1, #32
 800ccae:	481a      	ldr	r0, [pc, #104]	; (800cd18 <MX_GPIO_Init+0xa4>)
 800ccb0:	f7ff ff07 	bl	800cac2 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800ccb4:	4919      	ldr	r1, [pc, #100]	; (800cd1c <MX_GPIO_Init+0xa8>)
 800ccb6:	2002      	movs	r0, #2
 800ccb8:	f7ff fdc6 	bl	800c848 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800ccbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ccc0:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800ccca:	2302      	movs	r3, #2
 800cccc:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800ccce:	f107 0318 	add.w	r3, r7, #24
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 f9ec 	bl	800d0b0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800ccd8:	2200      	movs	r2, #0
 800ccda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ccde:	4810      	ldr	r0, [pc, #64]	; (800cd20 <MX_GPIO_Init+0xac>)
 800cce0:	f7ff fe9d 	bl	800ca1e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800cce4:	2200      	movs	r2, #0
 800cce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ccea:	480d      	ldr	r0, [pc, #52]	; (800cd20 <MX_GPIO_Init+0xac>)
 800ccec:	f7ff fe68 	bl	800c9c0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800ccf0:	2320      	movs	r3, #32
 800ccf2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800cd00:	2300      	movs	r3, #0
 800cd02:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800cd04:	463b      	mov	r3, r7
 800cd06:	4619      	mov	r1, r3
 800cd08:	4803      	ldr	r0, [pc, #12]	; (800cd18 <MX_GPIO_Init+0xa4>)
 800cd0a:	f000 fb57 	bl	800d3bc <LL_GPIO_Init>

}
 800cd0e:	bf00      	nop
 800cd10:	3720      	adds	r7, #32
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	40020000 	.word	0x40020000
 800cd1c:	00f00003 	.word	0x00f00003
 800cd20:	40020800 	.word	0x40020800

0800cd24 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 // Write character to ITM ch.0
 LL_USART_TransmitData8(USART2, ch);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	4619      	mov	r1, r3
 800cd32:	4807      	ldr	r0, [pc, #28]	; (800cd50 <__io_putchar+0x2c>)
 800cd34:	f7ff fe35 	bl	800c9a2 <LL_USART_TransmitData8>
 while (!LL_USART_IsActiveFlag_TC(USART2));
 800cd38:	bf00      	nop
 800cd3a:	4805      	ldr	r0, [pc, #20]	; (800cd50 <__io_putchar+0x2c>)
 800cd3c:	f7ff fe1e 	bl	800c97c <LL_USART_IsActiveFlag_TC>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d0f9      	beq.n	800cd3a <__io_putchar+0x16>
 return(ch);
 800cd46:	687b      	ldr	r3, [r7, #4]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3708      	adds	r7, #8
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}
 800cd50:	40004400 	.word	0x40004400

0800cd54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cd54:	b480      	push	{r7}
 800cd56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800cd58:	e7fe      	b.n	800cd58 <NMI_Handler+0x4>

0800cd5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cd5e:	e7fe      	b.n	800cd5e <HardFault_Handler+0x4>

0800cd60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cd60:	b480      	push	{r7}
 800cd62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cd64:	e7fe      	b.n	800cd64 <MemManage_Handler+0x4>

0800cd66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cd66:	b480      	push	{r7}
 800cd68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cd6a:	e7fe      	b.n	800cd6a <BusFault_Handler+0x4>

0800cd6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cd70:	e7fe      	b.n	800cd70 <UsageFault_Handler+0x4>

0800cd72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cd72:	b480      	push	{r7}
 800cd74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cd76:	bf00      	nop
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7e:	4770      	bx	lr

0800cd80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cd80:	b480      	push	{r7}
 800cd82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cd84:	bf00      	nop
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cd92:	bf00      	nop
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  systick_count++;
 800cda0:	4b04      	ldr	r3, [pc, #16]	; (800cdb4 <SysTick_Handler+0x18>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	3301      	adds	r3, #1
 800cda6:	4a03      	ldr	r2, [pc, #12]	; (800cdb4 <SysTick_Handler+0x18>)
 800cda8:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cdaa:	bf00      	nop
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr
 800cdb4:	20000084 	.word	0x20000084

0800cdb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	617b      	str	r3, [r7, #20]
 800cdc8:	e00a      	b.n	800cde0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800cdca:	f3af 8000 	nop.w
 800cdce:	4601      	mov	r1, r0
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	1c5a      	adds	r2, r3, #1
 800cdd4:	60ba      	str	r2, [r7, #8]
 800cdd6:	b2ca      	uxtb	r2, r1
 800cdd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	3301      	adds	r3, #1
 800cdde:	617b      	str	r3, [r7, #20]
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	dbf0      	blt.n	800cdca <_read+0x12>
	}

return len;
 800cde8:	687b      	ldr	r3, [r7, #4]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b086      	sub	sp, #24
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	60f8      	str	r0, [r7, #12]
 800cdfa:	60b9      	str	r1, [r7, #8]
 800cdfc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cdfe:	2300      	movs	r3, #0
 800ce00:	617b      	str	r3, [r7, #20]
 800ce02:	e009      	b.n	800ce18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	1c5a      	adds	r2, r3, #1
 800ce08:	60ba      	str	r2, [r7, #8]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7ff ff89 	bl	800cd24 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	3301      	adds	r3, #1
 800ce16:	617b      	str	r3, [r7, #20]
 800ce18:	697a      	ldr	r2, [r7, #20]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	dbf1      	blt.n	800ce04 <_write+0x12>
	}
	return len;
 800ce20:	687b      	ldr	r3, [r7, #4]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3718      	adds	r7, #24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <_close>:

int _close(int file)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	b083      	sub	sp, #12
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
	return -1;
 800ce32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	370c      	adds	r7, #12
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr

0800ce42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ce42:	b480      	push	{r7}
 800ce44:	b083      	sub	sp, #12
 800ce46:	af00      	add	r7, sp, #0
 800ce48:	6078      	str	r0, [r7, #4]
 800ce4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ce52:	605a      	str	r2, [r3, #4]
	return 0;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	370c      	adds	r7, #12
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce60:	4770      	bx	lr

0800ce62 <_isatty>:

int _isatty(int file)
{
 800ce62:	b480      	push	{r7}
 800ce64:	b083      	sub	sp, #12
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
	return 1;
 800ce6a:	2301      	movs	r3, #1
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	370c      	adds	r7, #12
 800ce70:	46bd      	mov	sp, r7
 800ce72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce76:	4770      	bx	lr

0800ce78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
	return 0;
 800ce84:	2300      	movs	r3, #0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
	...

0800ce94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ce9c:	4a14      	ldr	r2, [pc, #80]	; (800cef0 <_sbrk+0x5c>)
 800ce9e:	4b15      	ldr	r3, [pc, #84]	; (800cef4 <_sbrk+0x60>)
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cea8:	4b13      	ldr	r3, [pc, #76]	; (800cef8 <_sbrk+0x64>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d102      	bne.n	800ceb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ceb0:	4b11      	ldr	r3, [pc, #68]	; (800cef8 <_sbrk+0x64>)
 800ceb2:	4a12      	ldr	r2, [pc, #72]	; (800cefc <_sbrk+0x68>)
 800ceb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ceb6:	4b10      	ldr	r3, [pc, #64]	; (800cef8 <_sbrk+0x64>)
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4413      	add	r3, r2
 800cebe:	693a      	ldr	r2, [r7, #16]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d207      	bcs.n	800ced4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cec4:	f000 ff2a 	bl	800dd1c <__errno>
 800cec8:	4603      	mov	r3, r0
 800ceca:	220c      	movs	r2, #12
 800cecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ced2:	e009      	b.n	800cee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ced4:	4b08      	ldr	r3, [pc, #32]	; (800cef8 <_sbrk+0x64>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ceda:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <_sbrk+0x64>)
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4413      	add	r3, r2
 800cee2:	4a05      	ldr	r2, [pc, #20]	; (800cef8 <_sbrk+0x64>)
 800cee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800cee6:	68fb      	ldr	r3, [r7, #12]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3718      	adds	r7, #24
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	20020000 	.word	0x20020000
 800cef4:	00000400 	.word	0x00000400
 800cef8:	20000088 	.word	0x20000088
 800cefc:	200000a0 	.word	0x200000a0

0800cf00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800cf00:	b480      	push	{r7}
 800cf02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800cf04:	4b07      	ldr	r3, [pc, #28]	; (800cf24 <SystemInit+0x24>)
 800cf06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf0a:	4a06      	ldr	r2, [pc, #24]	; (800cf24 <SystemInit+0x24>)
 800cf0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800cf14:	4b03      	ldr	r3, [pc, #12]	; (800cf24 <SystemInit+0x24>)
 800cf16:	4a04      	ldr	r2, [pc, #16]	; (800cf28 <SystemInit+0x28>)
 800cf18:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800cf1a:	bf00      	nop
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	e000ed00 	.word	0xe000ed00
 800cf28:	0800c000 	.word	0x0800c000

0800cf2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800cf2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cf64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800cf30:	480d      	ldr	r0, [pc, #52]	; (800cf68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800cf32:	490e      	ldr	r1, [pc, #56]	; (800cf6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800cf34:	4a0e      	ldr	r2, [pc, #56]	; (800cf70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800cf36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cf38:	e002      	b.n	800cf40 <LoopCopyDataInit>

0800cf3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cf3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cf3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cf3e:	3304      	adds	r3, #4

0800cf40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cf40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cf42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cf44:	d3f9      	bcc.n	800cf3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cf46:	4a0b      	ldr	r2, [pc, #44]	; (800cf74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800cf48:	4c0b      	ldr	r4, [pc, #44]	; (800cf78 <LoopFillZerobss+0x26>)
  movs r3, #0
 800cf4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cf4c:	e001      	b.n	800cf52 <LoopFillZerobss>

0800cf4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cf4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cf50:	3204      	adds	r2, #4

0800cf52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cf52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cf54:	d3fb      	bcc.n	800cf4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800cf56:	f7ff ffd3 	bl	800cf00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cf5a:	f000 fee5 	bl	800dd28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cf5e:	f7ff fdbf 	bl	800cae0 <main>
  bx  lr    
 800cf62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800cf64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800cf68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cf6c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800cf70:	0800ed8c 	.word	0x0800ed8c
  ldr r2, =_sbss
 800cf74:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800cf78:	2000009c 	.word	0x2000009c

0800cf7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cf7c:	e7fe      	b.n	800cf7c <ADC_IRQHandler>
	...

0800cf80 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800cf88:	4b05      	ldr	r3, [pc, #20]	; (800cfa0 <LL_EXTI_EnableIT_0_31+0x20>)
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	4904      	ldr	r1, [pc, #16]	; (800cfa0 <LL_EXTI_EnableIT_0_31+0x20>)
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	4313      	orrs	r3, r2
 800cf92:	600b      	str	r3, [r1, #0]
}
 800cf94:	bf00      	nop
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	40013c00 	.word	0x40013c00

0800cfa4 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800cfac:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <LL_EXTI_DisableIT_0_31+0x24>)
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	43db      	mvns	r3, r3
 800cfb4:	4904      	ldr	r1, [pc, #16]	; (800cfc8 <LL_EXTI_DisableIT_0_31+0x24>)
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	600b      	str	r3, [r1, #0]
}
 800cfba:	bf00      	nop
 800cfbc:	370c      	adds	r7, #12
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	40013c00 	.word	0x40013c00

0800cfcc <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800cfd4:	4b05      	ldr	r3, [pc, #20]	; (800cfec <LL_EXTI_EnableEvent_0_31+0x20>)
 800cfd6:	685a      	ldr	r2, [r3, #4]
 800cfd8:	4904      	ldr	r1, [pc, #16]	; (800cfec <LL_EXTI_EnableEvent_0_31+0x20>)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	604b      	str	r3, [r1, #4]

}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	40013c00 	.word	0x40013c00

0800cff0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800cff8:	4b06      	ldr	r3, [pc, #24]	; (800d014 <LL_EXTI_DisableEvent_0_31+0x24>)
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	43db      	mvns	r3, r3
 800d000:	4904      	ldr	r1, [pc, #16]	; (800d014 <LL_EXTI_DisableEvent_0_31+0x24>)
 800d002:	4013      	ands	r3, r2
 800d004:	604b      	str	r3, [r1, #4]
}
 800d006:	bf00      	nop
 800d008:	370c      	adds	r7, #12
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	40013c00 	.word	0x40013c00

0800d018 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800d020:	4b05      	ldr	r3, [pc, #20]	; (800d038 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d022:	689a      	ldr	r2, [r3, #8]
 800d024:	4904      	ldr	r1, [pc, #16]	; (800d038 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4313      	orrs	r3, r2
 800d02a:	608b      	str	r3, [r1, #8]

}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	40013c00 	.word	0x40013c00

0800d03c <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800d044:	4b06      	ldr	r3, [pc, #24]	; (800d060 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d046:	689a      	ldr	r2, [r3, #8]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	43db      	mvns	r3, r3
 800d04c:	4904      	ldr	r1, [pc, #16]	; (800d060 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d04e:	4013      	ands	r3, r2
 800d050:	608b      	str	r3, [r1, #8]

}
 800d052:	bf00      	nop
 800d054:	370c      	adds	r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	40013c00 	.word	0x40013c00

0800d064 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800d06c:	4b05      	ldr	r3, [pc, #20]	; (800d084 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d06e:	68da      	ldr	r2, [r3, #12]
 800d070:	4904      	ldr	r1, [pc, #16]	; (800d084 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4313      	orrs	r3, r2
 800d076:	60cb      	str	r3, [r1, #12]
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	40013c00 	.word	0x40013c00

0800d088 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800d088:	b480      	push	{r7}
 800d08a:	b083      	sub	sp, #12
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800d090:	4b06      	ldr	r3, [pc, #24]	; (800d0ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d092:	68da      	ldr	r2, [r3, #12]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	43db      	mvns	r3, r3
 800d098:	4904      	ldr	r1, [pc, #16]	; (800d0ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d09a:	4013      	ands	r3, r2
 800d09c:	60cb      	str	r3, [r1, #12]
}
 800d09e:	bf00      	nop
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	40013c00 	.word	0x40013c00

0800d0b0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	791b      	ldrb	r3, [r3, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d065      	beq.n	800d190 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d06c      	beq.n	800d1a6 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	795b      	ldrb	r3, [r3, #5]
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d01c      	beq.n	800d10e <LL_EXTI_Init+0x5e>
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	dc25      	bgt.n	800d124 <LL_EXTI_Init+0x74>
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d002      	beq.n	800d0e2 <LL_EXTI_Init+0x32>
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d00b      	beq.n	800d0f8 <LL_EXTI_Init+0x48>
 800d0e0:	e020      	b.n	800d124 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7ff ff82 	bl	800cff0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7ff ff45 	bl	800cf80 <LL_EXTI_EnableIT_0_31>
          break;
 800d0f6:	e018      	b.n	800d12a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff ff51 	bl	800cfa4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	4618      	mov	r0, r3
 800d108:	f7ff ff60 	bl	800cfcc <LL_EXTI_EnableEvent_0_31>
          break;
 800d10c:	e00d      	b.n	800d12a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	4618      	mov	r0, r3
 800d114:	f7ff ff34 	bl	800cf80 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff ff55 	bl	800cfcc <LL_EXTI_EnableEvent_0_31>
          break;
 800d122:	e002      	b.n	800d12a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	73fb      	strb	r3, [r7, #15]
          break;
 800d128:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	799b      	ldrb	r3, [r3, #6]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d039      	beq.n	800d1a6 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	799b      	ldrb	r3, [r3, #6]
 800d136:	2b03      	cmp	r3, #3
 800d138:	d01c      	beq.n	800d174 <LL_EXTI_Init+0xc4>
 800d13a:	2b03      	cmp	r3, #3
 800d13c:	dc25      	bgt.n	800d18a <LL_EXTI_Init+0xda>
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d002      	beq.n	800d148 <LL_EXTI_Init+0x98>
 800d142:	2b02      	cmp	r3, #2
 800d144:	d00b      	beq.n	800d15e <LL_EXTI_Init+0xae>
 800d146:	e020      	b.n	800d18a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7ff ff9b 	bl	800d088 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff ff5e 	bl	800d018 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d15c:	e024      	b.n	800d1a8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	4618      	mov	r0, r3
 800d164:	f7ff ff6a 	bl	800d03c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7ff ff79 	bl	800d064 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d172:	e019      	b.n	800d1a8 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4618      	mov	r0, r3
 800d17a:	f7ff ff4d 	bl	800d018 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4618      	mov	r0, r3
 800d184:	f7ff ff6e 	bl	800d064 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d188:	e00e      	b.n	800d1a8 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	73fb      	strb	r3, [r7, #15]
            break;
 800d18e:	e00b      	b.n	800d1a8 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4618      	mov	r0, r3
 800d196:	f7ff ff05 	bl	800cfa4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7ff ff26 	bl	800cff0 <LL_EXTI_DisableEvent_0_31>
 800d1a4:	e000      	b.n	800d1a8 <LL_EXTI_Init+0xf8>
      }
 800d1a6:	bf00      	nop
  }
  return status;
 800d1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <LL_GPIO_SetPinMode>:
{
 800d1b2:	b480      	push	{r7}
 800d1b4:	b089      	sub	sp, #36	; 0x24
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	60f8      	str	r0, [r7, #12]
 800d1ba:	60b9      	str	r1, [r7, #8]
 800d1bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	fa93 f3a3 	rbit	r3, r3
 800d1cc:	613b      	str	r3, [r7, #16]
  return result;
 800d1ce:	693b      	ldr	r3, [r7, #16]
 800d1d0:	fab3 f383 	clz	r3, r3
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	005b      	lsls	r3, r3, #1
 800d1d8:	2103      	movs	r1, #3
 800d1da:	fa01 f303 	lsl.w	r3, r1, r3
 800d1de:	43db      	mvns	r3, r3
 800d1e0:	401a      	ands	r2, r3
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	fa93 f3a3 	rbit	r3, r3
 800d1ec:	61bb      	str	r3, [r7, #24]
  return result;
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	fab3 f383 	clz	r3, r3
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	6879      	ldr	r1, [r7, #4]
 800d1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d1fe:	431a      	orrs	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	601a      	str	r2, [r3, #0]
}
 800d204:	bf00      	nop
 800d206:	3724      	adds	r7, #36	; 0x24
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr

0800d210 <LL_GPIO_SetPinOutputType>:
{
 800d210:	b480      	push	{r7}
 800d212:	b085      	sub	sp, #20
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	60b9      	str	r1, [r7, #8]
 800d21a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	685a      	ldr	r2, [r3, #4]
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	43db      	mvns	r3, r3
 800d224:	401a      	ands	r2, r3
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	fb01 f303 	mul.w	r3, r1, r3
 800d22e:	431a      	orrs	r2, r3
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	605a      	str	r2, [r3, #4]
}
 800d234:	bf00      	nop
 800d236:	3714      	adds	r7, #20
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <LL_GPIO_SetPinSpeed>:
{
 800d240:	b480      	push	{r7}
 800d242:	b089      	sub	sp, #36	; 0x24
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	689a      	ldr	r2, [r3, #8]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	fa93 f3a3 	rbit	r3, r3
 800d25a:	613b      	str	r3, [r7, #16]
  return result;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	fab3 f383 	clz	r3, r3
 800d262:	b2db      	uxtb	r3, r3
 800d264:	005b      	lsls	r3, r3, #1
 800d266:	2103      	movs	r1, #3
 800d268:	fa01 f303 	lsl.w	r3, r1, r3
 800d26c:	43db      	mvns	r3, r3
 800d26e:	401a      	ands	r2, r3
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	fa93 f3a3 	rbit	r3, r3
 800d27a:	61bb      	str	r3, [r7, #24]
  return result;
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	fab3 f383 	clz	r3, r3
 800d282:	b2db      	uxtb	r3, r3
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	6879      	ldr	r1, [r7, #4]
 800d288:	fa01 f303 	lsl.w	r3, r1, r3
 800d28c:	431a      	orrs	r2, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	609a      	str	r2, [r3, #8]
}
 800d292:	bf00      	nop
 800d294:	3724      	adds	r7, #36	; 0x24
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr

0800d29e <LL_GPIO_SetPinPull>:
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b089      	sub	sp, #36	; 0x24
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	68da      	ldr	r2, [r3, #12]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	fa93 f3a3 	rbit	r3, r3
 800d2b8:	613b      	str	r3, [r7, #16]
  return result;
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	fab3 f383 	clz	r3, r3
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	005b      	lsls	r3, r3, #1
 800d2c4:	2103      	movs	r1, #3
 800d2c6:	fa01 f303 	lsl.w	r3, r1, r3
 800d2ca:	43db      	mvns	r3, r3
 800d2cc:	401a      	ands	r2, r3
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	fa93 f3a3 	rbit	r3, r3
 800d2d8:	61bb      	str	r3, [r7, #24]
  return result;
 800d2da:	69bb      	ldr	r3, [r7, #24]
 800d2dc:	fab3 f383 	clz	r3, r3
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	005b      	lsls	r3, r3, #1
 800d2e4:	6879      	ldr	r1, [r7, #4]
 800d2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800d2ea:	431a      	orrs	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	60da      	str	r2, [r3, #12]
}
 800d2f0:	bf00      	nop
 800d2f2:	3724      	adds	r7, #36	; 0x24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <LL_GPIO_SetAFPin_0_7>:
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b089      	sub	sp, #36	; 0x24
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	6a1a      	ldr	r2, [r3, #32]
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	fa93 f3a3 	rbit	r3, r3
 800d316:	613b      	str	r3, [r7, #16]
  return result;
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	fab3 f383 	clz	r3, r3
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	210f      	movs	r1, #15
 800d324:	fa01 f303 	lsl.w	r3, r1, r3
 800d328:	43db      	mvns	r3, r3
 800d32a:	401a      	ands	r2, r3
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d330:	69fb      	ldr	r3, [r7, #28]
 800d332:	fa93 f3a3 	rbit	r3, r3
 800d336:	61bb      	str	r3, [r7, #24]
  return result;
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	fab3 f383 	clz	r3, r3
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	009b      	lsls	r3, r3, #2
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	fa01 f303 	lsl.w	r3, r1, r3
 800d348:	431a      	orrs	r2, r3
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	621a      	str	r2, [r3, #32]
}
 800d34e:	bf00      	nop
 800d350:	3724      	adds	r7, #36	; 0x24
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <LL_GPIO_SetAFPin_8_15>:
{
 800d35a:	b480      	push	{r7}
 800d35c:	b089      	sub	sp, #36	; 0x24
 800d35e:	af00      	add	r7, sp, #0
 800d360:	60f8      	str	r0, [r7, #12]
 800d362:	60b9      	str	r1, [r7, #8]
 800d364:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	0a1b      	lsrs	r3, r3, #8
 800d36e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	fa93 f3a3 	rbit	r3, r3
 800d376:	613b      	str	r3, [r7, #16]
  return result;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	fab3 f383 	clz	r3, r3
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	210f      	movs	r1, #15
 800d384:	fa01 f303 	lsl.w	r3, r1, r3
 800d388:	43db      	mvns	r3, r3
 800d38a:	401a      	ands	r2, r3
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	0a1b      	lsrs	r3, r3, #8
 800d390:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	fa93 f3a3 	rbit	r3, r3
 800d398:	61bb      	str	r3, [r7, #24]
  return result;
 800d39a:	69bb      	ldr	r3, [r7, #24]
 800d39c:	fab3 f383 	clz	r3, r3
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	6879      	ldr	r1, [r7, #4]
 800d3a6:	fa01 f303 	lsl.w	r3, r1, r3
 800d3aa:	431a      	orrs	r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d3b0:	bf00      	nop
 800d3b2:	3724      	adds	r7, #36	; 0x24
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b088      	sub	sp, #32
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	fa93 f3a3 	rbit	r3, r3
 800d3da:	613b      	str	r3, [r7, #16]
  return result;
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	fab3 f383 	clz	r3, r3
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d3e6:	e050      	b.n	800d48a <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d3f4:	4013      	ands	r3, r2
 800d3f6:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d042      	beq.n	800d484 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	2b01      	cmp	r3, #1
 800d404:	d003      	beq.n	800d40e <LL_GPIO_Init+0x52>
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d10d      	bne.n	800d42a <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	461a      	mov	r2, r3
 800d414:	69b9      	ldr	r1, [r7, #24]
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7ff ff12 	bl	800d240 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	461a      	mov	r2, r3
 800d422:	69b9      	ldr	r1, [r7, #24]
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f7ff fef3 	bl	800d210 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	461a      	mov	r2, r3
 800d430:	69b9      	ldr	r1, [r7, #24]
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7ff ff33 	bl	800d29e <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	d11a      	bne.n	800d476 <LL_GPIO_Init+0xba>
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	fa93 f3a3 	rbit	r3, r3
 800d44a:	60bb      	str	r3, [r7, #8]
  return result;
 800d44c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800d44e:	fab3 f383 	clz	r3, r3
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2b07      	cmp	r3, #7
 800d456:	d807      	bhi.n	800d468 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	461a      	mov	r2, r3
 800d45e:	69b9      	ldr	r1, [r7, #24]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7ff ff4b 	bl	800d2fc <LL_GPIO_SetAFPin_0_7>
 800d466:	e006      	b.n	800d476 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	695b      	ldr	r3, [r3, #20]
 800d46c:	461a      	mov	r2, r3
 800d46e:	69b9      	ldr	r1, [r7, #24]
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f7ff ff72 	bl	800d35a <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	461a      	mov	r2, r3
 800d47c:	69b9      	ldr	r1, [r7, #24]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f7ff fe97 	bl	800d1b2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	3301      	adds	r3, #1
 800d488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	fa22 f303 	lsr.w	r3, r2, r3
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1a7      	bne.n	800d3e8 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3720      	adds	r7, #32
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
	...

0800d4a4 <LL_RCC_GetSysClkSource>:
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d4a8:	4b04      	ldr	r3, [pc, #16]	; (800d4bc <LL_RCC_GetSysClkSource+0x18>)
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	f003 030c 	and.w	r3, r3, #12
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop
 800d4bc:	40023800 	.word	0x40023800

0800d4c0 <LL_RCC_GetAHBPrescaler>:
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800d4c4:	4b04      	ldr	r3, [pc, #16]	; (800d4d8 <LL_RCC_GetAHBPrescaler+0x18>)
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	40023800 	.word	0x40023800

0800d4dc <LL_RCC_GetAPB1Prescaler>:
{
 800d4dc:	b480      	push	{r7}
 800d4de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800d4e0:	4b04      	ldr	r3, [pc, #16]	; (800d4f4 <LL_RCC_GetAPB1Prescaler+0x18>)
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f0:	4770      	bx	lr
 800d4f2:	bf00      	nop
 800d4f4:	40023800 	.word	0x40023800

0800d4f8 <LL_RCC_GetAPB2Prescaler>:
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800d4fc:	4b04      	ldr	r3, [pc, #16]	; (800d510 <LL_RCC_GetAPB2Prescaler+0x18>)
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800d504:	4618      	mov	r0, r3
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop
 800d510:	40023800 	.word	0x40023800

0800d514 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800d514:	b480      	push	{r7}
 800d516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800d518:	4b04      	ldr	r3, [pc, #16]	; (800d52c <LL_RCC_PLL_GetMainSource+0x18>)
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800d520:	4618      	mov	r0, r3
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	40023800 	.word	0x40023800

0800d530 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800d530:	b480      	push	{r7}
 800d532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800d534:	4b04      	ldr	r3, [pc, #16]	; (800d548 <LL_RCC_PLL_GetN+0x18>)
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	099b      	lsrs	r3, r3, #6
 800d53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800d53e:	4618      	mov	r0, r3
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr
 800d548:	40023800 	.word	0x40023800

0800d54c <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800d54c:	b480      	push	{r7}
 800d54e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800d550:	4b04      	ldr	r3, [pc, #16]	; (800d564 <LL_RCC_PLL_GetP+0x18>)
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800d558:	4618      	mov	r0, r3
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
 800d562:	bf00      	nop
 800d564:	40023800 	.word	0x40023800

0800d568 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800d568:	b480      	push	{r7}
 800d56a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800d56c:	4b04      	ldr	r3, [pc, #16]	; (800d580 <LL_RCC_PLL_GetDivider+0x18>)
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800d574:	4618      	mov	r0, r3
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	40023800 	.word	0x40023800

0800d584 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800d58c:	f000 f820 	bl	800d5d0 <RCC_GetSystemClockFreq>
 800d590:	4602      	mov	r2, r0
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4618      	mov	r0, r3
 800d59c:	f000 f840 	bl	800d620 <RCC_GetHCLKClockFreq>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f000 f84e 	bl	800d64c <RCC_GetPCLK1ClockFreq>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f000 f85a 	bl	800d674 <RCC_GetPCLK2ClockFreq>
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	60da      	str	r2, [r3, #12]
}
 800d5c6:	bf00      	nop
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
	...

0800d5d0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800d5da:	f7ff ff63 	bl	800d4a4 <LL_RCC_GetSysClkSource>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b08      	cmp	r3, #8
 800d5e2:	d00c      	beq.n	800d5fe <RCC_GetSystemClockFreq+0x2e>
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d80f      	bhi.n	800d608 <RCC_GetSystemClockFreq+0x38>
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d002      	beq.n	800d5f2 <RCC_GetSystemClockFreq+0x22>
 800d5ec:	2b04      	cmp	r3, #4
 800d5ee:	d003      	beq.n	800d5f8 <RCC_GetSystemClockFreq+0x28>
 800d5f0:	e00a      	b.n	800d608 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800d5f2:	4b09      	ldr	r3, [pc, #36]	; (800d618 <RCC_GetSystemClockFreq+0x48>)
 800d5f4:	607b      	str	r3, [r7, #4]
      break;
 800d5f6:	e00a      	b.n	800d60e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800d5f8:	4b08      	ldr	r3, [pc, #32]	; (800d61c <RCC_GetSystemClockFreq+0x4c>)
 800d5fa:	607b      	str	r3, [r7, #4]
      break;
 800d5fc:	e007      	b.n	800d60e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800d5fe:	2008      	movs	r0, #8
 800d600:	f000 f84c 	bl	800d69c <RCC_PLL_GetFreqDomain_SYS>
 800d604:	6078      	str	r0, [r7, #4]
      break;
 800d606:	e002      	b.n	800d60e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800d608:	4b03      	ldr	r3, [pc, #12]	; (800d618 <RCC_GetSystemClockFreq+0x48>)
 800d60a:	607b      	str	r3, [r7, #4]
      break;
 800d60c:	bf00      	nop
  }

  return frequency;
 800d60e:	687b      	ldr	r3, [r7, #4]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	00f42400 	.word	0x00f42400
 800d61c:	007a1200 	.word	0x007a1200

0800d620 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800d628:	f7ff ff4a 	bl	800d4c0 <LL_RCC_GetAHBPrescaler>
 800d62c:	4603      	mov	r3, r0
 800d62e:	091b      	lsrs	r3, r3, #4
 800d630:	f003 030f 	and.w	r3, r3, #15
 800d634:	4a04      	ldr	r2, [pc, #16]	; (800d648 <RCC_GetHCLKClockFreq+0x28>)
 800d636:	5cd3      	ldrb	r3, [r2, r3]
 800d638:	461a      	mov	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	40d3      	lsrs	r3, r2
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3708      	adds	r7, #8
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	0800eccc 	.word	0x0800eccc

0800d64c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800d654:	f7ff ff42 	bl	800d4dc <LL_RCC_GetAPB1Prescaler>
 800d658:	4603      	mov	r3, r0
 800d65a:	0a9b      	lsrs	r3, r3, #10
 800d65c:	4a04      	ldr	r2, [pc, #16]	; (800d670 <RCC_GetPCLK1ClockFreq+0x24>)
 800d65e:	5cd3      	ldrb	r3, [r2, r3]
 800d660:	461a      	mov	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	40d3      	lsrs	r3, r2
}
 800d666:	4618      	mov	r0, r3
 800d668:	3708      	adds	r7, #8
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	0800ecdc 	.word	0x0800ecdc

0800d674 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800d67c:	f7ff ff3c 	bl	800d4f8 <LL_RCC_GetAPB2Prescaler>
 800d680:	4603      	mov	r3, r0
 800d682:	0b5b      	lsrs	r3, r3, #13
 800d684:	4a04      	ldr	r2, [pc, #16]	; (800d698 <RCC_GetPCLK2ClockFreq+0x24>)
 800d686:	5cd3      	ldrb	r3, [r2, r3]
 800d688:	461a      	mov	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	40d3      	lsrs	r3, r2
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	0800ecdc 	.word	0x0800ecdc

0800d69c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800d69c:	b590      	push	{r4, r7, lr}
 800d69e:	b087      	sub	sp, #28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	617b      	str	r3, [r7, #20]
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	60fb      	str	r3, [r7, #12]
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800d6b0:	f7ff ff30 	bl	800d514 <LL_RCC_PLL_GetMainSource>
 800d6b4:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d004      	beq.n	800d6c6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6c2:	d003      	beq.n	800d6cc <RCC_PLL_GetFreqDomain_SYS+0x30>
 800d6c4:	e005      	b.n	800d6d2 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800d6c6:	4b12      	ldr	r3, [pc, #72]	; (800d710 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800d6c8:	617b      	str	r3, [r7, #20]
      break;
 800d6ca:	e005      	b.n	800d6d8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800d6cc:	4b11      	ldr	r3, [pc, #68]	; (800d714 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800d6ce:	617b      	str	r3, [r7, #20]
      break;
 800d6d0:	e002      	b.n	800d6d8 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800d6d2:	4b0f      	ldr	r3, [pc, #60]	; (800d710 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800d6d4:	617b      	str	r3, [r7, #20]
      break;
 800d6d6:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b08      	cmp	r3, #8
 800d6dc:	d113      	bne.n	800d706 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800d6de:	f7ff ff43 	bl	800d568 <LL_RCC_PLL_GetDivider>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	fbb3 f4f2 	udiv	r4, r3, r2
 800d6ea:	f7ff ff21 	bl	800d530 <LL_RCC_PLL_GetN>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	fb03 f404 	mul.w	r4, r3, r4
 800d6f4:	f7ff ff2a 	bl	800d54c <LL_RCC_PLL_GetP>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	0c1b      	lsrs	r3, r3, #16
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	fbb4 f3f3 	udiv	r3, r4, r3
 800d704:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800d706:	693b      	ldr	r3, [r7, #16]
}
 800d708:	4618      	mov	r0, r3
 800d70a:	371c      	adds	r7, #28
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd90      	pop	{r4, r7, pc}
 800d710:	00f42400 	.word	0x00f42400
 800d714:	007a1200 	.word	0x007a1200

0800d718 <LL_USART_IsEnabled>:
{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d72c:	bf0c      	ite	eq
 800d72e:	2301      	moveq	r3, #1
 800d730:	2300      	movne	r3, #0
 800d732:	b2db      	uxtb	r3, r3
}
 800d734:	4618      	mov	r0, r3
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <LL_USART_SetStopBitsLength>:
{
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	431a      	orrs	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	611a      	str	r2, [r3, #16]
}
 800d75a:	bf00      	nop
 800d75c:	370c      	adds	r7, #12
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <LL_USART_SetHWFlowCtrl>:
{
 800d766:	b480      	push	{r7}
 800d768:	b083      	sub	sp, #12
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	695b      	ldr	r3, [r3, #20]
 800d774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	431a      	orrs	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	615a      	str	r2, [r3, #20]
}
 800d780:	bf00      	nop
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <LL_USART_SetBaudRate>:
{
 800d78c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d790:	b0c0      	sub	sp, #256	; 0x100
 800d792:	af00      	add	r7, sp, #0
 800d794:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d798:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800d79c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d7a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800d7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7ac:	f040 810c 	bne.w	800d9c8 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800d7b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d7ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d7be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d7c2:	4622      	mov	r2, r4
 800d7c4:	462b      	mov	r3, r5
 800d7c6:	1891      	adds	r1, r2, r2
 800d7c8:	6639      	str	r1, [r7, #96]	; 0x60
 800d7ca:	415b      	adcs	r3, r3
 800d7cc:	667b      	str	r3, [r7, #100]	; 0x64
 800d7ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800d7d2:	4621      	mov	r1, r4
 800d7d4:	eb12 0801 	adds.w	r8, r2, r1
 800d7d8:	4629      	mov	r1, r5
 800d7da:	eb43 0901 	adc.w	r9, r3, r1
 800d7de:	f04f 0200 	mov.w	r2, #0
 800d7e2:	f04f 0300 	mov.w	r3, #0
 800d7e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d7ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d7ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d7f2:	4690      	mov	r8, r2
 800d7f4:	4699      	mov	r9, r3
 800d7f6:	4623      	mov	r3, r4
 800d7f8:	eb18 0303 	adds.w	r3, r8, r3
 800d7fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d800:	462b      	mov	r3, r5
 800d802:	eb49 0303 	adc.w	r3, r9, r3
 800d806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d80a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d80e:	2200      	movs	r2, #0
 800d810:	469a      	mov	sl, r3
 800d812:	4693      	mov	fp, r2
 800d814:	eb1a 030a 	adds.w	r3, sl, sl
 800d818:	65bb      	str	r3, [r7, #88]	; 0x58
 800d81a:	eb4b 030b 	adc.w	r3, fp, fp
 800d81e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d820:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d824:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d828:	f7fe fd2a 	bl	800c280 <__aeabi_uldivmod>
 800d82c:	4602      	mov	r2, r0
 800d82e:	460b      	mov	r3, r1
 800d830:	4b64      	ldr	r3, [pc, #400]	; (800d9c4 <LL_USART_SetBaudRate+0x238>)
 800d832:	fba3 2302 	umull	r2, r3, r3, r2
 800d836:	095b      	lsrs	r3, r3, #5
 800d838:	b29b      	uxth	r3, r3
 800d83a:	011b      	lsls	r3, r3, #4
 800d83c:	b29c      	uxth	r4, r3
 800d83e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d842:	2200      	movs	r2, #0
 800d844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d848:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d84c:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800d850:	4642      	mov	r2, r8
 800d852:	464b      	mov	r3, r9
 800d854:	1891      	adds	r1, r2, r2
 800d856:	6539      	str	r1, [r7, #80]	; 0x50
 800d858:	415b      	adcs	r3, r3
 800d85a:	657b      	str	r3, [r7, #84]	; 0x54
 800d85c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d860:	4641      	mov	r1, r8
 800d862:	1851      	adds	r1, r2, r1
 800d864:	64b9      	str	r1, [r7, #72]	; 0x48
 800d866:	4649      	mov	r1, r9
 800d868:	414b      	adcs	r3, r1
 800d86a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d86c:	f04f 0200 	mov.w	r2, #0
 800d870:	f04f 0300 	mov.w	r3, #0
 800d874:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800d878:	4659      	mov	r1, fp
 800d87a:	00cb      	lsls	r3, r1, #3
 800d87c:	4651      	mov	r1, sl
 800d87e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d882:	4651      	mov	r1, sl
 800d884:	00ca      	lsls	r2, r1, #3
 800d886:	4610      	mov	r0, r2
 800d888:	4619      	mov	r1, r3
 800d88a:	4603      	mov	r3, r0
 800d88c:	4642      	mov	r2, r8
 800d88e:	189b      	adds	r3, r3, r2
 800d890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d894:	464b      	mov	r3, r9
 800d896:	460a      	mov	r2, r1
 800d898:	eb42 0303 	adc.w	r3, r2, r3
 800d89c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d8a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d8aa:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800d8ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	18db      	adds	r3, r3, r3
 800d8b6:	643b      	str	r3, [r7, #64]	; 0x40
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	eb42 0303 	adc.w	r3, r2, r3
 800d8be:	647b      	str	r3, [r7, #68]	; 0x44
 800d8c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d8c4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d8c8:	f7fe fcda 	bl	800c280 <__aeabi_uldivmod>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4b3c      	ldr	r3, [pc, #240]	; (800d9c4 <LL_USART_SetBaudRate+0x238>)
 800d8d4:	fba3 2301 	umull	r2, r3, r3, r1
 800d8d8:	095b      	lsrs	r3, r3, #5
 800d8da:	2264      	movs	r2, #100	; 0x64
 800d8dc:	fb02 f303 	mul.w	r3, r2, r3
 800d8e0:	1acb      	subs	r3, r1, r3
 800d8e2:	00db      	lsls	r3, r3, #3
 800d8e4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d8e8:	4b36      	ldr	r3, [pc, #216]	; (800d9c4 <LL_USART_SetBaudRate+0x238>)
 800d8ea:	fba3 2302 	umull	r2, r3, r3, r2
 800d8ee:	095b      	lsrs	r3, r3, #5
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	005b      	lsls	r3, r3, #1
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	4423      	add	r3, r4
 800d8fe:	b29c      	uxth	r4, r3
 800d900:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d904:	2200      	movs	r2, #0
 800d906:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d90a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d90e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800d912:	4642      	mov	r2, r8
 800d914:	464b      	mov	r3, r9
 800d916:	1891      	adds	r1, r2, r2
 800d918:	63b9      	str	r1, [r7, #56]	; 0x38
 800d91a:	415b      	adcs	r3, r3
 800d91c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d91e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d922:	4641      	mov	r1, r8
 800d924:	1851      	adds	r1, r2, r1
 800d926:	6339      	str	r1, [r7, #48]	; 0x30
 800d928:	4649      	mov	r1, r9
 800d92a:	414b      	adcs	r3, r1
 800d92c:	637b      	str	r3, [r7, #52]	; 0x34
 800d92e:	f04f 0200 	mov.w	r2, #0
 800d932:	f04f 0300 	mov.w	r3, #0
 800d936:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d93a:	4659      	mov	r1, fp
 800d93c:	00cb      	lsls	r3, r1, #3
 800d93e:	4651      	mov	r1, sl
 800d940:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d944:	4651      	mov	r1, sl
 800d946:	00ca      	lsls	r2, r1, #3
 800d948:	4610      	mov	r0, r2
 800d94a:	4619      	mov	r1, r3
 800d94c:	4603      	mov	r3, r0
 800d94e:	4642      	mov	r2, r8
 800d950:	189b      	adds	r3, r3, r2
 800d952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d956:	464b      	mov	r3, r9
 800d958:	460a      	mov	r2, r1
 800d95a:	eb42 0303 	adc.w	r3, r2, r3
 800d95e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d962:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800d966:	2200      	movs	r2, #0
 800d968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d96c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800d970:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d974:	460b      	mov	r3, r1
 800d976:	18db      	adds	r3, r3, r3
 800d978:	62bb      	str	r3, [r7, #40]	; 0x28
 800d97a:	4613      	mov	r3, r2
 800d97c:	eb42 0303 	adc.w	r3, r2, r3
 800d980:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d982:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d986:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800d98a:	f7fe fc79 	bl	800c280 <__aeabi_uldivmod>
 800d98e:	4602      	mov	r2, r0
 800d990:	460b      	mov	r3, r1
 800d992:	4b0c      	ldr	r3, [pc, #48]	; (800d9c4 <LL_USART_SetBaudRate+0x238>)
 800d994:	fba3 1302 	umull	r1, r3, r3, r2
 800d998:	095b      	lsrs	r3, r3, #5
 800d99a:	2164      	movs	r1, #100	; 0x64
 800d99c:	fb01 f303 	mul.w	r3, r1, r3
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	3332      	adds	r3, #50	; 0x32
 800d9a6:	4a07      	ldr	r2, [pc, #28]	; (800d9c4 <LL_USART_SetBaudRate+0x238>)
 800d9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ac:	095b      	lsrs	r3, r3, #5
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	f003 0307 	and.w	r3, r3, #7
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	4423      	add	r3, r4
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9c0:	609a      	str	r2, [r3, #8]
}
 800d9c2:	e107      	b.n	800dbd4 <LL_USART_SetBaudRate+0x448>
 800d9c4:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800d9c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d9cc:	2200      	movs	r2, #0
 800d9ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d9d2:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d9d6:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800d9da:	4642      	mov	r2, r8
 800d9dc:	464b      	mov	r3, r9
 800d9de:	1891      	adds	r1, r2, r2
 800d9e0:	6239      	str	r1, [r7, #32]
 800d9e2:	415b      	adcs	r3, r3
 800d9e4:	627b      	str	r3, [r7, #36]	; 0x24
 800d9e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d9ea:	4641      	mov	r1, r8
 800d9ec:	1854      	adds	r4, r2, r1
 800d9ee:	4649      	mov	r1, r9
 800d9f0:	eb43 0501 	adc.w	r5, r3, r1
 800d9f4:	f04f 0200 	mov.w	r2, #0
 800d9f8:	f04f 0300 	mov.w	r3, #0
 800d9fc:	00eb      	lsls	r3, r5, #3
 800d9fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da02:	00e2      	lsls	r2, r4, #3
 800da04:	4614      	mov	r4, r2
 800da06:	461d      	mov	r5, r3
 800da08:	4643      	mov	r3, r8
 800da0a:	18e3      	adds	r3, r4, r3
 800da0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800da10:	464b      	mov	r3, r9
 800da12:	eb45 0303 	adc.w	r3, r5, r3
 800da16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800da1a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800da1e:	2200      	movs	r2, #0
 800da20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800da24:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800da28:	f04f 0200 	mov.w	r2, #0
 800da2c:	f04f 0300 	mov.w	r3, #0
 800da30:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800da34:	4629      	mov	r1, r5
 800da36:	008b      	lsls	r3, r1, #2
 800da38:	4621      	mov	r1, r4
 800da3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800da3e:	4621      	mov	r1, r4
 800da40:	008a      	lsls	r2, r1, #2
 800da42:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800da46:	f7fe fc1b 	bl	800c280 <__aeabi_uldivmod>
 800da4a:	4602      	mov	r2, r0
 800da4c:	460b      	mov	r3, r1
 800da4e:	4b64      	ldr	r3, [pc, #400]	; (800dbe0 <LL_USART_SetBaudRate+0x454>)
 800da50:	fba3 2302 	umull	r2, r3, r3, r2
 800da54:	095b      	lsrs	r3, r3, #5
 800da56:	b29b      	uxth	r3, r3
 800da58:	011b      	lsls	r3, r3, #4
 800da5a:	b29c      	uxth	r4, r3
 800da5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800da60:	2200      	movs	r2, #0
 800da62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800da6a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800da6e:	4642      	mov	r2, r8
 800da70:	464b      	mov	r3, r9
 800da72:	1891      	adds	r1, r2, r2
 800da74:	61b9      	str	r1, [r7, #24]
 800da76:	415b      	adcs	r3, r3
 800da78:	61fb      	str	r3, [r7, #28]
 800da7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800da7e:	4641      	mov	r1, r8
 800da80:	1851      	adds	r1, r2, r1
 800da82:	6139      	str	r1, [r7, #16]
 800da84:	4649      	mov	r1, r9
 800da86:	414b      	adcs	r3, r1
 800da88:	617b      	str	r3, [r7, #20]
 800da8a:	f04f 0200 	mov.w	r2, #0
 800da8e:	f04f 0300 	mov.w	r3, #0
 800da92:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800da96:	4659      	mov	r1, fp
 800da98:	00cb      	lsls	r3, r1, #3
 800da9a:	4651      	mov	r1, sl
 800da9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800daa0:	4651      	mov	r1, sl
 800daa2:	00ca      	lsls	r2, r1, #3
 800daa4:	4610      	mov	r0, r2
 800daa6:	4619      	mov	r1, r3
 800daa8:	4603      	mov	r3, r0
 800daaa:	4642      	mov	r2, r8
 800daac:	189b      	adds	r3, r3, r2
 800daae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dab2:	464b      	mov	r3, r9
 800dab4:	460a      	mov	r2, r1
 800dab6:	eb42 0303 	adc.w	r3, r2, r3
 800daba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dabe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800dac2:	2200      	movs	r2, #0
 800dac4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dac8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800dacc:	f04f 0200 	mov.w	r2, #0
 800dad0:	f04f 0300 	mov.w	r3, #0
 800dad4:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800dad8:	4649      	mov	r1, r9
 800dada:	008b      	lsls	r3, r1, #2
 800dadc:	4641      	mov	r1, r8
 800dade:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dae2:	4641      	mov	r1, r8
 800dae4:	008a      	lsls	r2, r1, #2
 800dae6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800daea:	f7fe fbc9 	bl	800c280 <__aeabi_uldivmod>
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	4b3b      	ldr	r3, [pc, #236]	; (800dbe0 <LL_USART_SetBaudRate+0x454>)
 800daf4:	fba3 1302 	umull	r1, r3, r3, r2
 800daf8:	095b      	lsrs	r3, r3, #5
 800dafa:	2164      	movs	r1, #100	; 0x64
 800dafc:	fb01 f303 	mul.w	r3, r1, r3
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	011b      	lsls	r3, r3, #4
 800db04:	3332      	adds	r3, #50	; 0x32
 800db06:	4a36      	ldr	r2, [pc, #216]	; (800dbe0 <LL_USART_SetBaudRate+0x454>)
 800db08:	fba2 2303 	umull	r2, r3, r2, r3
 800db0c:	095b      	lsrs	r3, r3, #5
 800db0e:	b29b      	uxth	r3, r3
 800db10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db14:	b29b      	uxth	r3, r3
 800db16:	4423      	add	r3, r4
 800db18:	b29c      	uxth	r4, r3
 800db1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800db1e:	2200      	movs	r2, #0
 800db20:	67bb      	str	r3, [r7, #120]	; 0x78
 800db22:	67fa      	str	r2, [r7, #124]	; 0x7c
 800db24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800db28:	4642      	mov	r2, r8
 800db2a:	464b      	mov	r3, r9
 800db2c:	1891      	adds	r1, r2, r2
 800db2e:	60b9      	str	r1, [r7, #8]
 800db30:	415b      	adcs	r3, r3
 800db32:	60fb      	str	r3, [r7, #12]
 800db34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800db38:	4641      	mov	r1, r8
 800db3a:	1851      	adds	r1, r2, r1
 800db3c:	6039      	str	r1, [r7, #0]
 800db3e:	4649      	mov	r1, r9
 800db40:	414b      	adcs	r3, r1
 800db42:	607b      	str	r3, [r7, #4]
 800db44:	f04f 0200 	mov.w	r2, #0
 800db48:	f04f 0300 	mov.w	r3, #0
 800db4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800db50:	4659      	mov	r1, fp
 800db52:	00cb      	lsls	r3, r1, #3
 800db54:	4651      	mov	r1, sl
 800db56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db5a:	4651      	mov	r1, sl
 800db5c:	00ca      	lsls	r2, r1, #3
 800db5e:	4610      	mov	r0, r2
 800db60:	4619      	mov	r1, r3
 800db62:	4603      	mov	r3, r0
 800db64:	4642      	mov	r2, r8
 800db66:	189b      	adds	r3, r3, r2
 800db68:	673b      	str	r3, [r7, #112]	; 0x70
 800db6a:	464b      	mov	r3, r9
 800db6c:	460a      	mov	r2, r1
 800db6e:	eb42 0303 	adc.w	r3, r2, r3
 800db72:	677b      	str	r3, [r7, #116]	; 0x74
 800db74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800db78:	2200      	movs	r2, #0
 800db7a:	66bb      	str	r3, [r7, #104]	; 0x68
 800db7c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800db7e:	f04f 0200 	mov.w	r2, #0
 800db82:	f04f 0300 	mov.w	r3, #0
 800db86:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800db8a:	4649      	mov	r1, r9
 800db8c:	008b      	lsls	r3, r1, #2
 800db8e:	4641      	mov	r1, r8
 800db90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800db94:	4641      	mov	r1, r8
 800db96:	008a      	lsls	r2, r1, #2
 800db98:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800db9c:	f7fe fb70 	bl	800c280 <__aeabi_uldivmod>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	4b0e      	ldr	r3, [pc, #56]	; (800dbe0 <LL_USART_SetBaudRate+0x454>)
 800dba6:	fba3 1302 	umull	r1, r3, r3, r2
 800dbaa:	095b      	lsrs	r3, r3, #5
 800dbac:	2164      	movs	r1, #100	; 0x64
 800dbae:	fb01 f303 	mul.w	r3, r1, r3
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	011b      	lsls	r3, r3, #4
 800dbb6:	3332      	adds	r3, #50	; 0x32
 800dbb8:	4a09      	ldr	r2, [pc, #36]	; (800dbe0 <LL_USART_SetBaudRate+0x454>)
 800dbba:	fba2 2303 	umull	r2, r3, r2, r3
 800dbbe:	095b      	lsrs	r3, r3, #5
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	f003 030f 	and.w	r3, r3, #15
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	4423      	add	r3, r4
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	461a      	mov	r2, r3
 800dbce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dbd2:	609a      	str	r2, [r3, #8]
}
 800dbd4:	bf00      	nop
 800dbd6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbe0:	51eb851f 	.word	0x51eb851f

0800dbe4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b088      	sub	sp, #32
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
 800dbec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f7ff fd8e 	bl	800d718 <LL_USART_IsEnabled>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d149      	bne.n	800dc96 <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800dc0a:	f023 030c 	bic.w	r3, r3, #12
 800dc0e:	683a      	ldr	r2, [r7, #0]
 800dc10:	6851      	ldr	r1, [r2, #4]
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	68d2      	ldr	r2, [r2, #12]
 800dc16:	4311      	orrs	r1, r2
 800dc18:	683a      	ldr	r2, [r7, #0]
 800dc1a:	6912      	ldr	r2, [r2, #16]
 800dc1c:	4311      	orrs	r1, r2
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	6992      	ldr	r2, [r2, #24]
 800dc22:	430a      	orrs	r2, r1
 800dc24:	431a      	orrs	r2, r3
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7ff fd85 	bl	800d740 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	695b      	ldr	r3, [r3, #20]
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f7ff fd92 	bl	800d766 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800dc42:	f107 0308 	add.w	r3, r7, #8
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7ff fc9c 	bl	800d584 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a14      	ldr	r2, [pc, #80]	; (800dca0 <LL_USART_Init+0xbc>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d102      	bne.n	800dc5a <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	61bb      	str	r3, [r7, #24]
 800dc58:	e00c      	b.n	800dc74 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	4a11      	ldr	r2, [pc, #68]	; (800dca4 <LL_USART_Init+0xc0>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d102      	bne.n	800dc68 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	61bb      	str	r3, [r7, #24]
 800dc66:	e005      	b.n	800dc74 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4a0f      	ldr	r2, [pc, #60]	; (800dca8 <LL_USART_Init+0xc4>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d101      	bne.n	800dc74 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800dc74:	69bb      	ldr	r3, [r7, #24]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00d      	beq.n	800dc96 <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d009      	beq.n	800dc96 <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 800dc82:	2300      	movs	r3, #0
 800dc84:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	699a      	ldr	r2, [r3, #24]
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	69b9      	ldr	r1, [r7, #24]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff fd7b 	bl	800d78c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800dc96:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3720      	adds	r7, #32
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	40011000 	.word	0x40011000
 800dca4:	40004400 	.word	0x40004400
 800dca8:	40011400 	.word	0x40011400

0800dcac <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	fbb2 f3f3 	udiv	r3, r2, r3
 800dcbe:	4a07      	ldr	r2, [pc, #28]	; (800dcdc <LL_InitTick+0x30>)
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800dcc4:	4b05      	ldr	r3, [pc, #20]	; (800dcdc <LL_InitTick+0x30>)
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dcca:	4b04      	ldr	r3, [pc, #16]	; (800dcdc <LL_InitTick+0x30>)
 800dccc:	2205      	movs	r2, #5
 800dcce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800dcd0:	bf00      	nop
 800dcd2:	370c      	adds	r7, #12
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcda:	4770      	bx	lr
 800dcdc:	e000e010 	.word	0xe000e010

0800dce0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800dce8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f7ff ffdd 	bl	800dcac <LL_InitTick>
}
 800dcf2:	bf00      	nop
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
	...

0800dcfc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800dd04:	4a04      	ldr	r2, [pc, #16]	; (800dd18 <LL_SetSystemCoreClock+0x1c>)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6013      	str	r3, [r2, #0]
}
 800dd0a:	bf00      	nop
 800dd0c:	370c      	adds	r7, #12
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	20000000 	.word	0x20000000

0800dd1c <__errno>:
 800dd1c:	4b01      	ldr	r3, [pc, #4]	; (800dd24 <__errno+0x8>)
 800dd1e:	6818      	ldr	r0, [r3, #0]
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	20000004 	.word	0x20000004

0800dd28 <__libc_init_array>:
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	4d0d      	ldr	r5, [pc, #52]	; (800dd60 <__libc_init_array+0x38>)
 800dd2c:	4c0d      	ldr	r4, [pc, #52]	; (800dd64 <__libc_init_array+0x3c>)
 800dd2e:	1b64      	subs	r4, r4, r5
 800dd30:	10a4      	asrs	r4, r4, #2
 800dd32:	2600      	movs	r6, #0
 800dd34:	42a6      	cmp	r6, r4
 800dd36:	d109      	bne.n	800dd4c <__libc_init_array+0x24>
 800dd38:	4d0b      	ldr	r5, [pc, #44]	; (800dd68 <__libc_init_array+0x40>)
 800dd3a:	4c0c      	ldr	r4, [pc, #48]	; (800dd6c <__libc_init_array+0x44>)
 800dd3c:	f000 ffae 	bl	800ec9c <_init>
 800dd40:	1b64      	subs	r4, r4, r5
 800dd42:	10a4      	asrs	r4, r4, #2
 800dd44:	2600      	movs	r6, #0
 800dd46:	42a6      	cmp	r6, r4
 800dd48:	d105      	bne.n	800dd56 <__libc_init_array+0x2e>
 800dd4a:	bd70      	pop	{r4, r5, r6, pc}
 800dd4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd50:	4798      	blx	r3
 800dd52:	3601      	adds	r6, #1
 800dd54:	e7ee      	b.n	800dd34 <__libc_init_array+0xc>
 800dd56:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd5a:	4798      	blx	r3
 800dd5c:	3601      	adds	r6, #1
 800dd5e:	e7f2      	b.n	800dd46 <__libc_init_array+0x1e>
 800dd60:	0800ed84 	.word	0x0800ed84
 800dd64:	0800ed84 	.word	0x0800ed84
 800dd68:	0800ed84 	.word	0x0800ed84
 800dd6c:	0800ed88 	.word	0x0800ed88

0800dd70 <memset>:
 800dd70:	4402      	add	r2, r0
 800dd72:	4603      	mov	r3, r0
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d100      	bne.n	800dd7a <memset+0xa>
 800dd78:	4770      	bx	lr
 800dd7a:	f803 1b01 	strb.w	r1, [r3], #1
 800dd7e:	e7f9      	b.n	800dd74 <memset+0x4>

0800dd80 <iprintf>:
 800dd80:	b40f      	push	{r0, r1, r2, r3}
 800dd82:	4b0a      	ldr	r3, [pc, #40]	; (800ddac <iprintf+0x2c>)
 800dd84:	b513      	push	{r0, r1, r4, lr}
 800dd86:	681c      	ldr	r4, [r3, #0]
 800dd88:	b124      	cbz	r4, 800dd94 <iprintf+0x14>
 800dd8a:	69a3      	ldr	r3, [r4, #24]
 800dd8c:	b913      	cbnz	r3, 800dd94 <iprintf+0x14>
 800dd8e:	4620      	mov	r0, r4
 800dd90:	f000 f866 	bl	800de60 <__sinit>
 800dd94:	ab05      	add	r3, sp, #20
 800dd96:	9a04      	ldr	r2, [sp, #16]
 800dd98:	68a1      	ldr	r1, [r4, #8]
 800dd9a:	9301      	str	r3, [sp, #4]
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f000 f9bd 	bl	800e11c <_vfiprintf_r>
 800dda2:	b002      	add	sp, #8
 800dda4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dda8:	b004      	add	sp, #16
 800ddaa:	4770      	bx	lr
 800ddac:	20000004 	.word	0x20000004

0800ddb0 <std>:
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	b510      	push	{r4, lr}
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	e9c0 3300 	strd	r3, r3, [r0]
 800ddba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddbe:	6083      	str	r3, [r0, #8]
 800ddc0:	8181      	strh	r1, [r0, #12]
 800ddc2:	6643      	str	r3, [r0, #100]	; 0x64
 800ddc4:	81c2      	strh	r2, [r0, #14]
 800ddc6:	6183      	str	r3, [r0, #24]
 800ddc8:	4619      	mov	r1, r3
 800ddca:	2208      	movs	r2, #8
 800ddcc:	305c      	adds	r0, #92	; 0x5c
 800ddce:	f7ff ffcf 	bl	800dd70 <memset>
 800ddd2:	4b05      	ldr	r3, [pc, #20]	; (800dde8 <std+0x38>)
 800ddd4:	6263      	str	r3, [r4, #36]	; 0x24
 800ddd6:	4b05      	ldr	r3, [pc, #20]	; (800ddec <std+0x3c>)
 800ddd8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddda:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <std+0x40>)
 800dddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ddde:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <std+0x44>)
 800dde0:	6224      	str	r4, [r4, #32]
 800dde2:	6323      	str	r3, [r4, #48]	; 0x30
 800dde4:	bd10      	pop	{r4, pc}
 800dde6:	bf00      	nop
 800dde8:	0800e6c5 	.word	0x0800e6c5
 800ddec:	0800e6e7 	.word	0x0800e6e7
 800ddf0:	0800e71f 	.word	0x0800e71f
 800ddf4:	0800e743 	.word	0x0800e743

0800ddf8 <_cleanup_r>:
 800ddf8:	4901      	ldr	r1, [pc, #4]	; (800de00 <_cleanup_r+0x8>)
 800ddfa:	f000 b8af 	b.w	800df5c <_fwalk_reent>
 800ddfe:	bf00      	nop
 800de00:	0800ea1d 	.word	0x0800ea1d

0800de04 <__sfmoreglue>:
 800de04:	b570      	push	{r4, r5, r6, lr}
 800de06:	2268      	movs	r2, #104	; 0x68
 800de08:	1e4d      	subs	r5, r1, #1
 800de0a:	4355      	muls	r5, r2
 800de0c:	460e      	mov	r6, r1
 800de0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de12:	f000 f8e5 	bl	800dfe0 <_malloc_r>
 800de16:	4604      	mov	r4, r0
 800de18:	b140      	cbz	r0, 800de2c <__sfmoreglue+0x28>
 800de1a:	2100      	movs	r1, #0
 800de1c:	e9c0 1600 	strd	r1, r6, [r0]
 800de20:	300c      	adds	r0, #12
 800de22:	60a0      	str	r0, [r4, #8]
 800de24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de28:	f7ff ffa2 	bl	800dd70 <memset>
 800de2c:	4620      	mov	r0, r4
 800de2e:	bd70      	pop	{r4, r5, r6, pc}

0800de30 <__sfp_lock_acquire>:
 800de30:	4801      	ldr	r0, [pc, #4]	; (800de38 <__sfp_lock_acquire+0x8>)
 800de32:	f000 b8b3 	b.w	800df9c <__retarget_lock_acquire_recursive>
 800de36:	bf00      	nop
 800de38:	2000008d 	.word	0x2000008d

0800de3c <__sfp_lock_release>:
 800de3c:	4801      	ldr	r0, [pc, #4]	; (800de44 <__sfp_lock_release+0x8>)
 800de3e:	f000 b8ae 	b.w	800df9e <__retarget_lock_release_recursive>
 800de42:	bf00      	nop
 800de44:	2000008d 	.word	0x2000008d

0800de48 <__sinit_lock_acquire>:
 800de48:	4801      	ldr	r0, [pc, #4]	; (800de50 <__sinit_lock_acquire+0x8>)
 800de4a:	f000 b8a7 	b.w	800df9c <__retarget_lock_acquire_recursive>
 800de4e:	bf00      	nop
 800de50:	2000008e 	.word	0x2000008e

0800de54 <__sinit_lock_release>:
 800de54:	4801      	ldr	r0, [pc, #4]	; (800de5c <__sinit_lock_release+0x8>)
 800de56:	f000 b8a2 	b.w	800df9e <__retarget_lock_release_recursive>
 800de5a:	bf00      	nop
 800de5c:	2000008e 	.word	0x2000008e

0800de60 <__sinit>:
 800de60:	b510      	push	{r4, lr}
 800de62:	4604      	mov	r4, r0
 800de64:	f7ff fff0 	bl	800de48 <__sinit_lock_acquire>
 800de68:	69a3      	ldr	r3, [r4, #24]
 800de6a:	b11b      	cbz	r3, 800de74 <__sinit+0x14>
 800de6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de70:	f7ff bff0 	b.w	800de54 <__sinit_lock_release>
 800de74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de78:	6523      	str	r3, [r4, #80]	; 0x50
 800de7a:	4b13      	ldr	r3, [pc, #76]	; (800dec8 <__sinit+0x68>)
 800de7c:	4a13      	ldr	r2, [pc, #76]	; (800decc <__sinit+0x6c>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	62a2      	str	r2, [r4, #40]	; 0x28
 800de82:	42a3      	cmp	r3, r4
 800de84:	bf04      	itt	eq
 800de86:	2301      	moveq	r3, #1
 800de88:	61a3      	streq	r3, [r4, #24]
 800de8a:	4620      	mov	r0, r4
 800de8c:	f000 f820 	bl	800ded0 <__sfp>
 800de90:	6060      	str	r0, [r4, #4]
 800de92:	4620      	mov	r0, r4
 800de94:	f000 f81c 	bl	800ded0 <__sfp>
 800de98:	60a0      	str	r0, [r4, #8]
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 f818 	bl	800ded0 <__sfp>
 800dea0:	2200      	movs	r2, #0
 800dea2:	60e0      	str	r0, [r4, #12]
 800dea4:	2104      	movs	r1, #4
 800dea6:	6860      	ldr	r0, [r4, #4]
 800dea8:	f7ff ff82 	bl	800ddb0 <std>
 800deac:	68a0      	ldr	r0, [r4, #8]
 800deae:	2201      	movs	r2, #1
 800deb0:	2109      	movs	r1, #9
 800deb2:	f7ff ff7d 	bl	800ddb0 <std>
 800deb6:	68e0      	ldr	r0, [r4, #12]
 800deb8:	2202      	movs	r2, #2
 800deba:	2112      	movs	r1, #18
 800debc:	f7ff ff78 	bl	800ddb0 <std>
 800dec0:	2301      	movs	r3, #1
 800dec2:	61a3      	str	r3, [r4, #24]
 800dec4:	e7d2      	b.n	800de6c <__sinit+0xc>
 800dec6:	bf00      	nop
 800dec8:	0800ece4 	.word	0x0800ece4
 800decc:	0800ddf9 	.word	0x0800ddf9

0800ded0 <__sfp>:
 800ded0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded2:	4607      	mov	r7, r0
 800ded4:	f7ff ffac 	bl	800de30 <__sfp_lock_acquire>
 800ded8:	4b1e      	ldr	r3, [pc, #120]	; (800df54 <__sfp+0x84>)
 800deda:	681e      	ldr	r6, [r3, #0]
 800dedc:	69b3      	ldr	r3, [r6, #24]
 800dede:	b913      	cbnz	r3, 800dee6 <__sfp+0x16>
 800dee0:	4630      	mov	r0, r6
 800dee2:	f7ff ffbd 	bl	800de60 <__sinit>
 800dee6:	3648      	adds	r6, #72	; 0x48
 800dee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800deec:	3b01      	subs	r3, #1
 800deee:	d503      	bpl.n	800def8 <__sfp+0x28>
 800def0:	6833      	ldr	r3, [r6, #0]
 800def2:	b30b      	cbz	r3, 800df38 <__sfp+0x68>
 800def4:	6836      	ldr	r6, [r6, #0]
 800def6:	e7f7      	b.n	800dee8 <__sfp+0x18>
 800def8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800defc:	b9d5      	cbnz	r5, 800df34 <__sfp+0x64>
 800defe:	4b16      	ldr	r3, [pc, #88]	; (800df58 <__sfp+0x88>)
 800df00:	60e3      	str	r3, [r4, #12]
 800df02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df06:	6665      	str	r5, [r4, #100]	; 0x64
 800df08:	f000 f847 	bl	800df9a <__retarget_lock_init_recursive>
 800df0c:	f7ff ff96 	bl	800de3c <__sfp_lock_release>
 800df10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df18:	6025      	str	r5, [r4, #0]
 800df1a:	61a5      	str	r5, [r4, #24]
 800df1c:	2208      	movs	r2, #8
 800df1e:	4629      	mov	r1, r5
 800df20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df24:	f7ff ff24 	bl	800dd70 <memset>
 800df28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df30:	4620      	mov	r0, r4
 800df32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df34:	3468      	adds	r4, #104	; 0x68
 800df36:	e7d9      	b.n	800deec <__sfp+0x1c>
 800df38:	2104      	movs	r1, #4
 800df3a:	4638      	mov	r0, r7
 800df3c:	f7ff ff62 	bl	800de04 <__sfmoreglue>
 800df40:	4604      	mov	r4, r0
 800df42:	6030      	str	r0, [r6, #0]
 800df44:	2800      	cmp	r0, #0
 800df46:	d1d5      	bne.n	800def4 <__sfp+0x24>
 800df48:	f7ff ff78 	bl	800de3c <__sfp_lock_release>
 800df4c:	230c      	movs	r3, #12
 800df4e:	603b      	str	r3, [r7, #0]
 800df50:	e7ee      	b.n	800df30 <__sfp+0x60>
 800df52:	bf00      	nop
 800df54:	0800ece4 	.word	0x0800ece4
 800df58:	ffff0001 	.word	0xffff0001

0800df5c <_fwalk_reent>:
 800df5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df60:	4606      	mov	r6, r0
 800df62:	4688      	mov	r8, r1
 800df64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df68:	2700      	movs	r7, #0
 800df6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df6e:	f1b9 0901 	subs.w	r9, r9, #1
 800df72:	d505      	bpl.n	800df80 <_fwalk_reent+0x24>
 800df74:	6824      	ldr	r4, [r4, #0]
 800df76:	2c00      	cmp	r4, #0
 800df78:	d1f7      	bne.n	800df6a <_fwalk_reent+0xe>
 800df7a:	4638      	mov	r0, r7
 800df7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df80:	89ab      	ldrh	r3, [r5, #12]
 800df82:	2b01      	cmp	r3, #1
 800df84:	d907      	bls.n	800df96 <_fwalk_reent+0x3a>
 800df86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df8a:	3301      	adds	r3, #1
 800df8c:	d003      	beq.n	800df96 <_fwalk_reent+0x3a>
 800df8e:	4629      	mov	r1, r5
 800df90:	4630      	mov	r0, r6
 800df92:	47c0      	blx	r8
 800df94:	4307      	orrs	r7, r0
 800df96:	3568      	adds	r5, #104	; 0x68
 800df98:	e7e9      	b.n	800df6e <_fwalk_reent+0x12>

0800df9a <__retarget_lock_init_recursive>:
 800df9a:	4770      	bx	lr

0800df9c <__retarget_lock_acquire_recursive>:
 800df9c:	4770      	bx	lr

0800df9e <__retarget_lock_release_recursive>:
 800df9e:	4770      	bx	lr

0800dfa0 <sbrk_aligned>:
 800dfa0:	b570      	push	{r4, r5, r6, lr}
 800dfa2:	4e0e      	ldr	r6, [pc, #56]	; (800dfdc <sbrk_aligned+0x3c>)
 800dfa4:	460c      	mov	r4, r1
 800dfa6:	6831      	ldr	r1, [r6, #0]
 800dfa8:	4605      	mov	r5, r0
 800dfaa:	b911      	cbnz	r1, 800dfb2 <sbrk_aligned+0x12>
 800dfac:	f000 fb7a 	bl	800e6a4 <_sbrk_r>
 800dfb0:	6030      	str	r0, [r6, #0]
 800dfb2:	4621      	mov	r1, r4
 800dfb4:	4628      	mov	r0, r5
 800dfb6:	f000 fb75 	bl	800e6a4 <_sbrk_r>
 800dfba:	1c43      	adds	r3, r0, #1
 800dfbc:	d00a      	beq.n	800dfd4 <sbrk_aligned+0x34>
 800dfbe:	1cc4      	adds	r4, r0, #3
 800dfc0:	f024 0403 	bic.w	r4, r4, #3
 800dfc4:	42a0      	cmp	r0, r4
 800dfc6:	d007      	beq.n	800dfd8 <sbrk_aligned+0x38>
 800dfc8:	1a21      	subs	r1, r4, r0
 800dfca:	4628      	mov	r0, r5
 800dfcc:	f000 fb6a 	bl	800e6a4 <_sbrk_r>
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d101      	bne.n	800dfd8 <sbrk_aligned+0x38>
 800dfd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dfd8:	4620      	mov	r0, r4
 800dfda:	bd70      	pop	{r4, r5, r6, pc}
 800dfdc:	20000094 	.word	0x20000094

0800dfe0 <_malloc_r>:
 800dfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfe4:	1ccd      	adds	r5, r1, #3
 800dfe6:	f025 0503 	bic.w	r5, r5, #3
 800dfea:	3508      	adds	r5, #8
 800dfec:	2d0c      	cmp	r5, #12
 800dfee:	bf38      	it	cc
 800dff0:	250c      	movcc	r5, #12
 800dff2:	2d00      	cmp	r5, #0
 800dff4:	4607      	mov	r7, r0
 800dff6:	db01      	blt.n	800dffc <_malloc_r+0x1c>
 800dff8:	42a9      	cmp	r1, r5
 800dffa:	d905      	bls.n	800e008 <_malloc_r+0x28>
 800dffc:	230c      	movs	r3, #12
 800dffe:	603b      	str	r3, [r7, #0]
 800e000:	2600      	movs	r6, #0
 800e002:	4630      	mov	r0, r6
 800e004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e008:	4e2e      	ldr	r6, [pc, #184]	; (800e0c4 <_malloc_r+0xe4>)
 800e00a:	f000 fdbb 	bl	800eb84 <__malloc_lock>
 800e00e:	6833      	ldr	r3, [r6, #0]
 800e010:	461c      	mov	r4, r3
 800e012:	bb34      	cbnz	r4, 800e062 <_malloc_r+0x82>
 800e014:	4629      	mov	r1, r5
 800e016:	4638      	mov	r0, r7
 800e018:	f7ff ffc2 	bl	800dfa0 <sbrk_aligned>
 800e01c:	1c43      	adds	r3, r0, #1
 800e01e:	4604      	mov	r4, r0
 800e020:	d14d      	bne.n	800e0be <_malloc_r+0xde>
 800e022:	6834      	ldr	r4, [r6, #0]
 800e024:	4626      	mov	r6, r4
 800e026:	2e00      	cmp	r6, #0
 800e028:	d140      	bne.n	800e0ac <_malloc_r+0xcc>
 800e02a:	6823      	ldr	r3, [r4, #0]
 800e02c:	4631      	mov	r1, r6
 800e02e:	4638      	mov	r0, r7
 800e030:	eb04 0803 	add.w	r8, r4, r3
 800e034:	f000 fb36 	bl	800e6a4 <_sbrk_r>
 800e038:	4580      	cmp	r8, r0
 800e03a:	d13a      	bne.n	800e0b2 <_malloc_r+0xd2>
 800e03c:	6821      	ldr	r1, [r4, #0]
 800e03e:	3503      	adds	r5, #3
 800e040:	1a6d      	subs	r5, r5, r1
 800e042:	f025 0503 	bic.w	r5, r5, #3
 800e046:	3508      	adds	r5, #8
 800e048:	2d0c      	cmp	r5, #12
 800e04a:	bf38      	it	cc
 800e04c:	250c      	movcc	r5, #12
 800e04e:	4629      	mov	r1, r5
 800e050:	4638      	mov	r0, r7
 800e052:	f7ff ffa5 	bl	800dfa0 <sbrk_aligned>
 800e056:	3001      	adds	r0, #1
 800e058:	d02b      	beq.n	800e0b2 <_malloc_r+0xd2>
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	442b      	add	r3, r5
 800e05e:	6023      	str	r3, [r4, #0]
 800e060:	e00e      	b.n	800e080 <_malloc_r+0xa0>
 800e062:	6822      	ldr	r2, [r4, #0]
 800e064:	1b52      	subs	r2, r2, r5
 800e066:	d41e      	bmi.n	800e0a6 <_malloc_r+0xc6>
 800e068:	2a0b      	cmp	r2, #11
 800e06a:	d916      	bls.n	800e09a <_malloc_r+0xba>
 800e06c:	1961      	adds	r1, r4, r5
 800e06e:	42a3      	cmp	r3, r4
 800e070:	6025      	str	r5, [r4, #0]
 800e072:	bf18      	it	ne
 800e074:	6059      	strne	r1, [r3, #4]
 800e076:	6863      	ldr	r3, [r4, #4]
 800e078:	bf08      	it	eq
 800e07a:	6031      	streq	r1, [r6, #0]
 800e07c:	5162      	str	r2, [r4, r5]
 800e07e:	604b      	str	r3, [r1, #4]
 800e080:	4638      	mov	r0, r7
 800e082:	f104 060b 	add.w	r6, r4, #11
 800e086:	f000 fd83 	bl	800eb90 <__malloc_unlock>
 800e08a:	f026 0607 	bic.w	r6, r6, #7
 800e08e:	1d23      	adds	r3, r4, #4
 800e090:	1af2      	subs	r2, r6, r3
 800e092:	d0b6      	beq.n	800e002 <_malloc_r+0x22>
 800e094:	1b9b      	subs	r3, r3, r6
 800e096:	50a3      	str	r3, [r4, r2]
 800e098:	e7b3      	b.n	800e002 <_malloc_r+0x22>
 800e09a:	6862      	ldr	r2, [r4, #4]
 800e09c:	42a3      	cmp	r3, r4
 800e09e:	bf0c      	ite	eq
 800e0a0:	6032      	streq	r2, [r6, #0]
 800e0a2:	605a      	strne	r2, [r3, #4]
 800e0a4:	e7ec      	b.n	800e080 <_malloc_r+0xa0>
 800e0a6:	4623      	mov	r3, r4
 800e0a8:	6864      	ldr	r4, [r4, #4]
 800e0aa:	e7b2      	b.n	800e012 <_malloc_r+0x32>
 800e0ac:	4634      	mov	r4, r6
 800e0ae:	6876      	ldr	r6, [r6, #4]
 800e0b0:	e7b9      	b.n	800e026 <_malloc_r+0x46>
 800e0b2:	230c      	movs	r3, #12
 800e0b4:	603b      	str	r3, [r7, #0]
 800e0b6:	4638      	mov	r0, r7
 800e0b8:	f000 fd6a 	bl	800eb90 <__malloc_unlock>
 800e0bc:	e7a1      	b.n	800e002 <_malloc_r+0x22>
 800e0be:	6025      	str	r5, [r4, #0]
 800e0c0:	e7de      	b.n	800e080 <_malloc_r+0xa0>
 800e0c2:	bf00      	nop
 800e0c4:	20000090 	.word	0x20000090

0800e0c8 <__sfputc_r>:
 800e0c8:	6893      	ldr	r3, [r2, #8]
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	b410      	push	{r4}
 800e0d0:	6093      	str	r3, [r2, #8]
 800e0d2:	da08      	bge.n	800e0e6 <__sfputc_r+0x1e>
 800e0d4:	6994      	ldr	r4, [r2, #24]
 800e0d6:	42a3      	cmp	r3, r4
 800e0d8:	db01      	blt.n	800e0de <__sfputc_r+0x16>
 800e0da:	290a      	cmp	r1, #10
 800e0dc:	d103      	bne.n	800e0e6 <__sfputc_r+0x1e>
 800e0de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0e2:	f000 bb33 	b.w	800e74c <__swbuf_r>
 800e0e6:	6813      	ldr	r3, [r2, #0]
 800e0e8:	1c58      	adds	r0, r3, #1
 800e0ea:	6010      	str	r0, [r2, #0]
 800e0ec:	7019      	strb	r1, [r3, #0]
 800e0ee:	4608      	mov	r0, r1
 800e0f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e0f4:	4770      	bx	lr

0800e0f6 <__sfputs_r>:
 800e0f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f8:	4606      	mov	r6, r0
 800e0fa:	460f      	mov	r7, r1
 800e0fc:	4614      	mov	r4, r2
 800e0fe:	18d5      	adds	r5, r2, r3
 800e100:	42ac      	cmp	r4, r5
 800e102:	d101      	bne.n	800e108 <__sfputs_r+0x12>
 800e104:	2000      	movs	r0, #0
 800e106:	e007      	b.n	800e118 <__sfputs_r+0x22>
 800e108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e10c:	463a      	mov	r2, r7
 800e10e:	4630      	mov	r0, r6
 800e110:	f7ff ffda 	bl	800e0c8 <__sfputc_r>
 800e114:	1c43      	adds	r3, r0, #1
 800e116:	d1f3      	bne.n	800e100 <__sfputs_r+0xa>
 800e118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e11c <_vfiprintf_r>:
 800e11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e120:	460d      	mov	r5, r1
 800e122:	b09d      	sub	sp, #116	; 0x74
 800e124:	4614      	mov	r4, r2
 800e126:	4698      	mov	r8, r3
 800e128:	4606      	mov	r6, r0
 800e12a:	b118      	cbz	r0, 800e134 <_vfiprintf_r+0x18>
 800e12c:	6983      	ldr	r3, [r0, #24]
 800e12e:	b90b      	cbnz	r3, 800e134 <_vfiprintf_r+0x18>
 800e130:	f7ff fe96 	bl	800de60 <__sinit>
 800e134:	4b89      	ldr	r3, [pc, #548]	; (800e35c <_vfiprintf_r+0x240>)
 800e136:	429d      	cmp	r5, r3
 800e138:	d11b      	bne.n	800e172 <_vfiprintf_r+0x56>
 800e13a:	6875      	ldr	r5, [r6, #4]
 800e13c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e13e:	07d9      	lsls	r1, r3, #31
 800e140:	d405      	bmi.n	800e14e <_vfiprintf_r+0x32>
 800e142:	89ab      	ldrh	r3, [r5, #12]
 800e144:	059a      	lsls	r2, r3, #22
 800e146:	d402      	bmi.n	800e14e <_vfiprintf_r+0x32>
 800e148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e14a:	f7ff ff27 	bl	800df9c <__retarget_lock_acquire_recursive>
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	071b      	lsls	r3, r3, #28
 800e152:	d501      	bpl.n	800e158 <_vfiprintf_r+0x3c>
 800e154:	692b      	ldr	r3, [r5, #16]
 800e156:	b9eb      	cbnz	r3, 800e194 <_vfiprintf_r+0x78>
 800e158:	4629      	mov	r1, r5
 800e15a:	4630      	mov	r0, r6
 800e15c:	f000 fb5a 	bl	800e814 <__swsetup_r>
 800e160:	b1c0      	cbz	r0, 800e194 <_vfiprintf_r+0x78>
 800e162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e164:	07dc      	lsls	r4, r3, #31
 800e166:	d50e      	bpl.n	800e186 <_vfiprintf_r+0x6a>
 800e168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e16c:	b01d      	add	sp, #116	; 0x74
 800e16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e172:	4b7b      	ldr	r3, [pc, #492]	; (800e360 <_vfiprintf_r+0x244>)
 800e174:	429d      	cmp	r5, r3
 800e176:	d101      	bne.n	800e17c <_vfiprintf_r+0x60>
 800e178:	68b5      	ldr	r5, [r6, #8]
 800e17a:	e7df      	b.n	800e13c <_vfiprintf_r+0x20>
 800e17c:	4b79      	ldr	r3, [pc, #484]	; (800e364 <_vfiprintf_r+0x248>)
 800e17e:	429d      	cmp	r5, r3
 800e180:	bf08      	it	eq
 800e182:	68f5      	ldreq	r5, [r6, #12]
 800e184:	e7da      	b.n	800e13c <_vfiprintf_r+0x20>
 800e186:	89ab      	ldrh	r3, [r5, #12]
 800e188:	0598      	lsls	r0, r3, #22
 800e18a:	d4ed      	bmi.n	800e168 <_vfiprintf_r+0x4c>
 800e18c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e18e:	f7ff ff06 	bl	800df9e <__retarget_lock_release_recursive>
 800e192:	e7e9      	b.n	800e168 <_vfiprintf_r+0x4c>
 800e194:	2300      	movs	r3, #0
 800e196:	9309      	str	r3, [sp, #36]	; 0x24
 800e198:	2320      	movs	r3, #32
 800e19a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e19e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1a2:	2330      	movs	r3, #48	; 0x30
 800e1a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e368 <_vfiprintf_r+0x24c>
 800e1a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1ac:	f04f 0901 	mov.w	r9, #1
 800e1b0:	4623      	mov	r3, r4
 800e1b2:	469a      	mov	sl, r3
 800e1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1b8:	b10a      	cbz	r2, 800e1be <_vfiprintf_r+0xa2>
 800e1ba:	2a25      	cmp	r2, #37	; 0x25
 800e1bc:	d1f9      	bne.n	800e1b2 <_vfiprintf_r+0x96>
 800e1be:	ebba 0b04 	subs.w	fp, sl, r4
 800e1c2:	d00b      	beq.n	800e1dc <_vfiprintf_r+0xc0>
 800e1c4:	465b      	mov	r3, fp
 800e1c6:	4622      	mov	r2, r4
 800e1c8:	4629      	mov	r1, r5
 800e1ca:	4630      	mov	r0, r6
 800e1cc:	f7ff ff93 	bl	800e0f6 <__sfputs_r>
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	f000 80aa 	beq.w	800e32a <_vfiprintf_r+0x20e>
 800e1d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1d8:	445a      	add	r2, fp
 800e1da:	9209      	str	r2, [sp, #36]	; 0x24
 800e1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 80a2 	beq.w	800e32a <_vfiprintf_r+0x20e>
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1f0:	f10a 0a01 	add.w	sl, sl, #1
 800e1f4:	9304      	str	r3, [sp, #16]
 800e1f6:	9307      	str	r3, [sp, #28]
 800e1f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e1fc:	931a      	str	r3, [sp, #104]	; 0x68
 800e1fe:	4654      	mov	r4, sl
 800e200:	2205      	movs	r2, #5
 800e202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e206:	4858      	ldr	r0, [pc, #352]	; (800e368 <_vfiprintf_r+0x24c>)
 800e208:	f7fd ffea 	bl	800c1e0 <memchr>
 800e20c:	9a04      	ldr	r2, [sp, #16]
 800e20e:	b9d8      	cbnz	r0, 800e248 <_vfiprintf_r+0x12c>
 800e210:	06d1      	lsls	r1, r2, #27
 800e212:	bf44      	itt	mi
 800e214:	2320      	movmi	r3, #32
 800e216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e21a:	0713      	lsls	r3, r2, #28
 800e21c:	bf44      	itt	mi
 800e21e:	232b      	movmi	r3, #43	; 0x2b
 800e220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e224:	f89a 3000 	ldrb.w	r3, [sl]
 800e228:	2b2a      	cmp	r3, #42	; 0x2a
 800e22a:	d015      	beq.n	800e258 <_vfiprintf_r+0x13c>
 800e22c:	9a07      	ldr	r2, [sp, #28]
 800e22e:	4654      	mov	r4, sl
 800e230:	2000      	movs	r0, #0
 800e232:	f04f 0c0a 	mov.w	ip, #10
 800e236:	4621      	mov	r1, r4
 800e238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e23c:	3b30      	subs	r3, #48	; 0x30
 800e23e:	2b09      	cmp	r3, #9
 800e240:	d94e      	bls.n	800e2e0 <_vfiprintf_r+0x1c4>
 800e242:	b1b0      	cbz	r0, 800e272 <_vfiprintf_r+0x156>
 800e244:	9207      	str	r2, [sp, #28]
 800e246:	e014      	b.n	800e272 <_vfiprintf_r+0x156>
 800e248:	eba0 0308 	sub.w	r3, r0, r8
 800e24c:	fa09 f303 	lsl.w	r3, r9, r3
 800e250:	4313      	orrs	r3, r2
 800e252:	9304      	str	r3, [sp, #16]
 800e254:	46a2      	mov	sl, r4
 800e256:	e7d2      	b.n	800e1fe <_vfiprintf_r+0xe2>
 800e258:	9b03      	ldr	r3, [sp, #12]
 800e25a:	1d19      	adds	r1, r3, #4
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	9103      	str	r1, [sp, #12]
 800e260:	2b00      	cmp	r3, #0
 800e262:	bfbb      	ittet	lt
 800e264:	425b      	neglt	r3, r3
 800e266:	f042 0202 	orrlt.w	r2, r2, #2
 800e26a:	9307      	strge	r3, [sp, #28]
 800e26c:	9307      	strlt	r3, [sp, #28]
 800e26e:	bfb8      	it	lt
 800e270:	9204      	strlt	r2, [sp, #16]
 800e272:	7823      	ldrb	r3, [r4, #0]
 800e274:	2b2e      	cmp	r3, #46	; 0x2e
 800e276:	d10c      	bne.n	800e292 <_vfiprintf_r+0x176>
 800e278:	7863      	ldrb	r3, [r4, #1]
 800e27a:	2b2a      	cmp	r3, #42	; 0x2a
 800e27c:	d135      	bne.n	800e2ea <_vfiprintf_r+0x1ce>
 800e27e:	9b03      	ldr	r3, [sp, #12]
 800e280:	1d1a      	adds	r2, r3, #4
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	9203      	str	r2, [sp, #12]
 800e286:	2b00      	cmp	r3, #0
 800e288:	bfb8      	it	lt
 800e28a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e28e:	3402      	adds	r4, #2
 800e290:	9305      	str	r3, [sp, #20]
 800e292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e378 <_vfiprintf_r+0x25c>
 800e296:	7821      	ldrb	r1, [r4, #0]
 800e298:	2203      	movs	r2, #3
 800e29a:	4650      	mov	r0, sl
 800e29c:	f7fd ffa0 	bl	800c1e0 <memchr>
 800e2a0:	b140      	cbz	r0, 800e2b4 <_vfiprintf_r+0x198>
 800e2a2:	2340      	movs	r3, #64	; 0x40
 800e2a4:	eba0 000a 	sub.w	r0, r0, sl
 800e2a8:	fa03 f000 	lsl.w	r0, r3, r0
 800e2ac:	9b04      	ldr	r3, [sp, #16]
 800e2ae:	4303      	orrs	r3, r0
 800e2b0:	3401      	adds	r4, #1
 800e2b2:	9304      	str	r3, [sp, #16]
 800e2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2b8:	482c      	ldr	r0, [pc, #176]	; (800e36c <_vfiprintf_r+0x250>)
 800e2ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2be:	2206      	movs	r2, #6
 800e2c0:	f7fd ff8e 	bl	800c1e0 <memchr>
 800e2c4:	2800      	cmp	r0, #0
 800e2c6:	d03f      	beq.n	800e348 <_vfiprintf_r+0x22c>
 800e2c8:	4b29      	ldr	r3, [pc, #164]	; (800e370 <_vfiprintf_r+0x254>)
 800e2ca:	bb1b      	cbnz	r3, 800e314 <_vfiprintf_r+0x1f8>
 800e2cc:	9b03      	ldr	r3, [sp, #12]
 800e2ce:	3307      	adds	r3, #7
 800e2d0:	f023 0307 	bic.w	r3, r3, #7
 800e2d4:	3308      	adds	r3, #8
 800e2d6:	9303      	str	r3, [sp, #12]
 800e2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2da:	443b      	add	r3, r7
 800e2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e2de:	e767      	b.n	800e1b0 <_vfiprintf_r+0x94>
 800e2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	2001      	movs	r0, #1
 800e2e8:	e7a5      	b.n	800e236 <_vfiprintf_r+0x11a>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	3401      	adds	r4, #1
 800e2ee:	9305      	str	r3, [sp, #20]
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	f04f 0c0a 	mov.w	ip, #10
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2fc:	3a30      	subs	r2, #48	; 0x30
 800e2fe:	2a09      	cmp	r2, #9
 800e300:	d903      	bls.n	800e30a <_vfiprintf_r+0x1ee>
 800e302:	2b00      	cmp	r3, #0
 800e304:	d0c5      	beq.n	800e292 <_vfiprintf_r+0x176>
 800e306:	9105      	str	r1, [sp, #20]
 800e308:	e7c3      	b.n	800e292 <_vfiprintf_r+0x176>
 800e30a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e30e:	4604      	mov	r4, r0
 800e310:	2301      	movs	r3, #1
 800e312:	e7f0      	b.n	800e2f6 <_vfiprintf_r+0x1da>
 800e314:	ab03      	add	r3, sp, #12
 800e316:	9300      	str	r3, [sp, #0]
 800e318:	462a      	mov	r2, r5
 800e31a:	4b16      	ldr	r3, [pc, #88]	; (800e374 <_vfiprintf_r+0x258>)
 800e31c:	a904      	add	r1, sp, #16
 800e31e:	4630      	mov	r0, r6
 800e320:	f3af 8000 	nop.w
 800e324:	4607      	mov	r7, r0
 800e326:	1c78      	adds	r0, r7, #1
 800e328:	d1d6      	bne.n	800e2d8 <_vfiprintf_r+0x1bc>
 800e32a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e32c:	07d9      	lsls	r1, r3, #31
 800e32e:	d405      	bmi.n	800e33c <_vfiprintf_r+0x220>
 800e330:	89ab      	ldrh	r3, [r5, #12]
 800e332:	059a      	lsls	r2, r3, #22
 800e334:	d402      	bmi.n	800e33c <_vfiprintf_r+0x220>
 800e336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e338:	f7ff fe31 	bl	800df9e <__retarget_lock_release_recursive>
 800e33c:	89ab      	ldrh	r3, [r5, #12]
 800e33e:	065b      	lsls	r3, r3, #25
 800e340:	f53f af12 	bmi.w	800e168 <_vfiprintf_r+0x4c>
 800e344:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e346:	e711      	b.n	800e16c <_vfiprintf_r+0x50>
 800e348:	ab03      	add	r3, sp, #12
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	462a      	mov	r2, r5
 800e34e:	4b09      	ldr	r3, [pc, #36]	; (800e374 <_vfiprintf_r+0x258>)
 800e350:	a904      	add	r1, sp, #16
 800e352:	4630      	mov	r0, r6
 800e354:	f000 f880 	bl	800e458 <_printf_i>
 800e358:	e7e4      	b.n	800e324 <_vfiprintf_r+0x208>
 800e35a:	bf00      	nop
 800e35c:	0800ed08 	.word	0x0800ed08
 800e360:	0800ed28 	.word	0x0800ed28
 800e364:	0800ece8 	.word	0x0800ece8
 800e368:	0800ed48 	.word	0x0800ed48
 800e36c:	0800ed52 	.word	0x0800ed52
 800e370:	00000000 	.word	0x00000000
 800e374:	0800e0f7 	.word	0x0800e0f7
 800e378:	0800ed4e 	.word	0x0800ed4e

0800e37c <_printf_common>:
 800e37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e380:	4616      	mov	r6, r2
 800e382:	4699      	mov	r9, r3
 800e384:	688a      	ldr	r2, [r1, #8]
 800e386:	690b      	ldr	r3, [r1, #16]
 800e388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e38c:	4293      	cmp	r3, r2
 800e38e:	bfb8      	it	lt
 800e390:	4613      	movlt	r3, r2
 800e392:	6033      	str	r3, [r6, #0]
 800e394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e398:	4607      	mov	r7, r0
 800e39a:	460c      	mov	r4, r1
 800e39c:	b10a      	cbz	r2, 800e3a2 <_printf_common+0x26>
 800e39e:	3301      	adds	r3, #1
 800e3a0:	6033      	str	r3, [r6, #0]
 800e3a2:	6823      	ldr	r3, [r4, #0]
 800e3a4:	0699      	lsls	r1, r3, #26
 800e3a6:	bf42      	ittt	mi
 800e3a8:	6833      	ldrmi	r3, [r6, #0]
 800e3aa:	3302      	addmi	r3, #2
 800e3ac:	6033      	strmi	r3, [r6, #0]
 800e3ae:	6825      	ldr	r5, [r4, #0]
 800e3b0:	f015 0506 	ands.w	r5, r5, #6
 800e3b4:	d106      	bne.n	800e3c4 <_printf_common+0x48>
 800e3b6:	f104 0a19 	add.w	sl, r4, #25
 800e3ba:	68e3      	ldr	r3, [r4, #12]
 800e3bc:	6832      	ldr	r2, [r6, #0]
 800e3be:	1a9b      	subs	r3, r3, r2
 800e3c0:	42ab      	cmp	r3, r5
 800e3c2:	dc26      	bgt.n	800e412 <_printf_common+0x96>
 800e3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3c8:	1e13      	subs	r3, r2, #0
 800e3ca:	6822      	ldr	r2, [r4, #0]
 800e3cc:	bf18      	it	ne
 800e3ce:	2301      	movne	r3, #1
 800e3d0:	0692      	lsls	r2, r2, #26
 800e3d2:	d42b      	bmi.n	800e42c <_printf_common+0xb0>
 800e3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3d8:	4649      	mov	r1, r9
 800e3da:	4638      	mov	r0, r7
 800e3dc:	47c0      	blx	r8
 800e3de:	3001      	adds	r0, #1
 800e3e0:	d01e      	beq.n	800e420 <_printf_common+0xa4>
 800e3e2:	6823      	ldr	r3, [r4, #0]
 800e3e4:	68e5      	ldr	r5, [r4, #12]
 800e3e6:	6832      	ldr	r2, [r6, #0]
 800e3e8:	f003 0306 	and.w	r3, r3, #6
 800e3ec:	2b04      	cmp	r3, #4
 800e3ee:	bf08      	it	eq
 800e3f0:	1aad      	subeq	r5, r5, r2
 800e3f2:	68a3      	ldr	r3, [r4, #8]
 800e3f4:	6922      	ldr	r2, [r4, #16]
 800e3f6:	bf0c      	ite	eq
 800e3f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3fc:	2500      	movne	r5, #0
 800e3fe:	4293      	cmp	r3, r2
 800e400:	bfc4      	itt	gt
 800e402:	1a9b      	subgt	r3, r3, r2
 800e404:	18ed      	addgt	r5, r5, r3
 800e406:	2600      	movs	r6, #0
 800e408:	341a      	adds	r4, #26
 800e40a:	42b5      	cmp	r5, r6
 800e40c:	d11a      	bne.n	800e444 <_printf_common+0xc8>
 800e40e:	2000      	movs	r0, #0
 800e410:	e008      	b.n	800e424 <_printf_common+0xa8>
 800e412:	2301      	movs	r3, #1
 800e414:	4652      	mov	r2, sl
 800e416:	4649      	mov	r1, r9
 800e418:	4638      	mov	r0, r7
 800e41a:	47c0      	blx	r8
 800e41c:	3001      	adds	r0, #1
 800e41e:	d103      	bne.n	800e428 <_printf_common+0xac>
 800e420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e428:	3501      	adds	r5, #1
 800e42a:	e7c6      	b.n	800e3ba <_printf_common+0x3e>
 800e42c:	18e1      	adds	r1, r4, r3
 800e42e:	1c5a      	adds	r2, r3, #1
 800e430:	2030      	movs	r0, #48	; 0x30
 800e432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e436:	4422      	add	r2, r4
 800e438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e43c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e440:	3302      	adds	r3, #2
 800e442:	e7c7      	b.n	800e3d4 <_printf_common+0x58>
 800e444:	2301      	movs	r3, #1
 800e446:	4622      	mov	r2, r4
 800e448:	4649      	mov	r1, r9
 800e44a:	4638      	mov	r0, r7
 800e44c:	47c0      	blx	r8
 800e44e:	3001      	adds	r0, #1
 800e450:	d0e6      	beq.n	800e420 <_printf_common+0xa4>
 800e452:	3601      	adds	r6, #1
 800e454:	e7d9      	b.n	800e40a <_printf_common+0x8e>
	...

0800e458 <_printf_i>:
 800e458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e45c:	7e0f      	ldrb	r7, [r1, #24]
 800e45e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e460:	2f78      	cmp	r7, #120	; 0x78
 800e462:	4691      	mov	r9, r2
 800e464:	4680      	mov	r8, r0
 800e466:	460c      	mov	r4, r1
 800e468:	469a      	mov	sl, r3
 800e46a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e46e:	d807      	bhi.n	800e480 <_printf_i+0x28>
 800e470:	2f62      	cmp	r7, #98	; 0x62
 800e472:	d80a      	bhi.n	800e48a <_printf_i+0x32>
 800e474:	2f00      	cmp	r7, #0
 800e476:	f000 80d8 	beq.w	800e62a <_printf_i+0x1d2>
 800e47a:	2f58      	cmp	r7, #88	; 0x58
 800e47c:	f000 80a3 	beq.w	800e5c6 <_printf_i+0x16e>
 800e480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e488:	e03a      	b.n	800e500 <_printf_i+0xa8>
 800e48a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e48e:	2b15      	cmp	r3, #21
 800e490:	d8f6      	bhi.n	800e480 <_printf_i+0x28>
 800e492:	a101      	add	r1, pc, #4	; (adr r1, 800e498 <_printf_i+0x40>)
 800e494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e498:	0800e4f1 	.word	0x0800e4f1
 800e49c:	0800e505 	.word	0x0800e505
 800e4a0:	0800e481 	.word	0x0800e481
 800e4a4:	0800e481 	.word	0x0800e481
 800e4a8:	0800e481 	.word	0x0800e481
 800e4ac:	0800e481 	.word	0x0800e481
 800e4b0:	0800e505 	.word	0x0800e505
 800e4b4:	0800e481 	.word	0x0800e481
 800e4b8:	0800e481 	.word	0x0800e481
 800e4bc:	0800e481 	.word	0x0800e481
 800e4c0:	0800e481 	.word	0x0800e481
 800e4c4:	0800e611 	.word	0x0800e611
 800e4c8:	0800e535 	.word	0x0800e535
 800e4cc:	0800e5f3 	.word	0x0800e5f3
 800e4d0:	0800e481 	.word	0x0800e481
 800e4d4:	0800e481 	.word	0x0800e481
 800e4d8:	0800e633 	.word	0x0800e633
 800e4dc:	0800e481 	.word	0x0800e481
 800e4e0:	0800e535 	.word	0x0800e535
 800e4e4:	0800e481 	.word	0x0800e481
 800e4e8:	0800e481 	.word	0x0800e481
 800e4ec:	0800e5fb 	.word	0x0800e5fb
 800e4f0:	682b      	ldr	r3, [r5, #0]
 800e4f2:	1d1a      	adds	r2, r3, #4
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	602a      	str	r2, [r5, #0]
 800e4f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e500:	2301      	movs	r3, #1
 800e502:	e0a3      	b.n	800e64c <_printf_i+0x1f4>
 800e504:	6820      	ldr	r0, [r4, #0]
 800e506:	6829      	ldr	r1, [r5, #0]
 800e508:	0606      	lsls	r6, r0, #24
 800e50a:	f101 0304 	add.w	r3, r1, #4
 800e50e:	d50a      	bpl.n	800e526 <_printf_i+0xce>
 800e510:	680e      	ldr	r6, [r1, #0]
 800e512:	602b      	str	r3, [r5, #0]
 800e514:	2e00      	cmp	r6, #0
 800e516:	da03      	bge.n	800e520 <_printf_i+0xc8>
 800e518:	232d      	movs	r3, #45	; 0x2d
 800e51a:	4276      	negs	r6, r6
 800e51c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e520:	485e      	ldr	r0, [pc, #376]	; (800e69c <_printf_i+0x244>)
 800e522:	230a      	movs	r3, #10
 800e524:	e019      	b.n	800e55a <_printf_i+0x102>
 800e526:	680e      	ldr	r6, [r1, #0]
 800e528:	602b      	str	r3, [r5, #0]
 800e52a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e52e:	bf18      	it	ne
 800e530:	b236      	sxthne	r6, r6
 800e532:	e7ef      	b.n	800e514 <_printf_i+0xbc>
 800e534:	682b      	ldr	r3, [r5, #0]
 800e536:	6820      	ldr	r0, [r4, #0]
 800e538:	1d19      	adds	r1, r3, #4
 800e53a:	6029      	str	r1, [r5, #0]
 800e53c:	0601      	lsls	r1, r0, #24
 800e53e:	d501      	bpl.n	800e544 <_printf_i+0xec>
 800e540:	681e      	ldr	r6, [r3, #0]
 800e542:	e002      	b.n	800e54a <_printf_i+0xf2>
 800e544:	0646      	lsls	r6, r0, #25
 800e546:	d5fb      	bpl.n	800e540 <_printf_i+0xe8>
 800e548:	881e      	ldrh	r6, [r3, #0]
 800e54a:	4854      	ldr	r0, [pc, #336]	; (800e69c <_printf_i+0x244>)
 800e54c:	2f6f      	cmp	r7, #111	; 0x6f
 800e54e:	bf0c      	ite	eq
 800e550:	2308      	moveq	r3, #8
 800e552:	230a      	movne	r3, #10
 800e554:	2100      	movs	r1, #0
 800e556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e55a:	6865      	ldr	r5, [r4, #4]
 800e55c:	60a5      	str	r5, [r4, #8]
 800e55e:	2d00      	cmp	r5, #0
 800e560:	bfa2      	ittt	ge
 800e562:	6821      	ldrge	r1, [r4, #0]
 800e564:	f021 0104 	bicge.w	r1, r1, #4
 800e568:	6021      	strge	r1, [r4, #0]
 800e56a:	b90e      	cbnz	r6, 800e570 <_printf_i+0x118>
 800e56c:	2d00      	cmp	r5, #0
 800e56e:	d04d      	beq.n	800e60c <_printf_i+0x1b4>
 800e570:	4615      	mov	r5, r2
 800e572:	fbb6 f1f3 	udiv	r1, r6, r3
 800e576:	fb03 6711 	mls	r7, r3, r1, r6
 800e57a:	5dc7      	ldrb	r7, [r0, r7]
 800e57c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e580:	4637      	mov	r7, r6
 800e582:	42bb      	cmp	r3, r7
 800e584:	460e      	mov	r6, r1
 800e586:	d9f4      	bls.n	800e572 <_printf_i+0x11a>
 800e588:	2b08      	cmp	r3, #8
 800e58a:	d10b      	bne.n	800e5a4 <_printf_i+0x14c>
 800e58c:	6823      	ldr	r3, [r4, #0]
 800e58e:	07de      	lsls	r6, r3, #31
 800e590:	d508      	bpl.n	800e5a4 <_printf_i+0x14c>
 800e592:	6923      	ldr	r3, [r4, #16]
 800e594:	6861      	ldr	r1, [r4, #4]
 800e596:	4299      	cmp	r1, r3
 800e598:	bfde      	ittt	le
 800e59a:	2330      	movle	r3, #48	; 0x30
 800e59c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e5a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e5a4:	1b52      	subs	r2, r2, r5
 800e5a6:	6122      	str	r2, [r4, #16]
 800e5a8:	f8cd a000 	str.w	sl, [sp]
 800e5ac:	464b      	mov	r3, r9
 800e5ae:	aa03      	add	r2, sp, #12
 800e5b0:	4621      	mov	r1, r4
 800e5b2:	4640      	mov	r0, r8
 800e5b4:	f7ff fee2 	bl	800e37c <_printf_common>
 800e5b8:	3001      	adds	r0, #1
 800e5ba:	d14c      	bne.n	800e656 <_printf_i+0x1fe>
 800e5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5c0:	b004      	add	sp, #16
 800e5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5c6:	4835      	ldr	r0, [pc, #212]	; (800e69c <_printf_i+0x244>)
 800e5c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e5cc:	6829      	ldr	r1, [r5, #0]
 800e5ce:	6823      	ldr	r3, [r4, #0]
 800e5d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e5d4:	6029      	str	r1, [r5, #0]
 800e5d6:	061d      	lsls	r5, r3, #24
 800e5d8:	d514      	bpl.n	800e604 <_printf_i+0x1ac>
 800e5da:	07df      	lsls	r7, r3, #31
 800e5dc:	bf44      	itt	mi
 800e5de:	f043 0320 	orrmi.w	r3, r3, #32
 800e5e2:	6023      	strmi	r3, [r4, #0]
 800e5e4:	b91e      	cbnz	r6, 800e5ee <_printf_i+0x196>
 800e5e6:	6823      	ldr	r3, [r4, #0]
 800e5e8:	f023 0320 	bic.w	r3, r3, #32
 800e5ec:	6023      	str	r3, [r4, #0]
 800e5ee:	2310      	movs	r3, #16
 800e5f0:	e7b0      	b.n	800e554 <_printf_i+0xfc>
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	f043 0320 	orr.w	r3, r3, #32
 800e5f8:	6023      	str	r3, [r4, #0]
 800e5fa:	2378      	movs	r3, #120	; 0x78
 800e5fc:	4828      	ldr	r0, [pc, #160]	; (800e6a0 <_printf_i+0x248>)
 800e5fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e602:	e7e3      	b.n	800e5cc <_printf_i+0x174>
 800e604:	0659      	lsls	r1, r3, #25
 800e606:	bf48      	it	mi
 800e608:	b2b6      	uxthmi	r6, r6
 800e60a:	e7e6      	b.n	800e5da <_printf_i+0x182>
 800e60c:	4615      	mov	r5, r2
 800e60e:	e7bb      	b.n	800e588 <_printf_i+0x130>
 800e610:	682b      	ldr	r3, [r5, #0]
 800e612:	6826      	ldr	r6, [r4, #0]
 800e614:	6961      	ldr	r1, [r4, #20]
 800e616:	1d18      	adds	r0, r3, #4
 800e618:	6028      	str	r0, [r5, #0]
 800e61a:	0635      	lsls	r5, r6, #24
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	d501      	bpl.n	800e624 <_printf_i+0x1cc>
 800e620:	6019      	str	r1, [r3, #0]
 800e622:	e002      	b.n	800e62a <_printf_i+0x1d2>
 800e624:	0670      	lsls	r0, r6, #25
 800e626:	d5fb      	bpl.n	800e620 <_printf_i+0x1c8>
 800e628:	8019      	strh	r1, [r3, #0]
 800e62a:	2300      	movs	r3, #0
 800e62c:	6123      	str	r3, [r4, #16]
 800e62e:	4615      	mov	r5, r2
 800e630:	e7ba      	b.n	800e5a8 <_printf_i+0x150>
 800e632:	682b      	ldr	r3, [r5, #0]
 800e634:	1d1a      	adds	r2, r3, #4
 800e636:	602a      	str	r2, [r5, #0]
 800e638:	681d      	ldr	r5, [r3, #0]
 800e63a:	6862      	ldr	r2, [r4, #4]
 800e63c:	2100      	movs	r1, #0
 800e63e:	4628      	mov	r0, r5
 800e640:	f7fd fdce 	bl	800c1e0 <memchr>
 800e644:	b108      	cbz	r0, 800e64a <_printf_i+0x1f2>
 800e646:	1b40      	subs	r0, r0, r5
 800e648:	6060      	str	r0, [r4, #4]
 800e64a:	6863      	ldr	r3, [r4, #4]
 800e64c:	6123      	str	r3, [r4, #16]
 800e64e:	2300      	movs	r3, #0
 800e650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e654:	e7a8      	b.n	800e5a8 <_printf_i+0x150>
 800e656:	6923      	ldr	r3, [r4, #16]
 800e658:	462a      	mov	r2, r5
 800e65a:	4649      	mov	r1, r9
 800e65c:	4640      	mov	r0, r8
 800e65e:	47d0      	blx	sl
 800e660:	3001      	adds	r0, #1
 800e662:	d0ab      	beq.n	800e5bc <_printf_i+0x164>
 800e664:	6823      	ldr	r3, [r4, #0]
 800e666:	079b      	lsls	r3, r3, #30
 800e668:	d413      	bmi.n	800e692 <_printf_i+0x23a>
 800e66a:	68e0      	ldr	r0, [r4, #12]
 800e66c:	9b03      	ldr	r3, [sp, #12]
 800e66e:	4298      	cmp	r0, r3
 800e670:	bfb8      	it	lt
 800e672:	4618      	movlt	r0, r3
 800e674:	e7a4      	b.n	800e5c0 <_printf_i+0x168>
 800e676:	2301      	movs	r3, #1
 800e678:	4632      	mov	r2, r6
 800e67a:	4649      	mov	r1, r9
 800e67c:	4640      	mov	r0, r8
 800e67e:	47d0      	blx	sl
 800e680:	3001      	adds	r0, #1
 800e682:	d09b      	beq.n	800e5bc <_printf_i+0x164>
 800e684:	3501      	adds	r5, #1
 800e686:	68e3      	ldr	r3, [r4, #12]
 800e688:	9903      	ldr	r1, [sp, #12]
 800e68a:	1a5b      	subs	r3, r3, r1
 800e68c:	42ab      	cmp	r3, r5
 800e68e:	dcf2      	bgt.n	800e676 <_printf_i+0x21e>
 800e690:	e7eb      	b.n	800e66a <_printf_i+0x212>
 800e692:	2500      	movs	r5, #0
 800e694:	f104 0619 	add.w	r6, r4, #25
 800e698:	e7f5      	b.n	800e686 <_printf_i+0x22e>
 800e69a:	bf00      	nop
 800e69c:	0800ed59 	.word	0x0800ed59
 800e6a0:	0800ed6a 	.word	0x0800ed6a

0800e6a4 <_sbrk_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	4d06      	ldr	r5, [pc, #24]	; (800e6c0 <_sbrk_r+0x1c>)
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	602b      	str	r3, [r5, #0]
 800e6b0:	f7fe fbf0 	bl	800ce94 <_sbrk>
 800e6b4:	1c43      	adds	r3, r0, #1
 800e6b6:	d102      	bne.n	800e6be <_sbrk_r+0x1a>
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	b103      	cbz	r3, 800e6be <_sbrk_r+0x1a>
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	bd38      	pop	{r3, r4, r5, pc}
 800e6c0:	20000098 	.word	0x20000098

0800e6c4 <__sread>:
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	460c      	mov	r4, r1
 800e6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6cc:	f000 fab2 	bl	800ec34 <_read_r>
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	bfab      	itete	ge
 800e6d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6d6:	89a3      	ldrhlt	r3, [r4, #12]
 800e6d8:	181b      	addge	r3, r3, r0
 800e6da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6de:	bfac      	ite	ge
 800e6e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6e2:	81a3      	strhlt	r3, [r4, #12]
 800e6e4:	bd10      	pop	{r4, pc}

0800e6e6 <__swrite>:
 800e6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ea:	461f      	mov	r7, r3
 800e6ec:	898b      	ldrh	r3, [r1, #12]
 800e6ee:	05db      	lsls	r3, r3, #23
 800e6f0:	4605      	mov	r5, r0
 800e6f2:	460c      	mov	r4, r1
 800e6f4:	4616      	mov	r6, r2
 800e6f6:	d505      	bpl.n	800e704 <__swrite+0x1e>
 800e6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	2200      	movs	r2, #0
 800e700:	f000 f9c8 	bl	800ea94 <_lseek_r>
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e70a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e70e:	81a3      	strh	r3, [r4, #12]
 800e710:	4632      	mov	r2, r6
 800e712:	463b      	mov	r3, r7
 800e714:	4628      	mov	r0, r5
 800e716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e71a:	f000 b869 	b.w	800e7f0 <_write_r>

0800e71e <__sseek>:
 800e71e:	b510      	push	{r4, lr}
 800e720:	460c      	mov	r4, r1
 800e722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e726:	f000 f9b5 	bl	800ea94 <_lseek_r>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	89a3      	ldrh	r3, [r4, #12]
 800e72e:	bf15      	itete	ne
 800e730:	6560      	strne	r0, [r4, #84]	; 0x54
 800e732:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e736:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e73a:	81a3      	strheq	r3, [r4, #12]
 800e73c:	bf18      	it	ne
 800e73e:	81a3      	strhne	r3, [r4, #12]
 800e740:	bd10      	pop	{r4, pc}

0800e742 <__sclose>:
 800e742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e746:	f000 b8d3 	b.w	800e8f0 <_close_r>
	...

0800e74c <__swbuf_r>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	460e      	mov	r6, r1
 800e750:	4614      	mov	r4, r2
 800e752:	4605      	mov	r5, r0
 800e754:	b118      	cbz	r0, 800e75e <__swbuf_r+0x12>
 800e756:	6983      	ldr	r3, [r0, #24]
 800e758:	b90b      	cbnz	r3, 800e75e <__swbuf_r+0x12>
 800e75a:	f7ff fb81 	bl	800de60 <__sinit>
 800e75e:	4b21      	ldr	r3, [pc, #132]	; (800e7e4 <__swbuf_r+0x98>)
 800e760:	429c      	cmp	r4, r3
 800e762:	d12b      	bne.n	800e7bc <__swbuf_r+0x70>
 800e764:	686c      	ldr	r4, [r5, #4]
 800e766:	69a3      	ldr	r3, [r4, #24]
 800e768:	60a3      	str	r3, [r4, #8]
 800e76a:	89a3      	ldrh	r3, [r4, #12]
 800e76c:	071a      	lsls	r2, r3, #28
 800e76e:	d52f      	bpl.n	800e7d0 <__swbuf_r+0x84>
 800e770:	6923      	ldr	r3, [r4, #16]
 800e772:	b36b      	cbz	r3, 800e7d0 <__swbuf_r+0x84>
 800e774:	6923      	ldr	r3, [r4, #16]
 800e776:	6820      	ldr	r0, [r4, #0]
 800e778:	1ac0      	subs	r0, r0, r3
 800e77a:	6963      	ldr	r3, [r4, #20]
 800e77c:	b2f6      	uxtb	r6, r6
 800e77e:	4283      	cmp	r3, r0
 800e780:	4637      	mov	r7, r6
 800e782:	dc04      	bgt.n	800e78e <__swbuf_r+0x42>
 800e784:	4621      	mov	r1, r4
 800e786:	4628      	mov	r0, r5
 800e788:	f000 f948 	bl	800ea1c <_fflush_r>
 800e78c:	bb30      	cbnz	r0, 800e7dc <__swbuf_r+0x90>
 800e78e:	68a3      	ldr	r3, [r4, #8]
 800e790:	3b01      	subs	r3, #1
 800e792:	60a3      	str	r3, [r4, #8]
 800e794:	6823      	ldr	r3, [r4, #0]
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	6022      	str	r2, [r4, #0]
 800e79a:	701e      	strb	r6, [r3, #0]
 800e79c:	6963      	ldr	r3, [r4, #20]
 800e79e:	3001      	adds	r0, #1
 800e7a0:	4283      	cmp	r3, r0
 800e7a2:	d004      	beq.n	800e7ae <__swbuf_r+0x62>
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	07db      	lsls	r3, r3, #31
 800e7a8:	d506      	bpl.n	800e7b8 <__swbuf_r+0x6c>
 800e7aa:	2e0a      	cmp	r6, #10
 800e7ac:	d104      	bne.n	800e7b8 <__swbuf_r+0x6c>
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	f000 f933 	bl	800ea1c <_fflush_r>
 800e7b6:	b988      	cbnz	r0, 800e7dc <__swbuf_r+0x90>
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7bc:	4b0a      	ldr	r3, [pc, #40]	; (800e7e8 <__swbuf_r+0x9c>)
 800e7be:	429c      	cmp	r4, r3
 800e7c0:	d101      	bne.n	800e7c6 <__swbuf_r+0x7a>
 800e7c2:	68ac      	ldr	r4, [r5, #8]
 800e7c4:	e7cf      	b.n	800e766 <__swbuf_r+0x1a>
 800e7c6:	4b09      	ldr	r3, [pc, #36]	; (800e7ec <__swbuf_r+0xa0>)
 800e7c8:	429c      	cmp	r4, r3
 800e7ca:	bf08      	it	eq
 800e7cc:	68ec      	ldreq	r4, [r5, #12]
 800e7ce:	e7ca      	b.n	800e766 <__swbuf_r+0x1a>
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4628      	mov	r0, r5
 800e7d4:	f000 f81e 	bl	800e814 <__swsetup_r>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d0cb      	beq.n	800e774 <__swbuf_r+0x28>
 800e7dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e7e0:	e7ea      	b.n	800e7b8 <__swbuf_r+0x6c>
 800e7e2:	bf00      	nop
 800e7e4:	0800ed08 	.word	0x0800ed08
 800e7e8:	0800ed28 	.word	0x0800ed28
 800e7ec:	0800ece8 	.word	0x0800ece8

0800e7f0 <_write_r>:
 800e7f0:	b538      	push	{r3, r4, r5, lr}
 800e7f2:	4d07      	ldr	r5, [pc, #28]	; (800e810 <_write_r+0x20>)
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	4608      	mov	r0, r1
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	602a      	str	r2, [r5, #0]
 800e7fe:	461a      	mov	r2, r3
 800e800:	f7fe faf7 	bl	800cdf2 <_write>
 800e804:	1c43      	adds	r3, r0, #1
 800e806:	d102      	bne.n	800e80e <_write_r+0x1e>
 800e808:	682b      	ldr	r3, [r5, #0]
 800e80a:	b103      	cbz	r3, 800e80e <_write_r+0x1e>
 800e80c:	6023      	str	r3, [r4, #0]
 800e80e:	bd38      	pop	{r3, r4, r5, pc}
 800e810:	20000098 	.word	0x20000098

0800e814 <__swsetup_r>:
 800e814:	4b32      	ldr	r3, [pc, #200]	; (800e8e0 <__swsetup_r+0xcc>)
 800e816:	b570      	push	{r4, r5, r6, lr}
 800e818:	681d      	ldr	r5, [r3, #0]
 800e81a:	4606      	mov	r6, r0
 800e81c:	460c      	mov	r4, r1
 800e81e:	b125      	cbz	r5, 800e82a <__swsetup_r+0x16>
 800e820:	69ab      	ldr	r3, [r5, #24]
 800e822:	b913      	cbnz	r3, 800e82a <__swsetup_r+0x16>
 800e824:	4628      	mov	r0, r5
 800e826:	f7ff fb1b 	bl	800de60 <__sinit>
 800e82a:	4b2e      	ldr	r3, [pc, #184]	; (800e8e4 <__swsetup_r+0xd0>)
 800e82c:	429c      	cmp	r4, r3
 800e82e:	d10f      	bne.n	800e850 <__swsetup_r+0x3c>
 800e830:	686c      	ldr	r4, [r5, #4]
 800e832:	89a3      	ldrh	r3, [r4, #12]
 800e834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e838:	0719      	lsls	r1, r3, #28
 800e83a:	d42c      	bmi.n	800e896 <__swsetup_r+0x82>
 800e83c:	06dd      	lsls	r5, r3, #27
 800e83e:	d411      	bmi.n	800e864 <__swsetup_r+0x50>
 800e840:	2309      	movs	r3, #9
 800e842:	6033      	str	r3, [r6, #0]
 800e844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e848:	81a3      	strh	r3, [r4, #12]
 800e84a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e84e:	e03e      	b.n	800e8ce <__swsetup_r+0xba>
 800e850:	4b25      	ldr	r3, [pc, #148]	; (800e8e8 <__swsetup_r+0xd4>)
 800e852:	429c      	cmp	r4, r3
 800e854:	d101      	bne.n	800e85a <__swsetup_r+0x46>
 800e856:	68ac      	ldr	r4, [r5, #8]
 800e858:	e7eb      	b.n	800e832 <__swsetup_r+0x1e>
 800e85a:	4b24      	ldr	r3, [pc, #144]	; (800e8ec <__swsetup_r+0xd8>)
 800e85c:	429c      	cmp	r4, r3
 800e85e:	bf08      	it	eq
 800e860:	68ec      	ldreq	r4, [r5, #12]
 800e862:	e7e6      	b.n	800e832 <__swsetup_r+0x1e>
 800e864:	0758      	lsls	r0, r3, #29
 800e866:	d512      	bpl.n	800e88e <__swsetup_r+0x7a>
 800e868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e86a:	b141      	cbz	r1, 800e87e <__swsetup_r+0x6a>
 800e86c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e870:	4299      	cmp	r1, r3
 800e872:	d002      	beq.n	800e87a <__swsetup_r+0x66>
 800e874:	4630      	mov	r0, r6
 800e876:	f000 f991 	bl	800eb9c <_free_r>
 800e87a:	2300      	movs	r3, #0
 800e87c:	6363      	str	r3, [r4, #52]	; 0x34
 800e87e:	89a3      	ldrh	r3, [r4, #12]
 800e880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e884:	81a3      	strh	r3, [r4, #12]
 800e886:	2300      	movs	r3, #0
 800e888:	6063      	str	r3, [r4, #4]
 800e88a:	6923      	ldr	r3, [r4, #16]
 800e88c:	6023      	str	r3, [r4, #0]
 800e88e:	89a3      	ldrh	r3, [r4, #12]
 800e890:	f043 0308 	orr.w	r3, r3, #8
 800e894:	81a3      	strh	r3, [r4, #12]
 800e896:	6923      	ldr	r3, [r4, #16]
 800e898:	b94b      	cbnz	r3, 800e8ae <__swsetup_r+0x9a>
 800e89a:	89a3      	ldrh	r3, [r4, #12]
 800e89c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8a4:	d003      	beq.n	800e8ae <__swsetup_r+0x9a>
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f000 f92b 	bl	800eb04 <__smakebuf_r>
 800e8ae:	89a0      	ldrh	r0, [r4, #12]
 800e8b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8b4:	f010 0301 	ands.w	r3, r0, #1
 800e8b8:	d00a      	beq.n	800e8d0 <__swsetup_r+0xbc>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	60a3      	str	r3, [r4, #8]
 800e8be:	6963      	ldr	r3, [r4, #20]
 800e8c0:	425b      	negs	r3, r3
 800e8c2:	61a3      	str	r3, [r4, #24]
 800e8c4:	6923      	ldr	r3, [r4, #16]
 800e8c6:	b943      	cbnz	r3, 800e8da <__swsetup_r+0xc6>
 800e8c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8cc:	d1ba      	bne.n	800e844 <__swsetup_r+0x30>
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}
 800e8d0:	0781      	lsls	r1, r0, #30
 800e8d2:	bf58      	it	pl
 800e8d4:	6963      	ldrpl	r3, [r4, #20]
 800e8d6:	60a3      	str	r3, [r4, #8]
 800e8d8:	e7f4      	b.n	800e8c4 <__swsetup_r+0xb0>
 800e8da:	2000      	movs	r0, #0
 800e8dc:	e7f7      	b.n	800e8ce <__swsetup_r+0xba>
 800e8de:	bf00      	nop
 800e8e0:	20000004 	.word	0x20000004
 800e8e4:	0800ed08 	.word	0x0800ed08
 800e8e8:	0800ed28 	.word	0x0800ed28
 800e8ec:	0800ece8 	.word	0x0800ece8

0800e8f0 <_close_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4d06      	ldr	r5, [pc, #24]	; (800e90c <_close_r+0x1c>)
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	4608      	mov	r0, r1
 800e8fa:	602b      	str	r3, [r5, #0]
 800e8fc:	f7fe fa95 	bl	800ce2a <_close>
 800e900:	1c43      	adds	r3, r0, #1
 800e902:	d102      	bne.n	800e90a <_close_r+0x1a>
 800e904:	682b      	ldr	r3, [r5, #0]
 800e906:	b103      	cbz	r3, 800e90a <_close_r+0x1a>
 800e908:	6023      	str	r3, [r4, #0]
 800e90a:	bd38      	pop	{r3, r4, r5, pc}
 800e90c:	20000098 	.word	0x20000098

0800e910 <__sflush_r>:
 800e910:	898a      	ldrh	r2, [r1, #12]
 800e912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e916:	4605      	mov	r5, r0
 800e918:	0710      	lsls	r0, r2, #28
 800e91a:	460c      	mov	r4, r1
 800e91c:	d458      	bmi.n	800e9d0 <__sflush_r+0xc0>
 800e91e:	684b      	ldr	r3, [r1, #4]
 800e920:	2b00      	cmp	r3, #0
 800e922:	dc05      	bgt.n	800e930 <__sflush_r+0x20>
 800e924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e926:	2b00      	cmp	r3, #0
 800e928:	dc02      	bgt.n	800e930 <__sflush_r+0x20>
 800e92a:	2000      	movs	r0, #0
 800e92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e932:	2e00      	cmp	r6, #0
 800e934:	d0f9      	beq.n	800e92a <__sflush_r+0x1a>
 800e936:	2300      	movs	r3, #0
 800e938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e93c:	682f      	ldr	r7, [r5, #0]
 800e93e:	602b      	str	r3, [r5, #0]
 800e940:	d032      	beq.n	800e9a8 <__sflush_r+0x98>
 800e942:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e944:	89a3      	ldrh	r3, [r4, #12]
 800e946:	075a      	lsls	r2, r3, #29
 800e948:	d505      	bpl.n	800e956 <__sflush_r+0x46>
 800e94a:	6863      	ldr	r3, [r4, #4]
 800e94c:	1ac0      	subs	r0, r0, r3
 800e94e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e950:	b10b      	cbz	r3, 800e956 <__sflush_r+0x46>
 800e952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e954:	1ac0      	subs	r0, r0, r3
 800e956:	2300      	movs	r3, #0
 800e958:	4602      	mov	r2, r0
 800e95a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e95c:	6a21      	ldr	r1, [r4, #32]
 800e95e:	4628      	mov	r0, r5
 800e960:	47b0      	blx	r6
 800e962:	1c43      	adds	r3, r0, #1
 800e964:	89a3      	ldrh	r3, [r4, #12]
 800e966:	d106      	bne.n	800e976 <__sflush_r+0x66>
 800e968:	6829      	ldr	r1, [r5, #0]
 800e96a:	291d      	cmp	r1, #29
 800e96c:	d82c      	bhi.n	800e9c8 <__sflush_r+0xb8>
 800e96e:	4a2a      	ldr	r2, [pc, #168]	; (800ea18 <__sflush_r+0x108>)
 800e970:	40ca      	lsrs	r2, r1
 800e972:	07d6      	lsls	r6, r2, #31
 800e974:	d528      	bpl.n	800e9c8 <__sflush_r+0xb8>
 800e976:	2200      	movs	r2, #0
 800e978:	6062      	str	r2, [r4, #4]
 800e97a:	04d9      	lsls	r1, r3, #19
 800e97c:	6922      	ldr	r2, [r4, #16]
 800e97e:	6022      	str	r2, [r4, #0]
 800e980:	d504      	bpl.n	800e98c <__sflush_r+0x7c>
 800e982:	1c42      	adds	r2, r0, #1
 800e984:	d101      	bne.n	800e98a <__sflush_r+0x7a>
 800e986:	682b      	ldr	r3, [r5, #0]
 800e988:	b903      	cbnz	r3, 800e98c <__sflush_r+0x7c>
 800e98a:	6560      	str	r0, [r4, #84]	; 0x54
 800e98c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e98e:	602f      	str	r7, [r5, #0]
 800e990:	2900      	cmp	r1, #0
 800e992:	d0ca      	beq.n	800e92a <__sflush_r+0x1a>
 800e994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e998:	4299      	cmp	r1, r3
 800e99a:	d002      	beq.n	800e9a2 <__sflush_r+0x92>
 800e99c:	4628      	mov	r0, r5
 800e99e:	f000 f8fd 	bl	800eb9c <_free_r>
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	6360      	str	r0, [r4, #52]	; 0x34
 800e9a6:	e7c1      	b.n	800e92c <__sflush_r+0x1c>
 800e9a8:	6a21      	ldr	r1, [r4, #32]
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	4628      	mov	r0, r5
 800e9ae:	47b0      	blx	r6
 800e9b0:	1c41      	adds	r1, r0, #1
 800e9b2:	d1c7      	bne.n	800e944 <__sflush_r+0x34>
 800e9b4:	682b      	ldr	r3, [r5, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0c4      	beq.n	800e944 <__sflush_r+0x34>
 800e9ba:	2b1d      	cmp	r3, #29
 800e9bc:	d001      	beq.n	800e9c2 <__sflush_r+0xb2>
 800e9be:	2b16      	cmp	r3, #22
 800e9c0:	d101      	bne.n	800e9c6 <__sflush_r+0xb6>
 800e9c2:	602f      	str	r7, [r5, #0]
 800e9c4:	e7b1      	b.n	800e92a <__sflush_r+0x1a>
 800e9c6:	89a3      	ldrh	r3, [r4, #12]
 800e9c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9cc:	81a3      	strh	r3, [r4, #12]
 800e9ce:	e7ad      	b.n	800e92c <__sflush_r+0x1c>
 800e9d0:	690f      	ldr	r7, [r1, #16]
 800e9d2:	2f00      	cmp	r7, #0
 800e9d4:	d0a9      	beq.n	800e92a <__sflush_r+0x1a>
 800e9d6:	0793      	lsls	r3, r2, #30
 800e9d8:	680e      	ldr	r6, [r1, #0]
 800e9da:	bf08      	it	eq
 800e9dc:	694b      	ldreq	r3, [r1, #20]
 800e9de:	600f      	str	r7, [r1, #0]
 800e9e0:	bf18      	it	ne
 800e9e2:	2300      	movne	r3, #0
 800e9e4:	eba6 0807 	sub.w	r8, r6, r7
 800e9e8:	608b      	str	r3, [r1, #8]
 800e9ea:	f1b8 0f00 	cmp.w	r8, #0
 800e9ee:	dd9c      	ble.n	800e92a <__sflush_r+0x1a>
 800e9f0:	6a21      	ldr	r1, [r4, #32]
 800e9f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e9f4:	4643      	mov	r3, r8
 800e9f6:	463a      	mov	r2, r7
 800e9f8:	4628      	mov	r0, r5
 800e9fa:	47b0      	blx	r6
 800e9fc:	2800      	cmp	r0, #0
 800e9fe:	dc06      	bgt.n	800ea0e <__sflush_r+0xfe>
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea06:	81a3      	strh	r3, [r4, #12]
 800ea08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea0c:	e78e      	b.n	800e92c <__sflush_r+0x1c>
 800ea0e:	4407      	add	r7, r0
 800ea10:	eba8 0800 	sub.w	r8, r8, r0
 800ea14:	e7e9      	b.n	800e9ea <__sflush_r+0xda>
 800ea16:	bf00      	nop
 800ea18:	20400001 	.word	0x20400001

0800ea1c <_fflush_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	690b      	ldr	r3, [r1, #16]
 800ea20:	4605      	mov	r5, r0
 800ea22:	460c      	mov	r4, r1
 800ea24:	b913      	cbnz	r3, 800ea2c <_fflush_r+0x10>
 800ea26:	2500      	movs	r5, #0
 800ea28:	4628      	mov	r0, r5
 800ea2a:	bd38      	pop	{r3, r4, r5, pc}
 800ea2c:	b118      	cbz	r0, 800ea36 <_fflush_r+0x1a>
 800ea2e:	6983      	ldr	r3, [r0, #24]
 800ea30:	b90b      	cbnz	r3, 800ea36 <_fflush_r+0x1a>
 800ea32:	f7ff fa15 	bl	800de60 <__sinit>
 800ea36:	4b14      	ldr	r3, [pc, #80]	; (800ea88 <_fflush_r+0x6c>)
 800ea38:	429c      	cmp	r4, r3
 800ea3a:	d11b      	bne.n	800ea74 <_fflush_r+0x58>
 800ea3c:	686c      	ldr	r4, [r5, #4]
 800ea3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d0ef      	beq.n	800ea26 <_fflush_r+0xa>
 800ea46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea48:	07d0      	lsls	r0, r2, #31
 800ea4a:	d404      	bmi.n	800ea56 <_fflush_r+0x3a>
 800ea4c:	0599      	lsls	r1, r3, #22
 800ea4e:	d402      	bmi.n	800ea56 <_fflush_r+0x3a>
 800ea50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea52:	f7ff faa3 	bl	800df9c <__retarget_lock_acquire_recursive>
 800ea56:	4628      	mov	r0, r5
 800ea58:	4621      	mov	r1, r4
 800ea5a:	f7ff ff59 	bl	800e910 <__sflush_r>
 800ea5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea60:	07da      	lsls	r2, r3, #31
 800ea62:	4605      	mov	r5, r0
 800ea64:	d4e0      	bmi.n	800ea28 <_fflush_r+0xc>
 800ea66:	89a3      	ldrh	r3, [r4, #12]
 800ea68:	059b      	lsls	r3, r3, #22
 800ea6a:	d4dd      	bmi.n	800ea28 <_fflush_r+0xc>
 800ea6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea6e:	f7ff fa96 	bl	800df9e <__retarget_lock_release_recursive>
 800ea72:	e7d9      	b.n	800ea28 <_fflush_r+0xc>
 800ea74:	4b05      	ldr	r3, [pc, #20]	; (800ea8c <_fflush_r+0x70>)
 800ea76:	429c      	cmp	r4, r3
 800ea78:	d101      	bne.n	800ea7e <_fflush_r+0x62>
 800ea7a:	68ac      	ldr	r4, [r5, #8]
 800ea7c:	e7df      	b.n	800ea3e <_fflush_r+0x22>
 800ea7e:	4b04      	ldr	r3, [pc, #16]	; (800ea90 <_fflush_r+0x74>)
 800ea80:	429c      	cmp	r4, r3
 800ea82:	bf08      	it	eq
 800ea84:	68ec      	ldreq	r4, [r5, #12]
 800ea86:	e7da      	b.n	800ea3e <_fflush_r+0x22>
 800ea88:	0800ed08 	.word	0x0800ed08
 800ea8c:	0800ed28 	.word	0x0800ed28
 800ea90:	0800ece8 	.word	0x0800ece8

0800ea94 <_lseek_r>:
 800ea94:	b538      	push	{r3, r4, r5, lr}
 800ea96:	4d07      	ldr	r5, [pc, #28]	; (800eab4 <_lseek_r+0x20>)
 800ea98:	4604      	mov	r4, r0
 800ea9a:	4608      	mov	r0, r1
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	602a      	str	r2, [r5, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	f7fe f9e8 	bl	800ce78 <_lseek>
 800eaa8:	1c43      	adds	r3, r0, #1
 800eaaa:	d102      	bne.n	800eab2 <_lseek_r+0x1e>
 800eaac:	682b      	ldr	r3, [r5, #0]
 800eaae:	b103      	cbz	r3, 800eab2 <_lseek_r+0x1e>
 800eab0:	6023      	str	r3, [r4, #0]
 800eab2:	bd38      	pop	{r3, r4, r5, pc}
 800eab4:	20000098 	.word	0x20000098

0800eab8 <__swhatbuf_r>:
 800eab8:	b570      	push	{r4, r5, r6, lr}
 800eaba:	460e      	mov	r6, r1
 800eabc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eac0:	2900      	cmp	r1, #0
 800eac2:	b096      	sub	sp, #88	; 0x58
 800eac4:	4614      	mov	r4, r2
 800eac6:	461d      	mov	r5, r3
 800eac8:	da08      	bge.n	800eadc <__swhatbuf_r+0x24>
 800eaca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eace:	2200      	movs	r2, #0
 800ead0:	602a      	str	r2, [r5, #0]
 800ead2:	061a      	lsls	r2, r3, #24
 800ead4:	d410      	bmi.n	800eaf8 <__swhatbuf_r+0x40>
 800ead6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eada:	e00e      	b.n	800eafa <__swhatbuf_r+0x42>
 800eadc:	466a      	mov	r2, sp
 800eade:	f000 f8bb 	bl	800ec58 <_fstat_r>
 800eae2:	2800      	cmp	r0, #0
 800eae4:	dbf1      	blt.n	800eaca <__swhatbuf_r+0x12>
 800eae6:	9a01      	ldr	r2, [sp, #4]
 800eae8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eaec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800eaf0:	425a      	negs	r2, r3
 800eaf2:	415a      	adcs	r2, r3
 800eaf4:	602a      	str	r2, [r5, #0]
 800eaf6:	e7ee      	b.n	800ead6 <__swhatbuf_r+0x1e>
 800eaf8:	2340      	movs	r3, #64	; 0x40
 800eafa:	2000      	movs	r0, #0
 800eafc:	6023      	str	r3, [r4, #0]
 800eafe:	b016      	add	sp, #88	; 0x58
 800eb00:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eb04 <__smakebuf_r>:
 800eb04:	898b      	ldrh	r3, [r1, #12]
 800eb06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eb08:	079d      	lsls	r5, r3, #30
 800eb0a:	4606      	mov	r6, r0
 800eb0c:	460c      	mov	r4, r1
 800eb0e:	d507      	bpl.n	800eb20 <__smakebuf_r+0x1c>
 800eb10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eb14:	6023      	str	r3, [r4, #0]
 800eb16:	6123      	str	r3, [r4, #16]
 800eb18:	2301      	movs	r3, #1
 800eb1a:	6163      	str	r3, [r4, #20]
 800eb1c:	b002      	add	sp, #8
 800eb1e:	bd70      	pop	{r4, r5, r6, pc}
 800eb20:	ab01      	add	r3, sp, #4
 800eb22:	466a      	mov	r2, sp
 800eb24:	f7ff ffc8 	bl	800eab8 <__swhatbuf_r>
 800eb28:	9900      	ldr	r1, [sp, #0]
 800eb2a:	4605      	mov	r5, r0
 800eb2c:	4630      	mov	r0, r6
 800eb2e:	f7ff fa57 	bl	800dfe0 <_malloc_r>
 800eb32:	b948      	cbnz	r0, 800eb48 <__smakebuf_r+0x44>
 800eb34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eb38:	059a      	lsls	r2, r3, #22
 800eb3a:	d4ef      	bmi.n	800eb1c <__smakebuf_r+0x18>
 800eb3c:	f023 0303 	bic.w	r3, r3, #3
 800eb40:	f043 0302 	orr.w	r3, r3, #2
 800eb44:	81a3      	strh	r3, [r4, #12]
 800eb46:	e7e3      	b.n	800eb10 <__smakebuf_r+0xc>
 800eb48:	4b0d      	ldr	r3, [pc, #52]	; (800eb80 <__smakebuf_r+0x7c>)
 800eb4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800eb4c:	89a3      	ldrh	r3, [r4, #12]
 800eb4e:	6020      	str	r0, [r4, #0]
 800eb50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb54:	81a3      	strh	r3, [r4, #12]
 800eb56:	9b00      	ldr	r3, [sp, #0]
 800eb58:	6163      	str	r3, [r4, #20]
 800eb5a:	9b01      	ldr	r3, [sp, #4]
 800eb5c:	6120      	str	r0, [r4, #16]
 800eb5e:	b15b      	cbz	r3, 800eb78 <__smakebuf_r+0x74>
 800eb60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb64:	4630      	mov	r0, r6
 800eb66:	f000 f889 	bl	800ec7c <_isatty_r>
 800eb6a:	b128      	cbz	r0, 800eb78 <__smakebuf_r+0x74>
 800eb6c:	89a3      	ldrh	r3, [r4, #12]
 800eb6e:	f023 0303 	bic.w	r3, r3, #3
 800eb72:	f043 0301 	orr.w	r3, r3, #1
 800eb76:	81a3      	strh	r3, [r4, #12]
 800eb78:	89a0      	ldrh	r0, [r4, #12]
 800eb7a:	4305      	orrs	r5, r0
 800eb7c:	81a5      	strh	r5, [r4, #12]
 800eb7e:	e7cd      	b.n	800eb1c <__smakebuf_r+0x18>
 800eb80:	0800ddf9 	.word	0x0800ddf9

0800eb84 <__malloc_lock>:
 800eb84:	4801      	ldr	r0, [pc, #4]	; (800eb8c <__malloc_lock+0x8>)
 800eb86:	f7ff ba09 	b.w	800df9c <__retarget_lock_acquire_recursive>
 800eb8a:	bf00      	nop
 800eb8c:	2000008c 	.word	0x2000008c

0800eb90 <__malloc_unlock>:
 800eb90:	4801      	ldr	r0, [pc, #4]	; (800eb98 <__malloc_unlock+0x8>)
 800eb92:	f7ff ba04 	b.w	800df9e <__retarget_lock_release_recursive>
 800eb96:	bf00      	nop
 800eb98:	2000008c 	.word	0x2000008c

0800eb9c <_free_r>:
 800eb9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb9e:	2900      	cmp	r1, #0
 800eba0:	d044      	beq.n	800ec2c <_free_r+0x90>
 800eba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eba6:	9001      	str	r0, [sp, #4]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f1a1 0404 	sub.w	r4, r1, #4
 800ebae:	bfb8      	it	lt
 800ebb0:	18e4      	addlt	r4, r4, r3
 800ebb2:	f7ff ffe7 	bl	800eb84 <__malloc_lock>
 800ebb6:	4a1e      	ldr	r2, [pc, #120]	; (800ec30 <_free_r+0x94>)
 800ebb8:	9801      	ldr	r0, [sp, #4]
 800ebba:	6813      	ldr	r3, [r2, #0]
 800ebbc:	b933      	cbnz	r3, 800ebcc <_free_r+0x30>
 800ebbe:	6063      	str	r3, [r4, #4]
 800ebc0:	6014      	str	r4, [r2, #0]
 800ebc2:	b003      	add	sp, #12
 800ebc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ebc8:	f7ff bfe2 	b.w	800eb90 <__malloc_unlock>
 800ebcc:	42a3      	cmp	r3, r4
 800ebce:	d908      	bls.n	800ebe2 <_free_r+0x46>
 800ebd0:	6825      	ldr	r5, [r4, #0]
 800ebd2:	1961      	adds	r1, r4, r5
 800ebd4:	428b      	cmp	r3, r1
 800ebd6:	bf01      	itttt	eq
 800ebd8:	6819      	ldreq	r1, [r3, #0]
 800ebda:	685b      	ldreq	r3, [r3, #4]
 800ebdc:	1949      	addeq	r1, r1, r5
 800ebde:	6021      	streq	r1, [r4, #0]
 800ebe0:	e7ed      	b.n	800ebbe <_free_r+0x22>
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	b10b      	cbz	r3, 800ebec <_free_r+0x50>
 800ebe8:	42a3      	cmp	r3, r4
 800ebea:	d9fa      	bls.n	800ebe2 <_free_r+0x46>
 800ebec:	6811      	ldr	r1, [r2, #0]
 800ebee:	1855      	adds	r5, r2, r1
 800ebf0:	42a5      	cmp	r5, r4
 800ebf2:	d10b      	bne.n	800ec0c <_free_r+0x70>
 800ebf4:	6824      	ldr	r4, [r4, #0]
 800ebf6:	4421      	add	r1, r4
 800ebf8:	1854      	adds	r4, r2, r1
 800ebfa:	42a3      	cmp	r3, r4
 800ebfc:	6011      	str	r1, [r2, #0]
 800ebfe:	d1e0      	bne.n	800ebc2 <_free_r+0x26>
 800ec00:	681c      	ldr	r4, [r3, #0]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	6053      	str	r3, [r2, #4]
 800ec06:	4421      	add	r1, r4
 800ec08:	6011      	str	r1, [r2, #0]
 800ec0a:	e7da      	b.n	800ebc2 <_free_r+0x26>
 800ec0c:	d902      	bls.n	800ec14 <_free_r+0x78>
 800ec0e:	230c      	movs	r3, #12
 800ec10:	6003      	str	r3, [r0, #0]
 800ec12:	e7d6      	b.n	800ebc2 <_free_r+0x26>
 800ec14:	6825      	ldr	r5, [r4, #0]
 800ec16:	1961      	adds	r1, r4, r5
 800ec18:	428b      	cmp	r3, r1
 800ec1a:	bf04      	itt	eq
 800ec1c:	6819      	ldreq	r1, [r3, #0]
 800ec1e:	685b      	ldreq	r3, [r3, #4]
 800ec20:	6063      	str	r3, [r4, #4]
 800ec22:	bf04      	itt	eq
 800ec24:	1949      	addeq	r1, r1, r5
 800ec26:	6021      	streq	r1, [r4, #0]
 800ec28:	6054      	str	r4, [r2, #4]
 800ec2a:	e7ca      	b.n	800ebc2 <_free_r+0x26>
 800ec2c:	b003      	add	sp, #12
 800ec2e:	bd30      	pop	{r4, r5, pc}
 800ec30:	20000090 	.word	0x20000090

0800ec34 <_read_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4d07      	ldr	r5, [pc, #28]	; (800ec54 <_read_r+0x20>)
 800ec38:	4604      	mov	r4, r0
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	2200      	movs	r2, #0
 800ec40:	602a      	str	r2, [r5, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	f7fe f8b8 	bl	800cdb8 <_read>
 800ec48:	1c43      	adds	r3, r0, #1
 800ec4a:	d102      	bne.n	800ec52 <_read_r+0x1e>
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	b103      	cbz	r3, 800ec52 <_read_r+0x1e>
 800ec50:	6023      	str	r3, [r4, #0]
 800ec52:	bd38      	pop	{r3, r4, r5, pc}
 800ec54:	20000098 	.word	0x20000098

0800ec58 <_fstat_r>:
 800ec58:	b538      	push	{r3, r4, r5, lr}
 800ec5a:	4d07      	ldr	r5, [pc, #28]	; (800ec78 <_fstat_r+0x20>)
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	4604      	mov	r4, r0
 800ec60:	4608      	mov	r0, r1
 800ec62:	4611      	mov	r1, r2
 800ec64:	602b      	str	r3, [r5, #0]
 800ec66:	f7fe f8ec 	bl	800ce42 <_fstat>
 800ec6a:	1c43      	adds	r3, r0, #1
 800ec6c:	d102      	bne.n	800ec74 <_fstat_r+0x1c>
 800ec6e:	682b      	ldr	r3, [r5, #0]
 800ec70:	b103      	cbz	r3, 800ec74 <_fstat_r+0x1c>
 800ec72:	6023      	str	r3, [r4, #0]
 800ec74:	bd38      	pop	{r3, r4, r5, pc}
 800ec76:	bf00      	nop
 800ec78:	20000098 	.word	0x20000098

0800ec7c <_isatty_r>:
 800ec7c:	b538      	push	{r3, r4, r5, lr}
 800ec7e:	4d06      	ldr	r5, [pc, #24]	; (800ec98 <_isatty_r+0x1c>)
 800ec80:	2300      	movs	r3, #0
 800ec82:	4604      	mov	r4, r0
 800ec84:	4608      	mov	r0, r1
 800ec86:	602b      	str	r3, [r5, #0]
 800ec88:	f7fe f8eb 	bl	800ce62 <_isatty>
 800ec8c:	1c43      	adds	r3, r0, #1
 800ec8e:	d102      	bne.n	800ec96 <_isatty_r+0x1a>
 800ec90:	682b      	ldr	r3, [r5, #0]
 800ec92:	b103      	cbz	r3, 800ec96 <_isatty_r+0x1a>
 800ec94:	6023      	str	r3, [r4, #0]
 800ec96:	bd38      	pop	{r3, r4, r5, pc}
 800ec98:	20000098 	.word	0x20000098

0800ec9c <_init>:
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9e:	bf00      	nop
 800eca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca2:	bc08      	pop	{r3}
 800eca4:	469e      	mov	lr, r3
 800eca6:	4770      	bx	lr

0800eca8 <_fini>:
 800eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecaa:	bf00      	nop
 800ecac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecae:	bc08      	pop	{r3}
 800ecb0:	469e      	mov	lr, r3
 800ecb2:	4770      	bx	lr
